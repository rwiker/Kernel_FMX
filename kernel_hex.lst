
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass --m65816 -D TARGET=2 --long-address --flat --intel-hex -o kernel.hex --list kernel_hex.lst --labels=kernel_hex.lbl src/kernel.asm
; Wed May  6 21:05:12 2020

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=2					TARGET=2

;******  Processing input file: src/kernel.asm

=1					TARGET_FLASH = 1              ; The code is being assembled for Flash
=2					TARGET_RAM = 2                ; The code is being assembled for RAM

;******  Processing file: src/macros_inc.asm


;******  Return to file: src/kernel.asm


;******  Processing file: src/characters.asm

=$03					CHAR_CTRL_C = $03   ; CTRL-C
=$08					CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09					CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a					CHAR_LF = $0A       ; Line feed
=$0d					CHAR_CR = $0D       ; Carriage return
=$0f					CHAR_INS = $0F      ; Insert a space at the cursor
=$11					CHAR_UP = $11       ; Up arrow
=$1d					CHAR_RIGHT = $1D    ; Right arrow
=$20					CHAR_SP = $20       ; Space
=$91					CHAR_DOWN = $91     ; Down arrow
=$9d					CHAR_LEFT = $9D     ; Left arrow
=$7f					CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)

;******  Return to file: src/kernel.asm


;******  Processing file: src/simulator_inc.asm


;******  Return to file: src/kernel.asm


;******  Processing file: src/page_00_inc.asm

=$000000				BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000				unused_0000      = $000000 ;12 Bytes unused
=$000008				OPL2_ADDY_PTR_LO = $000008  ; THis Points towards the Instruments Database
=$000009				OPL2_ADDY_PTR_MD = $000009
=$00000a				OPL2_ADDY_PTR_HI = $00000A
=$00000c				SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f				COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011				COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013				LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015				LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017				CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a				CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c				CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e				CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f				COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022				STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024				STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026				OPL2_OPERATOR    = $000026 ;
=$000027				OPL2_CHANNEL     = $000027 ;
=$000028				OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a				OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c				OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e				OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030				OPL2_NOTE        = $000030 ; 1 Byte
=$000031				OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032				OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033				OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034				OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035				OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036				OPL2_LOOP        = $000036 ;
=$000036				OPL2_BLOCK       = $000036
=$000038				SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c				SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f				SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040				BM_CLEAR_SCRN_X  = $000040
=$000042				BM_CLEAR_SCRN_Y  = $000042
=$000040				RAD_STARTLINE    = $000040 ; 1 Byte
=$000041				RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042				RAD_LINE         = $000042 ; 1 Byte
=$000043				RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044				RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045				RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046				RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048				RAD_TICK         = $000048
=$00004a				RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c				RAD_CHANNE_EFFCT = $00004C
=$00004d				RAD_TEMP         = $00004D
=$000050				RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053				RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054				RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057				RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059				RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a				RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040				BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042				BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044				BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048				BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c				BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e				SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050				BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054				BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056				BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058				BMP_PALET_CHOICE = $000058 ;
=$0000e0				MOUSE_PTR        = $0000E0
=$0000e1				MOUSE_POS_X_LO   = $0000E1
=$0000e2				MOUSE_POS_X_HI   = $0000E2
=$0000e3				MOUSE_POS_Y_LO   = $0000E3
=$0000e4				MOUSE_POS_Y_HI   = $0000E4
=$0000f0				USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$000100				GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000140				INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160				TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160				TIMER_CTRL_REGLL = $000160 ;
=$000161				TIMER_CTRL_REGLH = $000161 ;
=$000162				TIMER_CTRL_REGHL = $000162 ;
=$000163				TIMER_CTRL_REGHH = $000163 ;
=$000240				CPU_REGISTERS    = $000240 ; Byte
=$000240				CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242				CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244				CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246				CPUX             = $000246 ;2 Bytes X Register (X)
=$000248				CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a				CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c				CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e				CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f				CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250				MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250				MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253				MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256				MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258				MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b				MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d				MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261				MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265				MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269				MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d				MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271				MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275				MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279				MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300				LOADFILE_VARS    = $000300 ; Byte
=$000300				LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303				LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304				LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305				LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307				LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308				LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a				LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d				BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f				BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311				BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312				BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000320				SDOS_VARIABLES   = $000320
=$000320				BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321				BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322				BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326				BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a				BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032e				DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330				DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338				DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c				DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340				DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344				DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348				DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c				DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350				DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354				DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358				DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c				DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000400				DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000700				CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703				CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704				CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000f00				KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080					KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f				KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83				KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84				COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86				COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87				KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88				KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89				KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a				KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b				KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d				KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000				KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff				KERNEL_JMP_END   = $001FFF
=$002000				TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff				TEST_END         = $007FFF ;0 Byte
=$008000				STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff				STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$00ff00				ISR_BEGIN        = $00FF00 ; Byte  Beginning of CPU vectors in Direct page
=$00ff00				HRESET           = $00FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$00ff10				HCOP             = $00FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$00ff20				HBRK             = $00FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$00ff30				HABORT           = $00FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$00ff40				HNMI             = $00FF40 ;32 Bytes Handle NMI
=$00ff60				HIRQ             = $00FF60 ;32 Bytes Handle IRQ
=$00ff80				Unused_FF80      = $00FF80 ;End of direct page Interrrupt handlers
=$00ffe0				VECTORS_BEGIN    = $00FFE0 ;0 Byte  Interrupt vectors
=$00ffe0				JMP_READY        = $00FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$00ffe4				VECTOR_COP       = $00FFE4 ;2 Bytes Native COP Interrupt vector
=$00ffe6				VECTOR_BRK       = $00FFE6 ;2 Bytes Native BRK Interrupt vector
=$00ffe8				VECTOR_ABORT     = $00FFE8 ;2 Bytes Native ABORT Interrupt vector
=$00ffea				VECTOR_NMI       = $00FFEA ;2 Bytes Native NMI Interrupt vector
=$00ffec				VECTOR_RESET     = $00FFEC ;2 Bytes Unused (Native RESET vector)
=$00ffee				VECTOR_IRQ       = $00FFEE ;2 Bytes Native IRQ Vector
=$00fff0				RETURN           = $00FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$00fff4				VECTOR_ECOP      = $00FFF4 ;2 Bytes Emulation mode interrupt handler
=$00fff6				VECTOR_EBRK      = $00FFF6 ;2 Bytes Emulation mode interrupt handler
=$00fff8				VECTOR_EABORT    = $00FFF8 ;2 Bytes Emulation mode interrupt handler
=$00fffa				VECTOR_ENMI      = $00FFFA ;2 Bytes Emulation mode interrupt handler
=$00fffc				VECTOR_ERESET    = $00FFFC ;2 Bytes Emulation mode interrupt handler
=$00fffe				VECTOR_EIRQ      = $00FFFE ;2 Bytes Emulation mode interrupt handler
=$010000				VECTORS_END      = $010000 ;*End of vector space
=$00ffff				BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src/kernel.asm


;******  Processing file: src/page_00_data.asm

>380000	00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>380003	4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>380005	80 00				                .word 128           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>380007	38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>380009	40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>38000b	00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>38000e	00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380010	00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380012	0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>380013	00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>380014	00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>380016	ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src/kernel.asm


;******  Processing file: src/page_00_code.asm

.ff00	18		clc		RHRESET         CLC
.ff01	fb		xce		                XCE
.ff02	5c 00 10 38	jmp $381000	                JML BOOT
.ff10					RHCOP
.ff10	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff12	8b		phb		                PHB
.ff13	0b		phd		                PHD
.ff14	48		pha		                PHA
.ff15	da		phx		                PHX
.ff16	5a		phy		                PHY
.ff17	5c 08 10 38	jmp $381008	                JML BREAK
.ff20					RHBRK
.ff20	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff22	8b		phb		                PHB
.ff23	0b		phd		                PHD
.ff24	48		pha		                PHA
.ff25	da		phx		                PHX
.ff26	5a		phy		                PHY
.ff27	5c 08 10 38	jmp $381008	                JML BREAK
.ff30					RHABORT
.ff30	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff32	8b		phb		                PHB
.ff33	0b		phd		                PHD
.ff34	48		pha		                PHA
.ff35	da		phx		                PHX
.ff36	5a		phy		                PHY
.ff37	5c 08 10 38	jmp $381008	                JML BREAK
.ff40					 RHNMI
.ff40	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff42	8b		phb		                PHB
.ff43	0b		phd		                PHD
.ff44	48		pha		                PHA
.ff45	da		phx		                PHX
.ff46	5a		phy		                PHY
.ff47	22 4e 12 38	jsl $38124e	                JSL NMI_HANDLER
.ff4b	7a		ply		                PLY
.ff4c	fa		plx		                PLX
.ff4d	68		pla		                PLA
.ff4e	2b		pld		                PLD
.ff4f	ab		plb		                PLB
.ff50	40		rti		                RTI
.ff60					RHIRQ
.ff60	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff62	8b		phb		                PHB
.ff63	0b		phd		                PHD
.ff64	48		pha		                PHA
.ff65	da		phx		                PHX
.ff66	5a		phy		                PHY
.ff67	22 20 11 38	jsl $381120	                JSL IRQ_HANDLER
.ff6b	7a		ply		                PLY
.ff6c	fa		plx		                PLX
.ff6d	68		pla		                PLA
.ff6e	2b		pld		                PLD
.ff6f	ab		plb		                PLB
.ff70	40		rti		                RTI
.ffe0	5c 04 00 3a	jmp $3a0004	JUMP_READY      JML MONITOR    ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>ffe4	10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>ffe6	20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>ffe8	30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>ffea	40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>ffec	00 00				                .word $0000    ; FFEC
>ffee	60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.fff0	5c ef 05 39	jmp $3905ef	RRETURN         JML IRETURN
>fff4	10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>fff6	20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>fff8	30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>fffa	40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>fffc	00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>fffe	60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src/kernel.asm


;******  Processing file: src/Math_def.asm

=$000100				UNSIGNED_MULT_A_LO  = $000100
=$000101				UNSIGNED_MULT_A_HI  = $000101
=$000102				UNSIGNED_MULT_B_LO  = $000102
=$000103				UNSIGNED_MULT_B_HI  = $000103
=$000104				UNSIGNED_MULT_AL_LO = $000104
=$000105				UNSIGNED_MULT_AL_HI = $000105
=$000106				UNSIGNED_MULT_AH_LO = $000106
=$000107				UNSIGNED_MULT_AH_HI = $000107
=$000108				SIGNED_MULT_A_LO    = $000108
=$000109				SIGNED_MULT_A_HI    = $000109
=$00010a				SIGNED_MULT_B_LO    = $00010A
=$00010b				SIGNED_MULT_B_HI    = $00010B
=$00010c				SIGNED_MULT_AL_LO   = $00010C
=$00010d				SIGNED_MULT_AL_HI   = $00010D
=$00010e				SIGNED_MULT_AH_LO   = $00010E
=$00010f				SIGNED_MULT_AH_HI   = $00010F
=$000110				UNSIGNED_DIV_DEM_LO = $000110
=$000111				UNSIGNED_DIV_DEM_HI = $000111
=$000112				UNSIGNED_DIV_NUM_LO = $000112
=$000113				UNSIGNED_DIV_NUM_HI = $000113
=$000114				UNSIGNED_DIV_QUO_LO = $000114
=$000115				UNSIGNED_DIV_QUO_HI = $000115
=$000116				UNSIGNED_DIV_REM_LO = $000116
=$000117				UNSIGNED_DIV_REM_HI = $000117
=$000118				SIGNED_DIV_DEM_LO   = $000118
=$000119				SIGNED_DIV_DEM_HI   = $000119
=$00011a				SIGNED_DIV_NUM_LO   = $00011A
=$00011b				SIGNED_DIV_NUM_HI   = $00011B
=$00011c				SIGNED_DIV_QUO_LO   = $00011C
=$00011d				SIGNED_DIV_QUO_HI   = $00011D
=$00011e				SIGNED_DIV_REM_LO   = $00011E
=$00011f				SIGNED_DIV_REM_HI   = $00011F
=$000120				ADDER32_A_LL        = $000120
=$000121				ADDER32_A_LH        = $000121
=$000122				ADDER32_A_HL        = $000122
=$000123				ADDER32_A_HH        = $000123
=$000124				ADDER32_B_LL        = $000124
=$000125				ADDER32_B_LH        = $000125
=$000126				ADDER32_B_HL        = $000126
=$000127				ADDER32_B_HH        = $000127
=$000128				ADDER32_R_LL        = $000128
=$000129				ADDER32_R_LH        = $000129
=$00012a				ADDER32_R_HL        = $00012A
=$00012b				ADDER32_R_HH        = $00012B

;******  Return to file: src/kernel.asm


;******  Processing file: src/interrupt_def.asm

=$000140				INT_PENDING_REG0 = $000140 ;
=$000141				INT_PENDING_REG1 = $000141 ;
=$000142				INT_PENDING_REG2 = $000142 ;
=$000143				INT_PENDING_REG3 = $000143 ; FMX Model
=$000144				INT_POL_REG0     = $000144 ;
=$000145				INT_POL_REG1     = $000145 ;
=$000146				INT_POL_REG2     = $000146 ;
=$000147				INT_POL_REG7     = $000147 ; FMX Model
=$000148				INT_EDGE_REG0    = $000148 ;
=$000149				INT_EDGE_REG1    = $000149 ;
=$00014a				INT_EDGE_REG2    = $00014A ;
=$00014b				INT_EDGE_REG3    = $00014B ; FMX Model
=$00014c				INT_MASK_REG0    = $00014C ;
=$00014d				INT_MASK_REG1    = $00014D ;
=$00014e				INT_MASK_REG2    = $00014E ;
=$00014f				INT_MASK_REG3    = $00014F ; FMX Model
=$01					FNX0_INT00_SOF        = $01  ;Start of Frame @ 60FPS
=$02					FNX0_INT01_SOL        = $02  ;Start of Line (Programmable)
=$04					FNX0_INT02_TMR0       = $04  ;Timer 0 Interrupt
=$08					FNX0_INT03_TMR1       = $08  ;Timer 1 Interrupt
=$10					FNX0_INT04_TMR2       = $10  ;Timer 2 Interrupt
=$20					FNX0_INT05_RTC        = $20  ;Real-Time Clock Interrupt
=$40					FNX0_INT06_FDC        = $40  ;Floppy Disk Controller
=$80					FNX0_INT07_MOUSE      = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01					FNX1_INT00_KBD        = $01  ;Keyboard Interrupt
=$02					FNX1_INT01_SC0        = $02  ;VICKY_II (INT2) Sprite 2 Sprite Collision
=$04					FNX1_INT02_SC1        = $04  ;VICKY_II (INT3) Sprite 2 Tiles Collision
=$08					FNX1_INT03_COM2       = $08  ;Serial Port 2
=$10					FNX1_INT04_COM1       = $10  ;Serial Port 1
=$20					FNX1_INT05_MPU401     = $20  ;Midi Controller Interrupt
=$40					FNX1_INT06_LPT        = $40  ;Parallel Port
=$80					FNX1_INT07_SDCARD     = $80  ;SD Card Controller Interrupt (CH376S)
=$01					FNX2_INT00_OPL3       = $01  ;OPl3
=$02					FNX2_INT01_GABE_INT0  = $02  ;GABE (INT0) - TBD
=$04					FNX2_INT02_GABE_INT1  = $04  ;GABE (INT1) - TBD
=$08					FNX2_INT03_SDMA       = $08  ;VICKY_II (INT4)
=$10					FNX2_INT04_VDMA       = $10  ;VICKY_II (INT5)
=$20					FNX2_INT05_GABE_INT2  = $20  ;GABE (INT2) - TBD
=$40					FNX2_INT06_EXT        = $40  ;External Expansion
=$80					FNX2_INT07_SDCARD_INS = $80  ; SDCARD Insertion
=$01					FNX3_INT00_OPN2       = $01  ;OPN2
=$02					FNX3_INT01_OPM        = $02  ;OPM
=$04					FNX3_INT02_IDE        = $04  ;HDD IDE INTERRUPT
=$08					FNX3_INT03_TBD        = $08  ;TBD
=$10					FNX3_INT04_TBD        = $10  ;TBD
=$20					FNX3_INT05_TBD        = $20  ;GABE (INT2) - TBD
=$40					FNX3_INT06_TBD        = $40  ;External Expansion
=$80					FNX3_INT07_TBD        = $80  ; SDCARD Insertion

;******  Return to file: src/kernel.asm


;******  Processing file: src/dram_inc.asm

=$afa000				SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000				SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000				SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src/kernel.asm


;******  Processing file: src/vicky_def.asm

=$af0000				MASTER_CTRL_REG_L	      = $AF0000
=$01					Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02					Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04					Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08					Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10					Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20					Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40					Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80					Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001				MASTER_CTRL_REG_H	      = $AF0001
=$af0002				VKY_RESERVED_00         = $AF0002
=$af0003				VKY_RESERVED_01         = $AF0003
=$01					Border_Ctrl_Enable      = $01
=$af0004				BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005				BORDER_COLOR_B          = $AF0005
=$af0006				BORDER_COLOR_G          = $AF0006
=$af0007				BORDER_COLOR_R          = $AF0007
=$af0008				BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009				BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d				BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e				BACKGROUND_COLOR_G      = $AF000E
=$af000f				BACKGROUND_COLOR_R      = $AF000F ;
=$af0010				VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01					Vky_Cursor_Enable       = $01
=$02					Vky_Cursor_Flash_Rate0  = $02
=$04					Vky_Cursor_Flash_Rate1  = $04
=$08					Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10					Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011				VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012				VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013				VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014				VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015				VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016				VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017				VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b				VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c				VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d				VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e				VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f				VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c				VKY_INFO_CHIP_NUM_L     = $AF001C
=$af001d				VKY_INFO_CHIP_NUM_H     = $AF001D
=$af001e				VKY_INFO_CHIP_VER_L     = $AF001E
=$af001f				VKY_INFO_CHIP_VER_H     = $AF001F
=$01					TILE_Enable             = $01
=$02					TILE_LUT0               = $02
=$04					TILE_LUT1               = $04
=$08					TILE_LUT2               = $08
=$80					TILESHEET_256x256_En    = $80   ; 0 -> Sequential, 1-> 256x256 Tile Sheet Striding
=$af0100				TL0_CONTROL_REG         = $AF0100       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0101				TL0_START_ADDY_L        = $AF0101       ; Not USed right now - Starting Address to where is the MAP
=$af0102				TL0_START_ADDY_M        = $AF0102
=$af0103				TL0_START_ADDY_H        = $AF0103
=$af0104				TL0_MAP_X_STRIDE_L      = $AF0104       ; The Stride of the Map
=$af0105				TL0_MAP_X_STRIDE_H      = $AF0105
=$af0106				TL0_MAP_Y_STRIDE_L      = $AF0106       ; The Stride of the Map
=$af0107				TL0_MAP_Y_STRIDE_H      = $AF0107
=$af0108				TL1_CONTROL_REG         = $AF0108       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0109				TL1_START_ADDY_L        = $AF0109       ; Not USed right now - Starting Address to where is the MAP
=$af010a				TL1_START_ADDY_M        = $AF010A
=$af010b				TL1_START_ADDY_H        = $AF010B
=$af010c				TL1_MAP_X_STRIDE_L      = $AF010C       ; The Stride of the Map
=$af010d				TL1_MAP_X_STRIDE_H      = $AF010D
=$af010e				TL1_MAP_Y_STRIDE_L      = $AF010E       ; The Stride of the Map
=$af010f				TL1_MAP_Y_STRIDE_H      = $AF010F
=$af0110				TL2_CONTROL_REG         = $AF0110       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0111				TL2_START_ADDY_L        = $AF0111       ; Not USed right now - Starting Address to where is the MAP
=$af0112				TL2_START_ADDY_M        = $AF0112
=$af0113				TL2_START_ADDY_H        = $AF0113
=$af0114				TL2_MAP_X_STRIDE_L      = $AF0114       ; The Stride of the Map
=$af0115				TL2_MAP_X_STRIDE_H      = $AF0115
=$af0116				TL2_MAP_Y_STRIDE_L      = $AF0116       ; The Stride of the Map
=$af0117				TL2_MAP_Y_STRIDE_H      = $AF0117
=$af0118				TL3_CONTROL_REG         = $AF0118       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0119				TL3_START_ADDY_L        = $AF0119       ; Not USed right now - Starting Address to where is the MAP
=$af011a				TL3_START_ADDY_M        = $AF011A
=$af011b				TL3_START_ADDY_H        = $AF011B
=$af011c				TL3_MAP_X_STRIDE_L      = $AF011C       ; The Stride of the Map
=$af011d				TL3_MAP_X_STRIDE_H      = $AF011D
=$af011e				TL3_MAP_Y_STRIDE_L      = $AF011E       ; The Stride of the Map
=$af011f				TL3_MAP_Y_STRIDE_H      = $AF011F
=$af0140				BM_CONTROL_REG          = $AF0140
=$af0141				BM_START_ADDY_L         = $AF0141
=$af0142				BM_START_ADDY_M         = $AF0142
=$af0143				BM_START_ADDY_H         = $AF0143
=$af0144				BM_X_SIZE_L             = $AF0144
=$af0145				BM_X_SIZE_H             = $AF0145
=$af0146				BM_Y_SIZE_L             = $AF0146
=$af0147				BM_Y_SIZE_H             = $AF0147
=$af0148				BM_RESERVED_0           = $AF0148
=$af0149				BM_RESERVED_1           = $AF0149
=$af014a				BM_RESERVED_2           = $AF014A
=$af014b				BM_RESERVED_3           = $AF014B
=$af014c				BM_RESERVED_4           = $AF014C
=$af014d				BM_RESERVED_5           = $AF014D
=$af014e				BM_RESERVED_6           = $AF014E
=$af014f				BM_RESERVED_7           = $AF014F
=$01					SPRITE_Enable             = $01
=$02					SPRITE_LUT0               = $02 ; This is the LUT that the Sprite will use
=$04					SPRITE_LUT1               = $04
=$08					SPRITE_LUT2               = $08 ; Only 4 LUT for Now, So this bit is not used.
=$10					SPRITE_DEPTH0             = $10 ; This is the Layer the Sprite will be Displayed in
=$20					SPRITE_DEPTH1             = $20
=$40					SPRITE_DEPTH2             = $40
=$af0200				SP00_CONTROL_REG        = $AF0200
=$af0201				SP00_ADDY_PTR_L         = $AF0201
=$af0202				SP00_ADDY_PTR_M         = $AF0202
=$af0203				SP00_ADDY_PTR_H         = $AF0203
=$af0204				SP00_X_POS_L            = $AF0204
=$af0205				SP00_X_POS_H            = $AF0205
=$af0206				SP00_Y_POS_L            = $AF0206
=$af0207				SP00_Y_POS_H            = $AF0207
=$af0208				SP01_CONTROL_REG        = $AF0208
=$af0209				SP01_ADDY_PTR_L         = $AF0209
=$af020a				SP01_ADDY_PTR_M         = $AF020A
=$af020b				SP01_ADDY_PTR_H         = $AF020B
=$af020c				SP01_X_POS_L            = $AF020C
=$af020d				SP01_X_POS_H            = $AF020D
=$af020e				SP01_Y_POS_L            = $AF020E
=$af020f				SP01_Y_POS_H            = $AF020F
=$af0210				SP02_CONTROL_REG        = $AF0210
=$af0211				SP02_ADDY_PTR_L         = $AF0211
=$af0212				SP02_ADDY_PTR_M         = $AF0212
=$af0213				SP02_ADDY_PTR_H         = $AF0213
=$af0214				SP02_X_POS_L            = $AF0214
=$af0215				SP02_X_POS_H            = $AF0215
=$af0216				SP02_Y_POS_L            = $AF0216
=$af0217				SP02_Y_POS_H            = $AF0217
=$af0218				SP03_CONTROL_REG        = $AF0218
=$af0219				SP03_ADDY_PTR_L         = $AF0219
=$af021a				SP03_ADDY_PTR_M         = $AF021A
=$af021b				SP03_ADDY_PTR_H         = $AF021B
=$af021c				SP03_X_POS_L            = $AF021C
=$af021d				SP03_X_POS_H            = $AF021D
=$af021e				SP03_Y_POS_L            = $AF021E
=$af021f				SP03_Y_POS_H            = $AF021F
=$af0220				SP04_CONTROL_REG        = $AF0220
=$af0221				SP04_ADDY_PTR_L         = $AF0221
=$af0222				SP04_ADDY_PTR_M         = $AF0222
=$af0223				SP04_ADDY_PTR_H         = $AF0223
=$af0224				SP04_X_POS_L            = $AF0224
=$af0225				SP04_X_POS_H            = $AF0225
=$af0226				SP04_Y_POS_L            = $AF0226
=$af0227				SP04_Y_POS_H            = $AF0227
=$af0228				SP05_CONTROL_REG        = $AF0228
=$af0229				SP05_ADDY_PTR_L         = $AF0229
=$af022a				SP05_ADDY_PTR_M         = $AF022A
=$af022b				SP05_ADDY_PTR_H         = $AF022B
=$af022c				SP05_X_POS_L            = $AF022C
=$af022d				SP05_X_POS_H            = $AF022D
=$af022e				SP05_Y_POS_L            = $AF022E
=$af022f				SP05_Y_POS_H            = $AF022F
=$af0230				SP06_CONTROL_REG        = $AF0230
=$af0231				SP06_ADDY_PTR_L         = $AF0231
=$af0232				SP06_ADDY_PTR_M         = $AF0232
=$af0233				SP06_ADDY_PTR_H         = $AF0233
=$af0234				SP06_X_POS_L            = $AF0234
=$af0235				SP06_X_POS_H            = $AF0235
=$af0236				SP06_Y_POS_L            = $AF0236
=$af0237				SP06_Y_POS_H            = $AF0237
=$af0238				SP07_CONTROL_REG        = $AF0238
=$af0239				SP07_ADDY_PTR_L         = $AF0239
=$af023a				SP07_ADDY_PTR_M         = $AF023A
=$af023b				SP07_ADDY_PTR_H         = $AF023B
=$af023c				SP07_X_POS_L            = $AF023C
=$af023d				SP07_X_POS_H            = $AF023D
=$af023e				SP07_Y_POS_L            = $AF023E
=$af023f				SP07_Y_POS_H            = $AF023F
=$af0240				SP08_CONTROL_REG        = $AF0240
=$af0241				SP08_ADDY_PTR_L         = $AF0241
=$af0242				SP08_ADDY_PTR_M         = $AF0242
=$af0243				SP08_ADDY_PTR_H         = $AF0243
=$af0244				SP08_X_POS_L            = $AF0244
=$af0245				SP08_X_POS_H            = $AF0245
=$af0246				SP08_Y_POS_L            = $AF0246
=$af0247				SP08_Y_POS_H            = $AF0247
=$af0248				SP09_CONTROL_REG        = $AF0248
=$af0249				SP09_ADDY_PTR_L         = $AF0249
=$af024a				SP09_ADDY_PTR_M         = $AF024A
=$af024b				SP09_ADDY_PTR_H         = $AF024B
=$af024c				SP09_X_POS_L            = $AF024C
=$af024d				SP09_X_POS_H            = $AF024D
=$af024e				SP09_Y_POS_L            = $AF024E
=$af024f				SP09_Y_POS_H            = $AF024F
=$af0250				SP10_CONTROL_REG        = $AF0250
=$af0251				SP10_ADDY_PTR_L         = $AF0251
=$af0252				SP10_ADDY_PTR_M         = $AF0252
=$af0253				SP10_ADDY_PTR_H         = $AF0253
=$af0254				SP10_X_POS_L            = $AF0254
=$af0255				SP10_X_POS_H            = $AF0255
=$af0256				SP10_Y_POS_L            = $AF0256
=$af0257				SP10_Y_POS_H            = $AF0257
=$af0258				SP11_CONTROL_REG        = $AF0258
=$af0259				SP11_ADDY_PTR_L         = $AF0259
=$af025a				SP11_ADDY_PTR_M         = $AF025A
=$af025b				SP11_ADDY_PTR_H         = $AF025B
=$af025c				SP11_X_POS_L            = $AF025C
=$af025d				SP11_X_POS_H            = $AF025D
=$af025e				SP11_Y_POS_L            = $AF025E
=$af025f				SP11_Y_POS_H            = $AF025F
=$af0260				SP12_CONTROL_REG        = $AF0260
=$af0261				SP12_ADDY_PTR_L         = $AF0261
=$af0262				SP12_ADDY_PTR_M         = $AF0262
=$af0263				SP12_ADDY_PTR_H         = $AF0263
=$af0264				SP12_X_POS_L            = $AF0264
=$af0265				SP12_X_POS_H            = $AF0265
=$af0266				SP12_Y_POS_L            = $AF0266
=$af0267				SP12_Y_POS_H            = $AF0267
=$af0268				SP13_CONTROL_REG        = $AF0268
=$af0269				SP13_ADDY_PTR_L         = $AF0269
=$af026a				SP13_ADDY_PTR_M         = $AF026A
=$af026b				SP13_ADDY_PTR_H         = $AF026B
=$af026c				SP13_X_POS_L            = $AF026C
=$af026d				SP13_X_POS_H            = $AF026D
=$af026e				SP13_Y_POS_L            = $AF026E
=$af026f				SP13_Y_POS_H            = $AF026F
=$af0270				SP14_CONTROL_REG        = $AF0270
=$af0271				SP14_ADDY_PTR_L         = $AF0271
=$af0272				SP14_ADDY_PTR_M         = $AF0272
=$af0273				SP14_ADDY_PTR_H         = $AF0273
=$af0274				SP14_X_POS_L            = $AF0274
=$af0275				SP14_X_POS_H            = $AF0275
=$af0276				SP14_Y_POS_L            = $AF0276
=$af0277				SP14_Y_POS_H            = $AF0277
=$af0278				SP15_CONTROL_REG        = $AF0278
=$af0279				SP15_ADDY_PTR_L         = $AF0279
=$af027a				SP15_ADDY_PTR_M         = $AF027A
=$af027b				SP15_ADDY_PTR_H         = $AF027B
=$af027c				SP15_X_POS_L            = $AF027C
=$af027d				SP15_X_POS_H            = $AF027D
=$af027e				SP15_Y_POS_L            = $AF027E
=$af027f				SP15_Y_POS_H            = $AF027F
=$af0280				SP16_CONTROL_REG        = $AF0280
=$af0281				SP16_ADDY_PTR_L         = $AF0281
=$af0282				SP16_ADDY_PTR_M         = $AF0282
=$af0283				SP16_ADDY_PTR_H         = $AF0283
=$af0284				SP16_X_POS_L            = $AF0284
=$af0285				SP16_X_POS_H            = $AF0285
=$af0286				SP16_Y_POS_L            = $AF0286
=$af0287				SP16_Y_POS_H            = $AF0287
=$af0288				SP17_CONTROL_REG        = $AF0288
=$af0289				SP17_ADDY_PTR_L         = $AF0289
=$af028a				SP17_ADDY_PTR_M         = $AF028A
=$af028b				SP17_ADDY_PTR_H         = $AF028B
=$af028c				SP17_X_POS_L            = $AF028C
=$af028d				SP17_X_POS_H            = $AF028D
=$af028e				SP17_Y_POS_L            = $AF028E
=$af028f				SP17_Y_POS_H            = $AF028F
=$af0400				VDMA_CONTROL_REG        = $AF0400
=$01					VDMA_CTRL_Enable        = $01
=$02					VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04					VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08					VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$80					VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401				VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401				VDMA_STATUS_REG         = $AF0401 ; Read only
=$01					VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02					VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04					VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80					VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402				VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403				VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404				VDMA_SRC_ADDY_H         = $AF0404
=$af0405				VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406				VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407				VDMA_DST_ADDY_H         = $AF0407
=$af0408				VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409				VDMA_SIZE_M             = $AF0409
=$af040a				VDMA_SIZE_H             = $AF040A
=$af040b				VDMA_IGNORED            = $AF040B
=$af0408				VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409				VDMA_X_SIZE_H           = $AF0409
=$af040a				VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b				VDMA_Y_SIZE_H           = $AF040B
=$af040c				VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d				VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e				VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f				VDMA_DST_STRIDE_H       = $AF040F ;
=$af0500				MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff				MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600				MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff				MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700				MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701				MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702				MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703				MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704				MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705				MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706				MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707				MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708				MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b				C256F_MODEL_MAJOR       = $AF070B ;
=$af070c				C256F_MODEL_MINOR       = $AF070C ;
=$af070d				FPGA_DOR                = $AF070D ;
=$af070e				FPGA_MOR                = $AF070E ;
=$af070f				FPGA_YOR                = $AF070F ;
=$af1f40				FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80				BG_CHAR_LUT_PTR		      = $AF1F80
=$af2000				GRPH_LUT0_PTR		        = $AF2000
=$af2400				GRPH_LUT1_PTR		        = $AF2400
=$af2800				GRPH_LUT2_PTR		        = $AF2800
=$af2c00				GRPH_LUT3_PTR		        = $AF2C00
=$af3000				GRPH_LUT4_PTR		        = $AF3000
=$af3400				GRPH_LUT5_PTR		        = $AF3400
=$af3800				GRPH_LUT6_PTR		        = $AF3800
=$af3c00				GRPH_LUT7_PTR		        = $AF3C00
=$af4000				GAMMA_B_LUT_PTR		      = $AF4000
=$af4100				GAMMA_G_LUT_PTR		      = $AF4100
=$af4200				GAMMA_R_LUT_PTR		      = $AF4200
=$af5000				TILE_MAP0       		    = $AF5000     ;$AF5000 - $AF57FF
=$af5800				TILE_MAP1               = $AF5800     ;$AF5800 - $AF5FFF
=$af6000				TILE_MAP2               = $AF6000     ;$AF6000 - $AF67FF
=$af6800				TILE_MAP3               = $AF6800     ;$AF6800 - $AF6FFF
=$af8000				FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$af8800				FONT_MEMORY_BANK1       = $AF8800     ;$AF8800 - $AF8FFF
=$afa000				CS_TEXT_MEM_PTR         = $AFA000
=$afc000				CS_COLOR_MEM_PTR        = $AFC000
=$afe000				BTX_START               = $AFE000     ; BEATRIX Registers
=$afffff				BTX_END                 = $AFFFFF

;******  Return to file: src/kernel.asm


;******  Processing file: src/super_io_def.asm

=$af1100				PME_STS_REG     = $AF1100
=$af1102				PME_EN_REG		  = $AF1102
=$af1104				PME_STS1_REG		= $AF1104
=$af1105				PME_STS2_REG		= $AF1105
=$af1106				PME_STS3_REG		= $AF1106
=$af1107				PME_STS4_REG		= $AF1107
=$af1108				PME_STS5_REG		= $AF1108
=$af110a				PME_EN1_REG     = $AF110A
=$af110b				PME_EN2_REG     = $AF110B
=$af110c				PME_EN3_REG     = $AF110C
=$af110d				PME_EN4_REG     = $AF110D
=$af110e				PME_EN5_REG     = $AF110E
=$af1110				SMI_STS1_REG		= $AF1110
=$af1111				SMI_STS2_REG		= $AF1111
=$af1112				SMI_STS3_REG		= $AF1112
=$af1113				SMI_STS4_REG		= $AF1113
=$af1114				SMI_STS5_REG		= $AF1114
=$af1116				SMI_EN1_REG     = $AF1116
=$af1117				SMI_EN2_REG     = $AF1117
=$af1118				SMI_EN3_REG     = $AF1118
=$af1119				SMI_EN4_REG     = $AF1119
=$af111a				SMI_EN5_REG     = $AF111A
=$af111c				MSC_ST_REG      = $AF111C
=$af111e				FORCE_DISK_CHANGE       = $AF111E
=$af111f				FLOPPY_DATA_RATE        = $AF111F
=$af1120				UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121				UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122				DEV_DISABLE_REG         = $AF1122
=$af1123				GP10_REG    		= $AF1123
=$af1124				GP11_REG    		= $AF1124
=$af1125				GP12_REG    		= $AF1125
=$af1126				GP13_REG    		= $AF1126
=$af1127				GP14_REG    		= $AF1127
=$af1128				GP15_REG    		= $AF1128
=$af1129				GP16_REG    		= $AF1129
=$af112a				GP17_REG    		= $AF112A
=$af112b				GP20_REG    		= $AF112B
=$af112c				GP21_REG    		= $AF112C
=$af112d				GP22_REG		= $AF112D
=$af112f				GP24_REG		= $AF112F
=$af1130				GP25_REG		= $AF1130
=$af1131				GP26_REG		= $AF1131
=$af1132				GP27_REG		= $AF1132
=$af1133				GP30_REG		= $AF1133
=$af1134				GP31_REG		= $AF1134
=$af1135				GP32_REG		= $AF1135
=$af1136				GP33_REG		= $AF1136
=$af1137				GP34_REG		= $AF1137
=$af1138				GP35_REG		= $AF1138
=$af1139				GP36_REG		= $AF1139
=$af113a				GP37_REG		= $AF113A
=$af113b				GP40_REG		= $AF113B
=$af113c				GP41_REG		= $AF113C
=$af113d				GP42_REG		= $AF113D
=$af113e				GP43_REG		= $AF113E
=$af113f				GP50_REG		= $AF113F
=$af1140				GP51_REG		= $AF1140
=$af1141				GP52_REG		= $AF1141
=$af1142				GP53_REG		= $AF1142
=$af1143				GP54_REG		= $AF1143
=$af1144				GP55_REG		= $AF1144
=$af1145				GP56_REG		= $AF1145
=$af1146				GP57_REG		= $AF1146
=$af1147				GP60_REG		= $AF1147
=$af1148				GP61_REG		= $AF1148
=$af114b				GP1_REG			= $AF114B
=$af114c				GP2_REG			= $AF114C
=$af114d				GP3_REG			= $AF114D
=$af114e				GP4_REG			= $AF114E
=$af114f				GP5_REG			= $AF114F
=$af1150				GP6_REG			= $AF1150
=$af1156				FAN1_REG		        = $AF1156
=$af1157				FAN2_REG            = $AF1157
=$af1158				FAN_CTRL_REG  	    = $AF1158
=$af1159				FAN1_TACH_REG       = $AF1159
=$af115a				FAN2_TACH_REG       = $AF115A
=$af115b				FAN1_PRELOAD_REG    = $AF115B
=$af115c				FAN2_PRELOAD_REG    = $AF115C
=$af115d				LED1_REG    		    = $AF115D
=$af115e				LED2_REG    		    = $AF115E
=$af115f				KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: src/kernel.asm


;******  Processing file: src/keyboard_def.asm

=$af1064				STATUS_PORT 	= $AF1064
=$af1060				KBD_OUT_BUF 	= $AF1060
=$af1060				KBD_INPT_BUF	= $AF1060
=$af1064				KBD_CMD_BUF		= $AF1064
=$af1060				KBD_DATA_BUF	= $AF1060
=$af1060				PORT_A		    = $AF1060
=$af1061				PORT_B			= $AF1061
=$01					OUT_BUF_FULL    = $01
=$02					INPT_BUF_FULL	= $02
=$04					SYS_FLAG		= $04
=$08					CMD_DATA		= $08
=$10					KEYBD_INH       = $10
=$20					TRANS_TMOUT	    = $20
=$40					RCV_TMOUT		= $40
=$80					PARITY_EVEN		= $80
=$10					INH_KEYBOARD	= $10
=$ae					KBD_ENA			= $AE
=$ad					KBD_DIS			= $AD
=$f1					KB_MENU			= $F1
=$f4					KB_ENABLE		= $F4
=$f7					KB_MAKEBREAK    = $F7
=$fe					KB_ECHO			= $FE
=$ff					KB_RESET		= $FF
=$ed					KB_LED_CMD		= $ED
=$aa					KB_OK			= $AA
=$fa					KB_ACK			= $FA
=$ff					KB_OVERRUN		= $FF
=$fe					KB_RESEND		= $FE
=$f0					KB_BREAK		= $F0
=$10					KB_FA			= $10
=$20					KB_FE			= $20
=$40					KB_PR_LED		= $40
=$01					KB_SCROLL_LOCK  = $01
=$02					KB_NUM_LOCK     = $02
=$04					KB_CAPS_LOCK    = $04
=$80					KB_CTRL_C = $80             ; CTRL-C was pressed
=$60					KB_CREDITS = $60            ; Credits key was pressed

;******  Return to file: src/kernel.asm


;******  Processing file: src/SID_def.asm

=$afe400				SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401				SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402				SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403				SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404				SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405				SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406				SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407				SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408				SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409				SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a				SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b				SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c				SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d				SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e				SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f				SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410				SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411				SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412				SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413				SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414				SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415				SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416				SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417				SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418				SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419				SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a				SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b				SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c				SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d				SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e				SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f				SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src/kernel.asm


;******  Processing file: src/RTC_def.asm

=$af0800				RTC_SEC       = $AF0800 ;Seconds Register
=$af0801				RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802				RTC_MIN       = $AF0802 ;Minutes Register
=$af0803				RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804				RTC_HRS       = $AF0804 ;Hours Register
=$af0805				RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806				RTC_DAY       = $AF0806 ;Day Register
=$af0807				RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808				RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809				RTC_MONTH     = $AF0809 ;Month Register
=$af080a				RTC_YEAR      = $AF080A ;Year Register
=$af080b				RTC_RATES     = $AF080B ;Rates Register
=$af080c				RTC_ENABLE    = $AF080C ;Enables Register
=$af080d				RTC_FLAGS     = $AF080D ;Flags Register
=$af080e				RTC_CTRL      = $AF080E ;Control Register
=$af080f				RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src/kernel.asm


;******  Processing file: src/io_def.asm

=0					CHAN_CONSOLE  = 0           ; ID for screen and keyboard access
=1					CHAN_COM1     = 1           ; ID for serial access on COM1 (external port)
=2					CHAN_COM2     = 2           ; ID for serial access on COM2 (internal port)
=3					CHAN_LPT      = 3           ; ID for parallel port
=$afe810				SDCARD_DATA   = $AFE810     ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811				SDCARD_CMD    = $AFE811     ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812				SDCARD_STAT   = $AFE812     ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$afe900				CODEC_DATA_LO = $AFE900     ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901				CODEC_DATA_HI = $AFE901     ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902				CODEC_WR_CTRL = $AFE902     ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: src/kernel.asm


;******  Processing file: src/Trinity_CFP9301_def.asm

=$afe800				JOYSTICK0           = $AFE800   ;(R) Joystick 0 - J7 (next to SD Card)
=$afe801				JOYSTICK1           = $AFE801   ;(R) Joystick 1 - J8
=$afe802				JOYSTICK2           = $AFE802   ;(R) Joystick 2 - J9
=$afe803				JOYSTICK3           = $AFE803   ;(R) Joystick 3 - J10 (Next to Buzzer)
=$afe804				JOYSTICK_MODE       = $AFE804
=$01					NES_SNES_EN0        = $01       ; Enable the NES/SNES Mode on Port 0
=$02					NES_SNES_EN1        = $02       ; Enable the NES/SNES Mode on Port 1
=$04					NES_SNES_JOY        = $04       ; 0 = NES, 1 = SNES
=$40					NES_SNES_DONE       = $40       ; Poll to see if the Deserializer is done
=$80					NES_SNES_TRIG       = $80       ; Set to start the Serializer
=$afe805				REVOFPCB_C          = $AFE805   ; You should read the ASCCII for "C"
=$afe806				REVOFPCB_4          = $AFE806   ; You should read the ASCCII for "4"
=$afe807				REVOFPCB_A          = $AFE807   ; You should read the ASCCII for "A"
=$afe808				NES_SNES0_DAT_LO    = $AFE808   ; Contains the 8bits From NES and SNES
=$afe809				SNES0_DAT_HI0       = $AFE809   ; Contains the extra 4 bit from the SNES Controller
=$afe80a				NES_SNES1_DAT_LO    = $AFE80A
=$afe80b				SNES1_DAT_HI0       = $AFE80B
=$afe80c				CFP9301_REV         = $AFE80C   ; Hardware Revision of the CPLD Code
=$afe80d				DIP_USER            = $AFE80D   ; Dip Switch 3/4/5 can be user Defined
=$afe80e				DIP_BOOTMODE        = $AFE80E
=$01					BOOT_MODE0          = $01
=$02					BOOT_MODE1          = $02
=$80					HD_INSTALLED        = $80
=$00					DIP_BOOT_IDE        = $00
=$01					DIP_BOOT_SDCARD     = $01
=$02					DIP_BOOT_FLOPPY     = $02
=$03					DIP_BOOT_BASIC      = $03

;******  Return to file: src/kernel.asm


;******  Processing file: src/Unity_CFP9307_def.asm

=$afe830				IDE_DATA      = $AFE830 ; 8Bit Access here Only
=$afe831				IDE_ERROR     = $AFE831 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe832				IDE_SECT_CNT  = $AFE832 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe833				IDE_SECT_SRT  = $AFE833 ; Start Sector Register (0 = 256), so start @ 1
=$afe834				IDE_CLDR_LO   = $AFE834 ; Low Byte of Cylinder Numnber {7:0}
=$afe835				IDE_CLDR_HI   = $AFE835 ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe836				IDE_HEAD      = $AFE836 ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe837				IDE_CMD_STAT  = $AFE837 ; Command/Status Register - Reading this will clear the Interrupt Registers
=$afe838				IDE_DATA_LO   = $AFE838 ; The 16Bits Buffer is LITTLE ENDIAN, the 65C816 is BIG ENDIAN, but UNITY does the conversion
=$afe839				IDE_DATA_HI   = $AFE839 ;

;******  Return to file: src/kernel.asm


;******  Processing file: src/GABE_Control_Registers_def.asm

=$afe880				GABE_MSTR_CTRL      = $AFE880
=$01					GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02					GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$10					GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80					GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881				GABE_NOTUSED        = $AFE881 ; Reserved for future use
=$afe882				GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883				GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884				GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884				GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886				GABE_RNG_STAT       = $AFE886 ;
=$80					GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886				GABE_RNG_CTRL       = $AFE886 ;
=$01					GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02					GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887				GABE_SYS_STAT       = $AFE887 ;
=$01					GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02					GABE_SYS_STAT_MID1  = $02     ; Machine ID -- MSB
=$08					GABE_SYS_STAT_EXP   = $08     ; if Zero, there is an Expansion Card Preset
=$40					GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator
=$80					GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator

;******  Return to file: src/kernel.asm


;******  Processing file: src/basic_inc.asm

=$3a0000				BASIC = $3A0000
=3801092				MONITOR = BASIC + 4

;******  Return to file: src/kernel.asm


;******  Processing file: src/kernel_jumptable.asm

.381000	5c 00 04 39	jmp $390400	BOOT            JML IBOOT
.381004	5c 31 13 39	jmp $391331	RESTORE         JML IRESTORE
.381008	5c 8e 05 39	jmp $39058e	BREAK           JML IBREAK
.38100c	5c d5 05 39	jmp $3905d5	READY           JML IREADY
.381010	5c 32 13 39	jmp $391332	SCINIT          JML ISCINIT
.381014	5c 33 13 39	jmp $391333	IOINIT          JML IIOINIT
.381018	5c 52 06 39	jmp $390652	PUTC            JML IPUTC
.38101c	5c 3b 06 39	jmp $39063b	PUTS            JML IPUTS
.381020	5c 77 07 39	jmp $390777	PUTB            JML IPUTB
.381024	5c 83 3c 38	jmp $383c83	PUTBLOCK        JML IPUTBLOCK
.381028	5c 34 13 39	jmp $391334	SETLFS          JML ISETLFS
.38102c	5c 35 13 39	jmp $391335	SETNAM          JML ISETNAM
.381030	5c 36 13 39	jmp $391336	OPEN            JML IOPEN
.381034	5c 37 13 39	jmp $391337	CLOSE           JML ICLOSE
.381038	5c f0 05 39	jmp $3905f0	SETIN           JML ISETIN
.38103c	5c f9 05 39	jmp $3905f9	SETOUT          JML ISETOUT
.381040	5c 38 13 39	jmp $391338	GETB            JML IGETB
.381044	5c 4c 3c 38	jmp $383c4c	GETBLOCK        JML IGETBLOCK
.381048	5c 39 13 39	jmp $391339	GETCH           JML IGETCH
.38104c	5c 0b 06 39	jmp $39060b	GETCHW          JML IGETCHW
.381050	5c 02 06 39	jmp $390602	GETCHE          JML IGETCHE
.381054	5c 3a 13 39	jmp $39133a	GETS            JML IGETS
.381058	5c 3b 13 39	jmp $39133b	GETLINE         JML IGETLINE
.38105c	5c 3c 13 39	jmp $39133c	GETFIELD        JML IGETFIELD
.381060	5c 3d 13 39	jmp $39133d	TRIM            JML ITRIM
.381064	5c 3e 13 39	jmp $39133e	PRINTC          JML IPRINTC
.381068	5c 3f 13 39	jmp $39133f	PRINTS          JML IPRINTS
.38106c	5c 78 07 39	jmp $390778	PRINTCR         JML IPRINTCR
.381070	5c 40 13 39	jmp $391340	PRINTF          JML IPRINTF
.381074	5c 41 13 39	jmp $391341	PRINTI          JML IPRINTI
.381078	5c d6 08 39	jmp $3908d6	PRINTH          JML IPRINTH
.38107c	5c 42 13 39	jmp $391342	PRINTAI         JML IPRINTAI
.381080	5c f3 08 39	jmp $3908f3	PRINTAH         JML IPRINTAH
.381084	5c 62 08 39	jmp $390862	LOCATE          JML ILOCATE
.381088	5c 43 13 39	jmp $391343	PUSHKEY         JML IPUSHKEY
.38108c	5c 44 13 39	jmp $391344	PUSHKEYS        JML IPUSHKEYS
.381090	5c be 07 39	jmp $3907be	CSRRIGHT        JML ICSRRIGHT
.381094	5c f1 07 39	jmp $3907f1	CSRLEFT         JML ICSRLEFT
.381098	5c 17 08 39	jmp $390817	CSRUP           JML ICSRUP
.38109c	5c 3d 08 39	jmp $39083d	CSRDOWN         JML ICSRDOWN
.3810a0	5c ad 07 39	jmp $3907ad	CSRHOME         JML ICSRHOME
.3810a4	5c ae 08 39	jmp $3908ae	SCROLLUP        JML ISCROLLUP
.3810a8	5c 41 09 39	jmp $390941	CLRSCREEN       JML ICLRSCREEN
.3810ac	5c a4 09 39	jmp $3909a4	INITCHLUT	    JML IINITCHLUT
.3810b0	5c be 0c 39	jmp $390cbe	INITSUPERIO	    JML IINITSUPERIO
.3810b4	5c bd 0d 39	jmp $390dbd	INITKEYBOARD    JML IINITKEYBOARD
.3810b8	5c 28 0f 39	jmp $390f28	TESTSID         JML ITESTSID
.3810bc	5c 9d 0c 39	jmp $390c9d	INITCURSOR      JML IINITCURSOR
.3810c0	5c 53 0c 39	jmp $390c53	INITFONTSET     JML IINITFONTSET
.3810c4	5c d3 09 39	jmp $3909d3	INITGAMMATABLE  JML IINITGAMMATABLE
.3810c8	5c f3 09 39	jmp $3909f3	INITALLLUT      JML IINITALLLUT
.3810cc	5c b5 0a 39	jmp $390ab5	INITVKYTXTMODE  JML IINITVKYTXTMODE
.3810d0	5c de 0a 39	jmp $390ade	INITVKYGRPMODE  JML IINITVKYGRPMODE
.3810d4	5c 15 0b 39	jmp $390b15	INITTILEMODE    JML IINITTILEMODE
.3810d8	5c 16 0b 39	jmp $390b16	INITSPRITE      JML IINITSPRITE
.3810dc	5c f7 0f 39	jmp $390ff7	INITCODEC       JML IINITCODEC
.3810e0	5c 73 10 39	jmp $391073	RESETCODEC      JML IRESETCODEC
.3810e4	5c e1 10 39	jmp $3910e1	BMP_PARSER      JML IBMP_PARSER
.3810e8	5c 96 10 39	jmp $391096	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.3810ec	5c c8 32 38	jmp $3832c8	OPL2_TONE_TEST  JML IOPL2_TONE_TEST
.3810f0	5c bc 45 38	jmp $3845bc	F_OPEN          JML IF_OPEN         ; open a file for reading/writing/creating
.3810f4	5c 46 46 38	jmp $384646	F_CREATE        JML IF_CREATE       ; create a new file
.3810f8	5c 80 46 38	jmp $384680	F_CLOSE         JML IF_CLOSE        ; close a file (make sure last cluster is written)
.3810fc	5c 2f 47 38	jmp $38472f	F_WRITE         JML IF_WRITE        ; write the current cluster to the file
.381100	5c b9 46 38	jmp $3846b9	F_READ          JML IF_READ         ; read the next cluster from the file
.381104	5c 5a 48 38	jmp $38485a	F_DELETE        JML IF_DELETE       ; delete a file / directory
.381108	5c ae 47 38	jmp $3847ae	F_DIROPEN       JML IF_DIROPEN      ; open a directory and seek the first directory entry
.38110c	5c 02 48 38	jmp $384802	F_DIRNEXT       JML IF_DIRNEXT      ; seek to the next directory of an open directory
.381110	5c 09 49 38	jmp $384909	F_DIRREAD       JML IF_DIRREAD      ; Read the directory entry for the specified file
.381114	5c 30 49 38	jmp $384930	F_DIRWRITE      JML IF_DIRWRITE     ; Write any changes in the current directory cluster back to the drive
.381118	5c 6b 49 38	jmp $38496b	F_LOAD          JML IF_LOAD         ; load a binary file into memory, supports multiple file formats
.38111c	5c 55 4b 38	jmp $384b55	F_SAVE          JML IF_SAVE         ; Save memory to a binary file

;******  Return to file: src/kernel.asm


;******  Processing file: src/Interrupt_Handler.asm

.381120					IRQ_HANDLER
.381120	e2 20		sep #$20	                SEP #$20        ; set A short
.381122	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381126	c9 00		cmp #$00	                CMP #$00
.381128	f0 37		beq $381161	                BEQ CHECK_PENDING_REG1
.38112a	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38112e	29 01		and #$01	                AND #FNX0_INT00_SOF
.381130	c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.381132	d0 09		bne $38113d	                BNE SERVICE_NEXT_IRQ6
.381134	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381138	20 cb 11	jsr $3811cb	                JSR SOF_INTERRUPT
.38113b	e2 20		sep #$20	                SEP #$20        ; set A short
.38113d					SERVICE_NEXT_IRQ6
.38113d	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381141	29 40		and #$40	                AND #FNX0_INT06_FDC
.381143	c9 40		cmp #$40	                CMP #FNX0_INT06_FDC
.381145	d0 09		bne $381150	                BNE SERVICE_NEXT_IRQ7
.381147	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38114b	20 17 12	jsr $381217	                JSR FDC_INTERRUPT
.38114e	e2 20		sep #$20	                SEP #$20        ; set A short
.381150					SERVICE_NEXT_IRQ7
.381150	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381154	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.381156	c9 80		cmp #$80	                CMP #FNX0_INT07_MOUSE
.381158	d0 07		bne $381161	                BNE CHECK_PENDING_REG1
.38115a	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38115e	20 d6 11	jsr $3811d6	                JSR MOUSE_INTERRUPT
.381161					CHECK_PENDING_REG1
.381161	e2 20		sep #$20	                SEP #$20        ; set A short
.381163	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381167	c9 00		cmp #$00	                CMP #$00
.381169	f0 5d		beq $3811c8	                BEQ EXIT_IRQ_HANDLE
.38116b					SERVICE_NEXT_IRQ8
.38116b	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38116f	29 01		and #$01	                AND #FNX1_INT00_KBD
.381171	c9 01		cmp #$01	                CMP #FNX1_INT00_KBD
.381173	d0 09		bne $38117e	                BNE SERVICE_NEXT_IRQ11
.381175	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381179	20 ee 4b	jsr $384bee	                JSR KEYBOARD_INTERRUPT
.38117c	e2 20		sep #$20	                SEP #$20        ; set A short
.38117e					SERVICE_NEXT_IRQ11
.38117e	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381182	29 08		and #$08	                AND #FNX1_INT03_COM2
.381184	c9 08		cmp #$08	                CMP #FNX1_INT03_COM2
.381186	d0 09		bne $381191	                BNE SERVICE_NEXT_IRQ12
.381188	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.38118c	20 22 12	jsr $381222	                JSR COM2_INTERRUPT
.38118f	e2 20		sep #$20	                SEP #$20        ; set A short
.381191					SERVICE_NEXT_IRQ12
.381191	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381195	29 10		and #$10	                AND #FNX1_INT04_COM1
.381197	c9 10		cmp #$10	                CMP #FNX1_INT04_COM1
.381199	d0 09		bne $3811a4	                BNE SERVICE_NEXT_IRQ13
.38119b	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.38119f	20 2d 12	jsr $38122d	                JSR COM1_INTERRUPT
.3811a2	e2 20		sep #$20	                SEP #$20        ; set A short
.3811a4					SERVICE_NEXT_IRQ13
.3811a4	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811a8	29 20		and #$20	                AND #FNX1_INT05_MPU401
.3811aa	c9 20		cmp #$20	                CMP #FNX1_INT05_MPU401
.3811ac	d0 09		bne $3811b7	                BNE SERVICE_NEXT_IRQ14
.3811ae	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811b2	20 38 12	jsr $381238	                JSR MPU401_INTERRUPT
.3811b5	e2 20		sep #$20	                SEP #$20        ; set A short
.3811b7					SERVICE_NEXT_IRQ14
.3811b7	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811bb	29 40		and #$40	                AND #FNX1_INT06_LPT
.3811bd	c9 40		cmp #$40	                CMP #FNX1_INT06_LPT
.3811bf	d0 07		bne $3811c8	                BNE EXIT_IRQ_HANDLE
.3811c1	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811c5	20 43 12	jsr $381243	                JSR LPT1_INTERRUPT
.3811c8					EXIT_IRQ_HANDLE
.3811c8	c2 30		rep #$30	                REP #$30        ; set A&X long
.3811ca	6b		rtl		                RTL
.3811cb					SOF_INTERRUPT
.3811cb	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3811cf	29 01		and #$01	                AND #FNX0_INT00_SOF
.3811d1	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3811d5	60		rts		                RTS
.3811d6					MOUSE_INTERRUPT
.3811d6	e2 20		sep #$20	                SEP #$20        ; set A short
.3811d8	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3811dc	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.3811de	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3811e2	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.3811e6	a2 00 00	ldx #$0000	                LDX #$0000
.3811e9	e2 10		sep #$10	                SEP #$10        ; set X short
.3811eb	a6 e0		ldx $e0		                LDX MOUSE_PTR
.3811ed	9f 06 07 af	sta $af0706,x	                STA @lMOUSE_PTR_BYTE0, X
.3811f1	e8		inx		                INX
.3811f2	e0 03		cpx #$03	                CPX #$03
.3811f4	d0 1c		bne $381212	                BNE EXIT_FOR_NEXT_VALUE
.3811f6	af 02 07 af	lda $af0702	                LDA @lMOUSE_PTR_X_POS_L
.3811fa	85 e1		sta $e1		                STA MOUSE_POS_X_LO
.3811fc	af 03 07 af	lda $af0703	                LDA @lMOUSE_PTR_X_POS_H
.381200	85 e2		sta $e2		                STA MOUSE_POS_X_HI
.381202	af 04 07 af	lda $af0704	                LDA @lMOUSE_PTR_Y_POS_L
.381206	85 e3		sta $e3		                STA MOUSE_POS_Y_LO
.381208	af 05 07 af	lda $af0705	                LDA @lMOUSE_PTR_Y_POS_H
.38120c	85 e4		sta $e4		                STA MOUSE_POS_Y_HI
.38120e	e2 20		sep #$20	                SEP #$20        ; set A short
.381210	a2 00		ldx #$00	                LDX #$00
.381212					EXIT_FOR_NEXT_VALUE
.381212	86 e0		stx $e0		                STX MOUSE_PTR
.381214	c2 10		rep #$10	                REP #$10        ; set X long
.381216	60		rts		                RTS
.381217					FDC_INTERRUPT
.381217	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38121b	29 40		and #$40	                AND #FNX0_INT06_FDC
.38121d	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381221	60		rts		                RTS
.381222					COM2_INTERRUPT
.381222	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381226	29 08		and #$08	                AND #FNX1_INT03_COM2
.381228	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.38122c	60		rts		                RTS
.38122d					COM1_INTERRUPT
.38122d	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381231	29 10		and #$10	                AND #FNX1_INT04_COM1
.381233	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381237	60		rts		                RTS
.381238					MPU401_INTERRUPT
.381238	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38123c	29 20		and #$20	                AND #FNX1_INT05_MPU401
.38123e	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381242	60		rts		                RTS
.381243					LPT1_INTERRUPT
.381243	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381247	29 40		and #$40	                AND #FNX1_INT06_LPT
.381249	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.38124d	60		rts		                RTS
.38124e					NMI_HANDLER
.38124e	6b		rtl		                RTL

;******  Return to file: src/kernel.asm


;******  Processing file: src/OPL2_Library.asm


;******  Processing file: src/OPL3_def.asm

=$afe600				OPL3_R_BASE               = $AFE600
=$e600					OPL3_R_BASE_LL            = $E600
=$00af					OPL3_R_BASE_HL            = $00AF
=$afe601				OPL3_R_TEST               = $AFE601 ; TEST
=$afe602				OPL3_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603				OPL3_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604				OPL3_R_IRQ                = $AFE604 ;
=$afe605				OPL3_R_OPL3_MODE          = $AFE605 ; Set bit 0 to 1 if you want to use in OPL3 Mode
=$afe608				OPL3_R_CSM                = $AFE608 ;
=$afe620				OPL3_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640				OPL3_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660				OPL3_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680				OPL3_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0				OPL3_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0				OPL3_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd				OPL3_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0				OPL3_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0				OPL3_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$afe700				OPL3_L_BASE               = $AFE700
=$e700					OPL3_L_BASE_LL            = $E700
=$00af					OPL3_L_BASE_HL            = $00AF
=$afe701				OPL3_L_TEST               = $AFE701 ; TEST
=$afe702				OPL3_L_TIMER1             = $AFE702 ; TIMER-1
=$afe703				OPL3_L_TIMER2             = $AFE703 ; TIMER-2
=$afe704				OPL3_L_IRQ                = $AFE704 ;
=$afe708				OPL3_L_CSM                = $AFE708 ;
=$afe720				OPL3_L_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740				OPL3_L_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760				OPL3_L_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780				OPL3_L_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0				OPL3_L_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0				OPL3_L_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd				OPL3_L_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0				OPL3_L_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0				OPL3_L_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80					TREMOLO    = $80
=$40					VIBRATO    = $40
=$20					SUSTAINING = $20
=$10					KSR        = $10
=$0f					MULTIPLIER = $0F
=$c0					KEY_SCALE  = $C0
=$3f					OP_LEVEL   = $3F
=$f0					ATTACK_RT  = $F0
=$0f					DECAY_RT   = $0F
=$f0					SUSTAIN_RT = $F0
=$0f					RELEASE_RT = $0F
=$0e					FEEDBACK   = $0E
=$01					ALGORITHM  = $01
=9					OPL2_NUM_CHANNELS = 9
=0					OPERATOR1 = 0
=1					OPERATOR2 = 1
=0					MODULATOR = 0
=1					CARRIER = 1
=0					FREQ_MODULATION = 0
=1					ADDITIVE_SYNTH  = 1
=$10					DRUM_BASS   = $10
=$08					DRUM_SNARE  = $08
=$04					DRUM_TOM    = $04
=$02					DRUM_CYMBAL = $02
=$01					DRUM_HI_HAT = $01
=1					NOTE_CS =   1
=2					NOTE_D =    2
=3					NOTE_DS =   3
=4					NOTE_E =    4
=5					NOTE_F =    5
=6					NOTE_FS =   6
=7					NOTE_G =    7
=8					NOTE_GS =   8
=9					NOTE_A =    9
=10					NOTE_AS =  10
=11					NOTE_B =   11
=12					NOTE_C =   12
>38124f	6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>381257	ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>381267	00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>38126f	12
>381270	03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>381278	15
>381279	10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>38127f	10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>381284	20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src/OPL2_Library.asm


;******  Processing file: src/OPL2_Instruments.asm

>38128a	00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>381292	00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>3812a0	00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>3812a8	05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>3812b6	00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>3812be	00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>3812cc	00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>3812d4	80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>3812e2	00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>3812ea	80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>3812f8	00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>381300	00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>38130e	00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>381316	00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>381324	00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>38132c	80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>38133a	00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>381342	00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>381350	06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>381358	00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>381366	00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>38136e	c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>38137c	00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>381384	00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>381392	00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>38139a	c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>3813a8	00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>3813b0	00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>3813be	00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>3813c6	00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>3813d4	00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>3813dc	80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>3813ea	00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>3813f2	80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>381400	00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>381408	80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>381416	00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>38141e	80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>38142c	00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>381434	82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>381442	00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>38144a	0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>381458	00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>381460	80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>38146e	09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>381476	00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>381484	00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>38148c	80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>38149a	00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>3814a2	00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>3814b0	00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>3814b8	00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>3814c6	00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>3814ce	80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>3814dc	00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>3814e4	0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>3814f2	00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>3814fa	80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>381508	00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>381510	80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>38151e	00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>381526	80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>381534	00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>38153c	80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>38154a	00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>381552	04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>381560	00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>381568	00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>381576	00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>38157e	80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>38158c	00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>381594	57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>3815a2	00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>3815aa	8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>3815b8	00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>3815c0	80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>3815ce	00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>3815d6	00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>3815e4	00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>3815ec	80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>3815fa	00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>381602	00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>381610	00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>381618	80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>381626	00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>38162e	80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>38163c	00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>381644	0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>381652	00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>38165a	00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>381668	00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>381670	00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>38167e	00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>381686	83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>381694	00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>38169c	80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>3816aa	00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>3816b2	80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>3816c0	00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>3816c8	03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>3816d6	00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>3816de	80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>3816ec	00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>3816f4	80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>381702	00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>38170a	80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>381718	00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>381720	0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>38172e	00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>381736	80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>381744	00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>38174c	c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>38175a	0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>381762	00 00 00 00 48 49 48 41 54 31 20 20 20 20
>381770	0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>381778	00 00 00 00 48 49 48 41 54 32 20 20 20 20
>381786	00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>38178e	00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>38179c	00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>3817a4	00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>3817b2	00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>3817ba	00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>3817c8	00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>3817d0	80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>3817de	00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>3817e6	80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>3817f4	00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>3817fc	03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>38180a	09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>381812	00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>381820	00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>381828	00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>381836	00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>38183e	00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>38184c	00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>381854	80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>381862	00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>38186a	c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>381878	07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>381880	00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>38188e	00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>381896	00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>3818a4	00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>3818ac	00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>3818ba	00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>3818c2	05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>3818d0	00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>3818d8	80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>3818e6	00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>3818ee	80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>3818fc	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>381904	80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>381912	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>38191a	8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>381928	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>381930	92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>38193e	00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>381946	00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>381954	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>38195c	08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>38196a	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>381972	0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>381980	00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>381988	80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>381996	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>38199e	26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>3819ac	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>3819b4	57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>3819c2	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>3819ca	00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>3819d8	00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>3819e0	00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>3819ee	00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>3819f6	00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>381a04	00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>381a0c	04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>381a1a	00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>381a22	00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>381a30	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>381a38	03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>381a46	00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>381a4e	00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>381a5c	00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>381a64	00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>381a72	07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>381a7a	00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>381a88	00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>381a90	00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>381a9e	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>381aa6	00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>381ab4	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>381abc	00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>381aca	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>381ad2	00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>381ae0	00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>381ae8	00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>381af6	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>381afe	40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>381b0c	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>381b14	40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>381b22	00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>381b2a	80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>381b38	07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>381b40	00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>381b4e	00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>381b56	03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>381b64	00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>381b6c	00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>381b7a	00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>381b82	03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>381b90	00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>381b98	03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>381ba6	00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>381bae	40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>381bbc	00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>381bc4	00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>381bd2	00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>381bda	80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>381be8	00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>381bf0	80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>381bfe	00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>381c06	40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>381c14	00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>381c1c	80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>381c2a	00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>381c32	00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>381c40	00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>381c48	00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>381c56	00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>381c5e	80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>381c6c	00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>381c74	00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>381c82	00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>381c8a	00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>381c98	00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>381ca0	80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>381cae	00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>381cb6	00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>381cc4	00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>381ccc	00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>381cda	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>381ce2	00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>381cf0	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>381cf8	00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>381d06	00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>381d0e	00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>381d1c	08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>381d24	00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>381d32	08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>381d3a	00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>381d48	00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>381d50	08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>381d5e	00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>381d66	00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>381d74	00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>381d7c	80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>381d8a	00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>381d92	80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>381da0	00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>381da8	80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>381db6	00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>381dbe	80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>381dcc	00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>381dd4	80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>381de2	00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>381dea	80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>381df8	00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>381e00	80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>381e0e	00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>381e16	80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>381e24	00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>381e2c	03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>381e3a	00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>381e42	80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>381e50	00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>381e58	80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>381e66	00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>381e6e	80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>381e7c	00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>381e84	83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>381e92	00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>381e9a	80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>381ea8	00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>381eb0	80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>381ebe	00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>381ec6	00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>381ed4	06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>381edc	00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>381eea	00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>381ef2	00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src/OPL2_Library.asm


;******  Processing file: src/OPL2_Midi_Drums.asm

>381f00	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>381f08	00 87 fa 00
>381f0c	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>381f14	00 88 98 03
>381f18	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>381f20	00 88 98 03
>381f24	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>381f2c	00 f9 69 00
>381f30	00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>381f38	80 e8 4a 00
>381f3c	00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>381f44	00 f6 9a 00
>381f48	00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>381f50	1b f2 34 00
>381f54	00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>381f5c	00 f7 8a 00
>381f60	00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>381f68	00 f6 47 00
>381f6c	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>381f74	00 f9 69 00
>381f78	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>381f80	00 f7 a9 00
>381f84	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>381f8c	00 87 fa 00
>381f90	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>381f98	00 f7 a9 00
>381f9c	00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>381fa4	00 f5 f5 00
>381fa8	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>381fb0	06 b8 d8 03
>381fb4	00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>381fbc	00 f5 f5 00
>381fc0	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>381fc8	06 b8 d8 03
>381fcc	00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>381fd4	00 f5 f5 00
>381fd8	00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>381fe0	10 74 f8 03
>381fe4	00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>381fec	00 f5 f5 00
>381ff0	00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>381ff8	00 f5 f5 00
>381ffc	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>382004	05 c5 d4 03
>382008	00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>382010	00 f5 f5 00
>382014	00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>38201c	04 f9 44 03
>382020	00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>382028	05 c5 d4 03
>38202c	00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>382034	04 f9 44 03
>382038	00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>382040	03 87 f7 03
>382044	00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>38204c	05 c5 d4 03
>382050	00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>382058	00 f6 28 00
>38205c	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>382064	05 c5 d4 03
>382068	00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>382070	00 f5 f7 01
>382074	00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>38207c	04 f9 44 03
>382080	00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>382088	00 99 f9 00
>38208c	00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>382094	00 a8 f7 00
>382098	00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>3820a0	00 99 f9 00
>3820a4	00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>3820ac	00 a6 f6 00
>3820b0	00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>3820b8	00 a6 f6 00
>3820bc	00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>3820c4	00 f6 36 02
>3820c8	00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>3820d0	00 f6 36 02
>3820d4	00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>3820dc	00 96 e8 01
>3820e0	00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>3820e8	00 96 e8 01
>3820ec	00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>3820f4	02 79 77 03
>3820f8	00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>382100	02 79 77 03
>382104	00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>38210c	00 a5 2b 02
>382110	00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>382118	00 93 3b 02
>38211c	00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>382124	01 89 3b 03
>382128	00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>382130	0a 53 2b 02
>382134	00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>38213c	00 f6 89 00
>382140	00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>382148	00 f6 9a 00
>38214c	00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>382154	00 f6 9a 00
>382158	00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>382160	00 87 4b 01
>382164	00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>38216c	00 78 67 01
>382170	00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>382178	02 f8 fc 00
>38217c	00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>382184	40 f5 f5 00
>382188	00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>382190	02 79 77 03
>382194	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>38219c	40 f5 f5 00
>3821a0	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>3821a8	40 f5 f5 00
>3821ac	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>3821b4	00 f9 69 00
>3821b8	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>3821c0	00 f9 69 00
>3821c4	00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>3821cc	00 c6 45 00
=27					DRUM_NOTE_BASE = 27;
=60					NUM_MIDI_DRUMS = 60;
>3821d0	00 1f 38 00 0c 1f 38 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>3821d8	18 1f 38 00 24 1f 38 00
>3821e0	30 1f 38 00 3c 1f 38 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>3821e8	48 1f 38 00 54 1f 38 00
>3821f0	60 1f 38 00 6c 1f 38 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>3821f8	78 1f 38 00 84 1f 38 00
>382200	90 1f 38 00 9c 1f 38 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>382208	a8 1f 38 00 b4 1f 38 00
>382210	c0 1f 38 00 cc 1f 38 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>382218	d8 1f 38 00 e4 1f 38 00
>382220	f0 1f 38 00 fc 1f 38 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>382228	08 20 38 00 14 20 38 00
>382230	20 20 38 00 2c 20 38 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>382238	38 20 38 00 44 20 38 00
>382240	50 20 38 00 5c 20 38 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>382248	68 20 38 00 74 20 38 00
>382250	80 20 38 00 8c 20 38 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>382258	98 20 38 00 a4 20 38 00
>382260	b0 20 38 00 bc 20 38 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>382268	c8 20 38 00 d4 20 38 00
>382270	e0 20 38 00 ec 20 38 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>382278	f8 20 38 00 04 21 38 00
>382280	10 21 38 00 1c 21 38 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>382288	28 21 38 00 34 21 38 00
>382290	40 21 38 00 4c 21 38 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>382298	58 21 38 00 64 21 38 00
>3822a0	70 21 38 00 7c 21 38 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>3822a8	88 21 38 00 94 21 38 00
>3822b0	a0 21 38 00 ac 21 38 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>3822b8	b8 21 38 00 c4 21 38 00

;******  Return to file: src/OPL2_Library.asm


;******  Processing file: src/OPL2_Midi_Instruments.asm

>3822c0	00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>3822c8	00 b1 f5 01
>3822cc	00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>3822d4	03 f1 f5 00
>3822d8	00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>3822e0	03 c1 f5 00
>3822e4	00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>3822ec	00 92 f5 01
>3822f0	00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>3822f8	00 f1 f9 00
>3822fc	00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>382304	00 f1 f5 00
>382308	00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>382310	02 81 f6 01
>382314	00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>38231c	00 c2 b9 01
>382320	00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>382328	05 b2 35 00
>38232c	00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>382334	1b f2 34 00
>382338	00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>382340	01 f5 74 00
>382344	00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>38234c	00 61 e3 00
>382350	00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>382358	00 a4 64 00
>38235c	00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>382364	07 b5 f5 00
>382368	00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>382370	00 f3 74 00
>382374	00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>38237c	00 c3 94 01
>382380	00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>382388	00 f4 0d 01
>38238c	00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>382394	00 f5 0b 01
>382398	00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>3823a0	00 bf 07 00
>3823a4	00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>3823ac	00 6d 08 01
>3823b0	00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>3823b8	00 51 17 01
>3823bc	00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>3823c4	00 51 17 01
>3823c8	00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>3823d0	00 53 08 01
>3823d4	00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>3823dc	00 53 06 01
>3823e0	00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>3823e8	00 d2 f8 00
>3823ec	00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>3823f4	00 e2 c7 01
>3823f8	00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>382400	00 f1 9c 00
>382404	00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>38240c	02 f2 c9 01
>382410	00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>382418	03 95 fb 00
>38241c	00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>382424	04 a1 59 00
>382428	00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>382430	03 91 fc 03
>382434	00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>38243c	02 b4 ec 00
>382440	00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>382448	00 93 f7 00
>38244c	00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>382454	04 c1 58 00
>382458	00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>382460	02 c3 6a 00
>382464	00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>38246c	00 62 87 00
>382470	00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>382478	00 f3 97 00
>38247c	00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>382484	00 b3 97 00
>382488	00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>382490	04 f3 cc 00
>382494	00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>38249c	00 93 aa 00
>3824a0	00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>3824a8	00 78 08 01
>3824ac	00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>3824b4	00 78 08 01
>3824b8	00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>3824c0	00 54 27 01
>3824c4	00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>3824cc	00 61 56 00
>3824d0	00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>3824d8	00 75 16 01
>3824dc	00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>3824e4	00 f5 f6 01
>3824e8	00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>3824f0	80 f3 e3 00
>3824f4	00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>3824fc	00 b5 f5 00
>382500	00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>382508	80 71 16 00
>38250c	00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>382514	00 30 55 01
>382518	00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>382520	00 62 36 01
>382524	00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>38252c	02 51 07 00
>382530	00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>382538	00 62 39 00
>38253c	00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>382544	00 66 27 00
>382548	00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>382550	00 73 46 00
>382554	00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>38255c	00 74 76 01
>382560	00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>382568	81 92 38 00
>38256c	00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>382574	02 71 19 00
>382578	00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>382580	01 81 09 00
>382584	00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>38258c	00 83 4b 02
>382590	00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>382598	05 71 59 00
>38259c	00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>3825a4	03 82 39 00
>3825a8	00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>3825b0	82 84 17 00
>3825b4	00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>3825bc	02 72 16 00
>3825c0	00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>3825c8	00 7b 0a 00
>3825cc	00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>3825d4	00 85 0c 01
>3825d8	00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>3825e0	00 7b 0a 01
>3825e4	00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>3825ec	00 79 18 01
>3825f0	00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>3825f8	01 73 08 00
>3825fc	00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>382604	04 77 0a 00
>382608	00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>382610	00 51 19 00
>382614	00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>38261c	01 74 09 00
>382620	00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>382628	01 63 28 00
>38262c	00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>382634	00 65 0a 00
>382638	00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>382640	00 67 29 00
>382644	00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>38264c	00 67 09 00
>382650	00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>382658	01 6a 28 00
>38265c	00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>382664	00 55 27 00
>382668	00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>382670	00 6f 08 00
>382674	00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>38267c	00 7a 07 00
>382680	00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>382688	06 a2 0d 00
>38268c	00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>382694	00 a3 5f 00
>382698	00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>3826a0	00 42 27 00
>3826a4	00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>3826ac	05 b2 49 00
>3826b0	00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>3826b8	00 b2 79 01
>3826bc	00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>3826c4	00 7a 1a 00
>3826c8	00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>3826d0	00 82 28 01
>3826d4	00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>3826dc	02 c3 5f 00
>3826e0	00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>3826e8	86 c4 95 01
>3826ec	00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>3826f4	00 44 15 00
>3826f8	00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>382700	00 d1 06 00
>382704	00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>38270c	00 82 37 00
>382710	00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>382718	00 41 35 00
>38271c	00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>382724	02 32 f5 01
>382728	00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>382730	00 61 26 00
>382734	00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>38273c	84 3f 05 01
>382740	00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>382748	01 d1 f6 00
>38274c	00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>382754	00 41 05 01
>382758	00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>382760	05 f3 e4 00
>382764	00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>38276c	00 92 f5 01
>382770	00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>382778	04 f2 e4 01
>38277c	00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>382784	00 45 25 00
>382788	00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>382790	01 a3 36 00
>382794	00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>38279c	01 98 05 01
>3827a0	00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>3827a8	02 a3 f6 01
>3827ac	00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>3827b4	00 f6 f8 00
>3827b8	00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>3827c0	00 f3 f5 00
>3827c4	00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>3827cc	00 94 e5 01
>3827d0	00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>3827d8	00 84 44 00
>3827dc	00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>3827e4	03 83 18 01
>3827e8	00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>3827f0	01 78 08 01
>3827f4	00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>3827fc	03 8e 08 01
>382800	00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>382808	09 f2 46 00
>38280c	00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>382814	00 96 e8 01
>382818	00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>382820	00 f6 f6 01
>382824	00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>38282c	00 f6 9a 00
>382830	00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>382838	00 c6 45 00
>38283c	00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>382844	00 f4 b4 00
>382848	00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>382850	00 d5 25 00
>382854	00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>38285c	0e 21 2d 00
>382860	00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>382868	00 55 87 02
>38286c	00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>382874	08 98 87 01
>382878	00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>382880	04 17 04 03
>382884	00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>38288c	05 77 f9 02
>382890	00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>382898	02 f4 08 00
>38289c	00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>3828a4	00 36 05 01
>3828a8	00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>3828b0	05 32 55 03
>3828b4	00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>3828bc	00 f3 df 00
>3828c0	c0 22 38 00 cc 22 38 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>3828c8	d8 22 38 00 e4 22 38 00 f0 22 38 00 fc 22 38 00
>3828d8	08 23 38 00 14 23 38 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>3828e0	20 23 38 00 2c 23 38 00 38 23 38 00 44 23 38 00
>3828f0	50 23 38 00 5c 23 38 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>3828f8	68 23 38 00 74 23 38 00 80 23 38 00 8c 23 38 00
>382908	98 23 38 00 a4 23 38 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>382910	b0 23 38 00 bc 23 38 00 c8 23 38 00 d4 23 38 00
>382920	e0 23 38 00 ec 23 38 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>382928	f8 23 38 00 04 24 38 00 10 24 38 00 1c 24 38 00
>382938	28 24 38 00 34 24 38 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>382940	40 24 38 00 4c 24 38 00 58 24 38 00 64 24 38 00
>382950	70 24 38 00 7c 24 38 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>382958	88 24 38 00 94 24 38 00 a0 24 38 00 ac 24 38 00
>382968	b8 24 38 00 c4 24 38 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>382970	d0 24 38 00 dc 24 38 00 e8 24 38 00 f4 24 38 00
>382980	00 25 38 00 0c 25 38 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>382988	18 25 38 00 24 25 38 00 30 25 38 00 3c 25 38 00
>382998	48 25 38 00 54 25 38 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>3829a0	60 25 38 00 6c 25 38 00 78 25 38 00 84 25 38 00
>3829b0	90 25 38 00 9c 25 38 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>3829b8	a8 25 38 00 b4 25 38 00 c0 25 38 00 cc 25 38 00
>3829c8	d8 25 38 00 e4 25 38 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>3829d0	f0 25 38 00 fc 25 38 00 08 26 38 00 14 26 38 00
>3829e0	20 26 38 00 2c 26 38 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>3829e8	38 26 38 00 44 26 38 00 50 26 38 00 5c 26 38 00
>3829f8	68 26 38 00 74 26 38 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>382a00	80 26 38 00 8c 26 38 00 98 26 38 00 a4 26 38 00
>382a10	b0 26 38 00 bc 26 38 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>382a18	c8 26 38 00 d4 26 38 00 e0 26 38 00 ec 26 38 00
>382a28	f8 26 38 00 04 27 38 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>382a30	10 27 38 00 1c 27 38 00 28 27 38 00 34 27 38 00
>382a40	40 27 38 00 4c 27 38 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>382a48	58 27 38 00 64 27 38 00 70 27 38 00 7c 27 38 00
>382a58	88 27 38 00 94 27 38 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>382a60	a0 27 38 00 ac 27 38 00 b8 27 38 00 c4 27 38 00
>382a70	d0 27 38 00 dc 27 38 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>382a78	e8 27 38 00 f4 27 38 00 00 28 38 00 0c 28 38 00
>382a88	18 28 38 00 24 28 38 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>382a90	30 28 38 00 3c 28 38 00 48 28 38 00 54 28 38 00
>382aa0	60 28 38 00 6c 28 38 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>382aa8	78 28 38 00 84 28 38 00 90 28 38 00 9c 28 38 00
>382ab8	a8 28 38 00 b4 28 38 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src/OPL2_Library.asm


;******  Processing file: src/OPL2_Midi_Instruments_Win31.asm

>382ac0	00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>382ac8	0d f2 f7 00
>382acc	00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>382ad4	07 f2 f7 00
>382ad8	00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>382ae0	07 f2 f6 00
>382ae4	00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>382aec	07 f2 f7 00
>382af0	00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>382af8	07 f2 f7 00
>382afc	00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>382b04	07 f2 f7 00
>382b08	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382b10	00 00 00 00
>382b14	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382b1c	00 00 00 00
>382b20	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382b28	00 00 00 00
>382b2c	00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>382b34	87 f2 f1 00
>382b38	00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>382b40	07 f4 f4 00
>382b44	00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>382b4c	07 f2 f6 00
>382b50	00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>382b58	07 e7 f7 00
>382b5c	00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>382b64	07 f6 f6 00
>382b68	00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>382b70	87 a3 f3 00
>382b74	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382b7c	00 00 00 00
>382b80	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382b88	00 00 00 00
>382b8c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382b94	00 00 00 00
>382b98	00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>382ba0	07 8a 08 00
>382ba4	00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>382bac	07 55 14 00
>382bb0	00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>382bb8	87 55 04 00
>382bbc	00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>382bc4	07 46 1a 00
>382bc8	00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>382bd0	07 61 07 00
>382bd4	00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>382bdc	90 61 07 00
>382be0	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382be8	00 00 00 00
>382bec	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382bf4	00 00 00 00
>382bf8	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382c00	00 00 00 00
>382c04	00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>382c0c	87 f3 f8 00
>382c10	00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>382c18	07 f6 3a 00
>382c1c	00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>382c24	0c 84 19 00
>382c28	00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>382c30	07 94 19 00
>382c34	00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>382c3c	87 d1 f8 00
>382c40	00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>382c48	07 c3 a6 00
>382c4c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382c54	00 00 00 00
>382c58	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382c60	00 00 00 00
>382c64	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382c6c	00 00 00 00
>382c70	00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>382c78	47 f2 df 00
>382c7c	00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>382c84	0f a1 df 00
>382c88	00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>382c90	07 f1 78 00
>382c94	00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>382c9c	07 f1 18 00
>382ca0	00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>382ca8	07 56 26 00
>382cac	00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>382cb4	07 66 06 00
>382cb8	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382cc0	00 00 00 00
>382cc4	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382ccc	00 00 00 00
>382cd0	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382cd8	00 00 00 00
>382cdc	00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>382ce4	87 85 35 00
>382ce8	00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>382cf0	87 f3 f4 00
>382cf4	00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>382cfc	07 f2 c3 00
>382d00	00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>382d08	08 72 08 00
>382d0c	00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>382d14	07 3f 07 01
>382d18	00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>382d20	07 4f 05 00
>382d24	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382d2c	00 00 00 00
>382d30	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382d38	00 00 00 00
>382d3c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382d44	00 00 00 00
>382d48	00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>382d50	07 7a 05 00
>382d54	00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>382d5c	07 a5 45 00
>382d60	00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>382d68	08 8f 09 00
>382d6c	00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>382d74	0c 8f 09 00
>382d78	00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>382d80	07 82 37 00
>382d84	00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>382d8c	07 62 2c 01
>382d90	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382d98	00 00 00 00
>382d9c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382da4	00 00 00 00
>382da8	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382db0	00 00 00 00
>382db4	00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>382dbc	07 a6 1c 00
>382dc0	00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>382dc8	07 72 0b 00
>382dcc	00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>382dd4	07 72 09 00
>382dd8	00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>382de0	07 82 09 00
>382de4	00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>382dec	07 72 0f 00
>382df0	00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>382df8	07 8f 0a 00
>382dfc	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382e04	00 00 00 00
>382e08	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382e10	00 00 00 00
>382e14	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382e1c	00 00 00 00
>382e20	00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>382e28	07 65 1a 00
>382e2c	00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>382e34	07 65 1a 00
>382e38	00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>382e40	07 75 0a 00
>382e44	00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>382e4c	07 65 1a 00
>382e50	00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>382e58	07 65 26 00
>382e5c	00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>382e64	07 55 36 00
>382e68	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382e70	00 00 00 00
>382e74	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382e7c	00 00 00 00
>382e80	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382e88	00 00 00 00
>382e8c	00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>382e94	07 ff 0f 01
>382e98	00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>382ea0	87 64 18 00
>382ea4	00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>382eac	07 96 0a 00
>382eb0	00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>382eb8	07 91 2a 00
>382ebc	00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>382ec4	47 6f 07 00
>382ec8	00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>382ed0	07 8f 06 02
>382ed4	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382edc	00 00 00 00
>382ee0	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382ee8	00 00 00 00
>382eec	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382ef4	00 00 00 00
>382ef8	00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>382f00	07 55 16 00
>382f04	00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>382f0c	07 6a 03 00
>382f10	00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>382f18	07 42 35 00
>382f1c	00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>382f24	07 31 47 01
>382f28	00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>382f30	0a 42 25 00
>382f34	00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>382f3c	07 cf 07 00
>382f40	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382f48	00 00 00 00
>382f4c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382f54	00 00 00 00
>382f58	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382f60	00 00 00 00
>382f64	00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>382f6c	8a f2 26 00
>382f70	00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>382f78	07 f2 f5 00
>382f7c	00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>382f84	87 11 13 00
>382f88	00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>382f90	87 1d 03 00
>382f94	00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>382f9c	07 81 23 00
>382fa0	00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>382fa8	0a f2 f6 01
>382fac	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382fb4	00 00 00 00
>382fb8	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382fc0	00 00 00 00
>382fc4	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382fcc	00 00 00 00
>382fd0	00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>382fd8	07 c2 05 00
>382fdc	00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>382fe4	07 6f 0c 01
>382fe8	00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>382ff0	07 56 16 00
>382ff4	00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>382ffc	88 8f 0b 00
>383000	00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>383008	87 c3 e5 00
>38300c	00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>383014	07 f8 16 00
>383018	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383020	00 00 00 00
>383024	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>38302c	00 00 00 00
>383030	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383038	00 00 00 00
>38303c	00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>383044	0a f3 03 00
>383048	00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>383050	07 f3 02 00
>383054	00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>38305c	07 1f ff 03
>383060	00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>383068	8f 56 84 02
>38306c	00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>383074	0c 34 04 03
>383078	00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>383080	07 1f 02 03
>383084	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>38308c	00 00 00 00
>383090	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383098	00 00 00 00
>38309c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3830a4	00 00 00 00
>3830a8	00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>3830b0	07 12 16 01
>3830b4	00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>3830bc	07 f6 c9 02
>3830c0	c0 2a 38 00 cc 2a 38 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>3830c8	d8 2a 38 00 e4 2a 38 00 f0 2a 38 00 fc 2a 38 00
>3830d8	08 2b 38 00 14 2b 38 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>3830e0	20 2b 38 00 2c 2b 38 00 38 2b 38 00 44 2b 38 00
>3830f0	50 2b 38 00 5c 2b 38 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>3830f8	68 2b 38 00 74 2b 38 00 80 2b 38 00 8c 2b 38 00
>383108	98 2b 38 00 a4 2b 38 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>383110	b0 2b 38 00 bc 2b 38 00 c8 2b 38 00 d4 2b 38 00
>383120	e0 2b 38 00 ec 2b 38 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>383128	f8 2b 38 00 04 2c 38 00 10 2c 38 00 1c 2c 38 00
>383138	28 2c 38 00 34 2c 38 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>383140	40 2c 38 00 4c 2c 38 00 58 2c 38 00 64 2c 38 00
>383150	70 2c 38 00 7c 2c 38 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>383158	88 2c 38 00 94 2c 38 00 a0 2c 38 00 ac 2c 38 00
>383168	b8 2c 38 00 c4 2c 38 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>383170	d0 2c 38 00 dc 2c 38 00 e8 2c 38 00 f4 2c 38 00
>383180	00 2d 38 00 0c 2d 38 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>383188	18 2d 38 00 24 2d 38 00 30 2d 38 00 3c 2d 38 00
>383198	48 2d 38 00 54 2d 38 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>3831a0	60 2d 38 00 6c 2d 38 00 78 2d 38 00 84 2d 38 00
>3831b0	90 2d 38 00 9c 2d 38 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>3831b8	a8 2d 38 00 b4 2d 38 00 c0 2d 38 00 cc 2d 38 00
>3831c8	d8 2d 38 00 e4 2d 38 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>3831d0	f0 2d 38 00 fc 2d 38 00 08 2e 38 00 14 2e 38 00
>3831e0	20 2e 38 00 2c 2e 38 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>3831e8	38 2e 38 00 44 2e 38 00 50 2e 38 00 5c 2e 38 00
>3831f8	68 2e 38 00 74 2e 38 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>383200	80 2e 38 00 8c 2e 38 00 98 2e 38 00 a4 2e 38 00
>383210	b0 2e 38 00 bc 2e 38 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>383218	c8 2e 38 00 d4 2e 38 00 e0 2e 38 00 ec 2e 38 00
>383228	f8 2e 38 00 04 2f 38 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>383230	10 2f 38 00 1c 2f 38 00 28 2f 38 00 34 2f 38 00
>383240	40 2f 38 00 4c 2f 38 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>383248	58 2f 38 00 64 2f 38 00 70 2f 38 00 7c 2f 38 00
>383258	88 2f 38 00 94 2f 38 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>383260	a0 2f 38 00 ac 2f 38 00 b8 2f 38 00 c4 2f 38 00
>383270	d0 2f 38 00 dc 2f 38 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>383278	e8 2f 38 00 f4 2f 38 00 00 30 38 00 0c 30 38 00
>383288	18 30 38 00 24 30 38 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>383290	30 30 38 00 3c 30 38 00 48 30 38 00 54 30 38 00
>3832a0	60 30 38 00 6c 30 38 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>3832a8	78 30 38 00 84 30 38 00 90 30 38 00 9c 30 38 00
>3832b8	a8 30 38 00 b4 30 38 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src/OPL2_Library.asm

>3832c0	3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.3832c8					IOPL2_TONE_TEST
.3832c8	e2 20		sep #$20	                SEP #$20        ; set A short
.3832ca	c2 10		rep #$10	                REP #$10        ; set X long
.3832cc	a2 00 00	ldx #$0000	                LDX #0
.3832cf					OPL2_TONE_TESTING_L1
.3832cf	bf c0 32 38	lda $3832c0,x	                LDA NOTE_INTRO, X
.3832d3	29 0f		and #$0f	                AND #$F
.3832d5	85 30		sta $30		                STA OPL2_NOTE ; start at C
.3832d7	bf c0 32 38	lda $3832c0,x	                LDA NOTE_INTRO, X
.3832db	29 70		and #$70	                AND #$70
.3832dd	4a		lsr a		                LSR A
.3832de	4a		lsr a		                LSR A
.3832df	4a		lsr a		                LSR A
.3832e0	4a		lsr a		                LSR A
.3832e1	85 31		sta $31		                STA OPL2_OCTAVE
.3832e3	8a		txa		                TXA
.3832e4	29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.3832e6	85 27		sta $27		                STA OPL2_CHANNEL
.3832e8	22 b8 34 38	jsl $3834b8	                JSL OPL2_PLAYNOTE
.3832ec	a0 00 00	ldy #$0000	                LDY #$0000
.3832ef					OPL2_TONE_TESTING_L2
.3832ef	ea		nop		                NOP
.3832f0	ea		nop		                NOP
.3832f1	ea		nop		                NOP
.3832f2	ea		nop		                NOP
.3832f3	c8		iny		                INY
.3832f4	c0 ff ff	cpy #$ffff	                CPY #$FFFF
.3832f7	d0 f6		bne $3832ef	                BNE OPL2_TONE_TESTING_L2
.3832f9	e8		inx		                INX
.3832fa	e0 08 00	cpx #$0008	                CPX #8
.3832fd	d0 d0		bne $3832cf	                BNE OPL2_TONE_TESTING_L1
.3832ff	6b		rtl		                RTL
.383300					OPL2_INIT
.383300	c2 20		rep #$20	                REP #$20        ; set A long
.383302	a9 00 00	lda #$0000	                LDA #$0000
.383305	85 28		sta $28		                STA OPL2_REG_REGION
.383307	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.383309	85 30		sta $30		                STA OPL2_NOTE
.38330b	85 32		sta $32		                STA OPL2_PARAMETER0
.38330d	85 34		sta $34		                STA OPL2_PARAMETER2
.38330f	a9 8a 12	lda #$128a	                LDA #<>INSTRUMENT_ACCORDN
.383312	85 50		sta $50		                STA RAD_ADDR
.383314	a9 38 00	lda #$0038	                LDA #<`INSTRUMENT_ACCORDN
.383317	85 52		sta $52		                STA RAD_ADDR + 2
.383319	e2 20		sep #$20	                SEP #$20        ; set A short
.38331b	6b		rtl		                RTL
.38331c					OPL2_Reset
.38331c	6b		rtl		                RTL
.38331d					OPL2_Get_FrequencyBlock
.38331d	6b		rtl		                RTL
.38331e					OPL2_GET_REGISTER
.38331e	48		pha		                PHA             ; begin setdp macro
.38331f	08		php		                PHP
.383320	c2 20		rep #$20	                REP #$20        ; set A long
.383322	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383325	5b		tcd		                TCD
.383326	28		plp		                PLP
.383327	68		pla		                PLA             ; end setdp macro
.383328	c2 20		rep #$20	                REP #$20        ; set A long
.38332a	18		clc		              CLC
.38332b	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.38332e	65 32		adc $32		              ADC OPL2_PARAMETER0
.383330	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383332	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.383335	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383337	e2 20		sep #$20	                SEP #$20        ; set A short
.383339	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.38333b	6b		rtl		              RTL
.38333c					OPL2_GET_WAVEFORM_SELECT
.38333c	48		pha		                PHA             ; begin setdp macro
.38333d	08		php		                PHP
.38333e	c2 20		rep #$20	                REP #$20        ; set A long
.383340	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383343	5b		tcd		                TCD
.383344	28		plp		                PLP
.383345	68		pla		                PLA             ; end setdp macro
.383346	c2 20		rep #$20	                REP #$20        ; set A long
.383348	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.38334b	69 01 00	adc #$0001	              ADC #$0001
.38334e	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383350	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.383353	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383355	e2 20		sep #$20	                SEP #$20        ; set A short
.383357	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383359	29 20		and #$20	              AND #$20
.38335b	6b		rtl		              RTL
.38335c					OPL2_GET_SCALINGLEVEL
.38335c	48		pha		                PHA             ; begin setdp macro
.38335d	08		php		                PHP
.38335e	c2 20		rep #$20	                REP #$20        ; set A long
.383360	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383363	5b		tcd		                TCD
.383364	28		plp		                PLP
.383365	68		pla		                PLA             ; end setdp macro
.383366	c2 20		rep #$20	                REP #$20        ; set A long
.383368	a9 40 00	lda #$0040	              LDA #$0040  ;
.38336b	85 28		sta $28		              STA OPL2_REG_REGION
.38336d	20 1f 3c	jsr $383c1f	              JSR OPL2_GET_REG_OFFSET
.383370	e2 20		sep #$20	                SEP #$20        ; set A short
.383372	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383374	29 c0		and #$c0	              AND #$C0
.383376	4a		lsr a		              LSR A
.383377	4a		lsr a		              LSR A
.383378	4a		lsr a		              LSR A
.383379	4a		lsr a		              LSR A
.38337a	4a		lsr a		              LSR A
.38337b	4a		lsr a		              LSR A
.38337c	6b		rtl		              RTL
.38337d					OPL2_GET_BLOCK
.38337d	48		pha		                PHA             ; begin setdp macro
.38337e	08		php		                PHP
.38337f	c2 20		rep #$20	                REP #$20        ; set A long
.383381	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383384	5b		tcd		                TCD
.383385	28		plp		                PLP
.383386	68		pla		                PLA             ; end setdp macro
.383387	e2 20		sep #$20	                SEP #$20        ; set A short
.383389	18		clc		              CLC
.38338a	a5 27		lda $27		              LDA OPL2_CHANNEL
.38338c	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.38338e	69 b0		adc #$b0	              ADC #$B0
.383390	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.383392	a9 00		lda #$00	              LDA #$00
.383394	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.383396	c2 30		rep #$30	                REP #$30        ; set A&X long
.383398	18		clc		              CLC
.383399	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.38339c	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.38339e	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3833a0	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3833a3	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3833a5	e2 20		sep #$20	                SEP #$20        ; set A short
.3833a7	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3833a9	29 1c		and #$1c	              AND #$1C
.3833ab	4a		lsr a		              LSR A
.3833ac	4a		lsr a		              LSR A
.3833ad	6b		rtl		              RTL
.3833ae					OPL2_GET_KEYON
.3833ae	48		pha		                PHA             ; begin setdp macro
.3833af	08		php		                PHP
.3833b0	c2 20		rep #$20	                REP #$20        ; set A long
.3833b2	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3833b5	5b		tcd		                TCD
.3833b6	28		plp		                PLP
.3833b7	68		pla		                PLA             ; end setdp macro
.3833b8	e2 20		sep #$20	                SEP #$20        ; set A short
.3833ba	18		clc		              CLC
.3833bb	a5 27		lda $27		              LDA OPL2_CHANNEL
.3833bd	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.3833bf	69 b0		adc #$b0	              ADC #$B0
.3833c1	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3833c3	a9 00		lda #$00	              LDA #$00
.3833c5	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3833c7	c2 30		rep #$30	                REP #$30        ; set A&X long
.3833c9	18		clc		              CLC
.3833ca	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3833cd	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3833cf	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3833d1	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3833d4	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3833d6	e2 20		sep #$20	                SEP #$20        ; set A short
.3833d8	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3833da	29 20		and #$20	              AND #$20
.3833dc	6b		rtl		              RTL
.3833dd					OPL2_GET_FEEDBACK
.3833dd	48		pha		                PHA             ; begin setdp macro
.3833de	08		php		                PHP
.3833df	c2 20		rep #$20	                REP #$20        ; set A long
.3833e1	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3833e4	5b		tcd		                TCD
.3833e5	28		plp		                PLP
.3833e6	68		pla		                PLA             ; end setdp macro
.3833e7	e2 20		sep #$20	                SEP #$20        ; set A short
.3833e9	18		clc		              CLC
.3833ea	a5 27		lda $27		              LDA OPL2_CHANNEL
.3833ec	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.3833ee	69 c0		adc #$c0	              ADC #$C0
.3833f0	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3833f2	a9 00		lda #$00	              LDA #$00
.3833f4	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3833f6	c2 30		rep #$30	                REP #$30        ; set A&X long
.3833f8	18		clc		              CLC
.3833f9	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3833fc	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3833fe	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383400	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.383403	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383405	e2 20		sep #$20	                SEP #$20        ; set A short
.383407	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383409	29 e0		and #$e0	              AND #$E0
.38340b	4a		lsr a		              LSR
.38340c	6b		rtl		              RTL
.38340d					OPL2_GET_SYNTHMODE
.38340d	48		pha		                PHA             ; begin setdp macro
.38340e	08		php		                PHP
.38340f	c2 20		rep #$20	                REP #$20        ; set A long
.383411	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383414	5b		tcd		                TCD
.383415	28		plp		                PLP
.383416	68		pla		                PLA             ; end setdp macro
.383417	e2 20		sep #$20	                SEP #$20        ; set A short
.383419	18		clc		              CLC
.38341a	a5 27		lda $27		              LDA OPL2_CHANNEL
.38341c	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.38341e	69 c0		adc #$c0	              ADC #$C0
.383420	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.383422	a9 00		lda #$00	              LDA #$00
.383424	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.383426	c2 30		rep #$30	                REP #$30        ; set A&X long
.383428	18		clc		              CLC
.383429	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.38342c	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.38342e	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383430	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.383433	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383435	e2 20		sep #$20	                SEP #$20        ; set A short
.383437	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383439	29 01		and #$01	              AND #$01
.38343b	6b		rtl		              RTL
.38343c					OPL2_GET_DEEPTREMOLO
.38343c	48		pha		                PHA             ; begin setdp macro
.38343d	08		php		                PHP
.38343e	c2 20		rep #$20	                REP #$20        ; set A long
.383440	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383443	5b		tcd		                TCD
.383444	28		plp		                PLP
.383445	68		pla		                PLA             ; end setdp macro
.383446	c2 20		rep #$20	                REP #$20        ; set A long
.383448	a9 bd 00	lda #$00bd	              LDA #$00BD;
.38344b	85 28		sta $28		              STA OPL2_REG_REGION
.38344d	20 1f 3c	jsr $383c1f	              JSR OPL2_GET_REG_OFFSET
.383450	e2 20		sep #$20	                SEP #$20        ; set A short
.383452	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383454	29 80		and #$80	              AND #$80
.383456	6b		rtl		              RTL
.383457					OPL2_GET_DEEPVIBRATO
.383457	48		pha		                PHA             ; begin setdp macro
.383458	08		php		                PHP
.383459	c2 20		rep #$20	                REP #$20        ; set A long
.38345b	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.38345e	5b		tcd		                TCD
.38345f	28		plp		                PLP
.383460	68		pla		                PLA             ; end setdp macro
.383461	c2 20		rep #$20	                REP #$20        ; set A long
.383463	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.383466	69 bd 00	adc #$00bd	              ADC #$00BD
.383469	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.38346b	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.38346e	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383470	e2 20		sep #$20	                SEP #$20        ; set A short
.383472	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383474	29 40		and #$40	              AND #$40
.383476	6b		rtl		              RTL
.383477					OPL2_GET_PERCUSSION
.383477	48		pha		                PHA             ; begin setdp macro
.383478	08		php		                PHP
.383479	c2 20		rep #$20	                REP #$20        ; set A long
.38347b	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.38347e	5b		tcd		                TCD
.38347f	28		plp		                PLP
.383480	68		pla		                PLA             ; end setdp macro
.383481	c2 20		rep #$20	                REP #$20        ; set A long
.383483	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.383486	69 bd 00	adc #$00bd	              ADC #$00BD
.383489	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.38348b	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.38348e	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383490	e2 20		sep #$20	                SEP #$20        ; set A short
.383492	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383494	29 20		and #$20	              AND #$20
.383496	6b		rtl		              RTL
.383497					OPL2_GET_DRUMS
.383497	48		pha		                PHA             ; begin setdp macro
.383498	08		php		                PHP
.383499	c2 20		rep #$20	                REP #$20        ; set A long
.38349b	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.38349e	5b		tcd		                TCD
.38349f	28		plp		                PLP
.3834a0	68		pla		                PLA             ; end setdp macro
.3834a1	c2 20		rep #$20	                REP #$20        ; set A long
.3834a3	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3834a6	69 bd 00	adc #$00bd	              ADC #$00BD
.3834a9	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3834ab	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3834ae	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3834b0	e2 20		sep #$20	                SEP #$20        ; set A short
.3834b2	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3834b4	29 1f		and #$1f	              AND #$1F
.3834b6	6b		rtl		              RTL
.3834b7					OPL2_Get_WaveForm
.3834b7	6b		rtl		                RTL
.3834b8					OPL2_PLAYNOTE
.3834b8	48		pha		                PHA             ; begin setdp macro
.3834b9	08		php		                PHP
.3834ba	c2 20		rep #$20	                REP #$20        ; set A long
.3834bc	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3834bf	5b		tcd		                TCD
.3834c0	28		plp		                PLP
.3834c1	68		pla		                PLA             ; end setdp macro
.3834c2	e2 20		sep #$20	                SEP #$20        ; set A short
.3834c4	da		phx		                PHX
.3834c5	a9 00		lda #$00	                LDA #$00
.3834c7	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.3834c9	20 a0 3a	jsr $383aa0	                JSR OPL2_SET_KEYON
.3834cc	20 65 3a	jsr $383a65	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.3834cf	e2 10		sep #$10	                SEP #$10        ; set X short
.3834d1	a5 30		lda $30		                LDA OPL2_NOTE
.3834d3	3a		dec a		                DEC A
.3834d4	0a		asl a		                ASL A
.3834d5	aa		tax		                TAX
.3834d6	bf 4f 12 38	lda $38124f,x	                LDA @lnoteFNumbers,X
.3834da	85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.3834dc	e8		inx		                INX
.3834dd	bf 4f 12 38	lda $38124f,x	                LDA @lnoteFNumbers,X
.3834e1	85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.3834e3	22 e3 39 38	jsl $3839e3	                JSL OPL2_SET_FNUMBER
.3834e7	a9 01		lda #$01	                LDA #$01
.3834e9	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.3834eb	20 a0 3a	jsr $383aa0	                JSR OPL2_SET_KEYON
.3834ee	c2 10		rep #$10	                REP #$10        ; set X long
.3834f0	fa		plx		                PLX
.3834f1	6b		rtl		                RTL
.3834f2					OPL2_PLAYDRUM
.3834f2	6b		rtl		                RTL
.3834f3					OPL2_SET_INSTRUMENT
.3834f3	48		pha		                PHA             ; begin setdp macro
.3834f4	08		php		                PHP
.3834f5	c2 20		rep #$20	                REP #$20        ; set A long
.3834f7	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3834fa	5b		tcd		                TCD
.3834fb	28		plp		                PLP
.3834fc	68		pla		                PLA             ; end setdp macro
.3834fd	38		sec		              SEC ; Set the WaveFormSelect to True
.3834fe	22 e1 36 38	jsl $3836e1	              JSL OPL2_SET_WAVEFORMSELECT;
.383502	e2 20		sep #$20	                SEP #$20        ; set A short
.383504	c2 10		rep #$10	                REP #$10        ; set X long
.383506	a0 00 00	ldy #$0000	              LDY #$0000
.383509	a2 00 00	ldx #$0000	              LDX #$0000
.38350c	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.38350e	85 35		sta $35		              STA OPL2_PARAMETER3
.383510	c8		iny		              INY
.383511	c9 06		cmp #$06	              CMP #$06
.383513	d0 03		bne $383518	              BNE PERCUSSION_NEXT07
.383515	82 70 01	brl $383688	              BRL Percussion_6
.383518					PERCUSSION_NEXT07
.383518	c9 07		cmp #$07	              CMP #$07
.38351a	d0 03		bne $38351f	              BNE PERCUSSION_NEXT08
.38351c	82 44 01	brl $383663	              BRL Percussion_7
.38351f					PERCUSSION_NEXT08
.38351f	c9 08		cmp #$08	              CMP #$08
.383521	d0 03		bne $383526	              BNE PERCUSSION_NEXT09
.383523	82 18 01	brl $38363e	              BRL Percussion_8
.383526					PERCUSSION_NEXT09
.383526	c9 09		cmp #$09	              CMP #$09
.383528	d0 03		bne $38352d	              BNE PERCUSSION_NEXT0A
.38352a	82 ec 00	brl $383619	              BRL Percussion_9
.38352d					PERCUSSION_NEXT0A
.38352d	c9 0a		cmp #$0a	              CMP #$0A
.38352f	d0 03		bne $383534	              BNE Percussion_Default
.383531	82 c0 00	brl $3835f4	              BRL Percussion_A
.383534					Percussion_Default
.383534	a9 00		lda #$00	              LDA #$00
.383536	85 26		sta $26		              STA OPL2_OPERATOR
.383538	c2 20		rep #$20	                REP #$20        ; set A long
.38353a	a9 20 00	lda #$0020	              LDA #$0020;
.38353d	85 28		sta $28		              STA OPL2_REG_REGION
.38353f	20 1f 3c	jsr $383c1f	              JSR OPL2_GET_REG_OFFSET
.383542	e2 20		sep #$20	                SEP #$20        ; set A short
.383544	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.383546	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383548	c8		iny		              INY
.383549	c2 20		rep #$20	                REP #$20        ; set A long
.38354b	a9 40 00	lda #$0040	              LDA #$0040;
.38354e	85 28		sta $28		              STA OPL2_REG_REGION
.383550	20 1f 3c	jsr $383c1f	              JSR OPL2_GET_REG_OFFSET
.383553	e2 20		sep #$20	                SEP #$20        ; set A short
.383555	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.383557	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383559	c8		iny		              INY
.38355a	c2 20		rep #$20	                REP #$20        ; set A long
.38355c	a9 60 00	lda #$0060	              LDA #$0060;
.38355f	85 28		sta $28		              STA OPL2_REG_REGION
.383561	20 1f 3c	jsr $383c1f	              JSR OPL2_GET_REG_OFFSET
.383564	e2 20		sep #$20	                SEP #$20        ; set A short
.383566	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.383568	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.38356a	c8		iny		              INY
.38356b	c2 20		rep #$20	                REP #$20        ; set A long
.38356d	a9 80 00	lda #$0080	              LDA #$0080;
.383570	85 28		sta $28		              STA OPL2_REG_REGION
.383572	20 1f 3c	jsr $383c1f	              JSR OPL2_GET_REG_OFFSET
.383575	e2 20		sep #$20	                SEP #$20        ; set A short
.383577	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.383579	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.38357b	c8		iny		              INY
.38357c	c2 20		rep #$20	                REP #$20        ; set A long
.38357e	a9 e0 00	lda #$00e0	              LDA #$00E0;
.383581	85 28		sta $28		              STA OPL2_REG_REGION
.383583	20 1f 3c	jsr $383c1f	              JSR OPL2_GET_REG_OFFSET
.383586	e2 20		sep #$20	                SEP #$20        ; set A short
.383588	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.38358a	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.38358c	c8		iny		              INY
.38358d	e2 10		sep #$10	                SEP #$10        ; set X short
.38358f	a5 27		lda $27		              LDA OPL2_CHANNEL
.383591	29 0f		and #$0f	              AND #$0F
.383593	aa		tax		              TAX
.383594	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.383596	9f c0 e6 af	sta $afe6c0,x	              STA @lOPL3_R_FEEDBACK,X
.38359a	c8		iny		              INY
.38359b	a9 01		lda #$01	              LDA #$01
.38359d	85 26		sta $26		              STA OPL2_OPERATOR
.38359f	c2 20		rep #$20	                REP #$20        ; set A long
.3835a1	a9 20 00	lda #$0020	              LDA #$0020;
.3835a4	85 28		sta $28		              STA OPL2_REG_REGION
.3835a6	20 1f 3c	jsr $383c1f	              JSR OPL2_GET_REG_OFFSET
.3835a9	e2 20		sep #$20	                SEP #$20        ; set A short
.3835ab	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.3835ad	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3835af	c8		iny		              INY
.3835b0	c2 20		rep #$20	                REP #$20        ; set A long
.3835b2	a9 40 00	lda #$0040	              LDA #$0040;
.3835b5	85 28		sta $28		              STA OPL2_REG_REGION
.3835b7	20 1f 3c	jsr $383c1f	              JSR OPL2_GET_REG_OFFSET
.3835ba	e2 20		sep #$20	                SEP #$20        ; set A short
.3835bc	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.3835be	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3835c0	c8		iny		              INY
.3835c1	c2 20		rep #$20	                REP #$20        ; set A long
.3835c3	a9 60 00	lda #$0060	              LDA #$0060;
.3835c6	85 28		sta $28		              STA OPL2_REG_REGION
.3835c8	20 1f 3c	jsr $383c1f	              JSR OPL2_GET_REG_OFFSET
.3835cb	e2 20		sep #$20	                SEP #$20        ; set A short
.3835cd	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.3835cf	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3835d1	c8		iny		              INY
.3835d2	c2 20		rep #$20	                REP #$20        ; set A long
.3835d4	a9 80 00	lda #$0080	              LDA #$0080;
.3835d7	85 28		sta $28		              STA OPL2_REG_REGION
.3835d9	20 1f 3c	jsr $383c1f	              JSR OPL2_GET_REG_OFFSET
.3835dc	e2 20		sep #$20	                SEP #$20        ; set A short
.3835de	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.3835e0	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3835e2	c8		iny		              INY
.3835e3	c2 20		rep #$20	                REP #$20        ; set A long
.3835e5	a9 e0 00	lda #$00e0	              LDA #$00E0;
.3835e8	85 28		sta $28		              STA OPL2_REG_REGION
.3835ea	20 1f 3c	jsr $383c1f	              JSR OPL2_GET_REG_OFFSET
.3835ed	e2 20		sep #$20	                SEP #$20        ; set A short
.3835ef	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.3835f1	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3835f3	6b		rtl		                RTL
.3835f4					Percussion_A
.3835f4	e2 20		sep #$20	                SEP #$20        ; set A short
.3835f6	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3835f8	8f 31 e6 af	sta $afe631	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $11
.3835fc	c8		iny		              INY
.3835fd	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3835ff	8f 51 e6 af	sta $afe651	              STA @lOPL3_R_KSL_TL + $11
.383603	c8		iny		              INY
.383604	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.383606	8f 71 e6 af	sta $afe671	              STA @lOPL3_R_AR_DR + $11
.38360a	c8		iny		              INY
.38360b	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.38360d	8f 91 e6 af	sta $afe691	              STA @lOPL3_R_SL_RR + $11
.383611	c8		iny		              INY
.383612	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.383614	8f f1 e6 af	sta $afe6f1	              STA @lOPL3_R_WAVE_SELECT + $11
.383618	6b		rtl		                RTL
.383619					Percussion_9
.383619	e2 20		sep #$20	                SEP #$20        ; set A short
.38361b	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.38361d	8f 35 e6 af	sta $afe635	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $15
.383621	c8		iny		              INY
.383622	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.383624	8f 55 e6 af	sta $afe655	              STA @lOPL3_R_KSL_TL + $15
.383628	c8		iny		              INY
.383629	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.38362b	8f 75 e6 af	sta $afe675	              STA @lOPL3_R_AR_DR + $15
.38362f	c8		iny		              INY
.383630	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.383632	8f 95 e6 af	sta $afe695	              STA @lOPL3_R_SL_RR + $15
.383636	c8		iny		              INY
.383637	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.383639	8f f5 e6 af	sta $afe6f5	              STA @lOPL3_R_WAVE_SELECT + $15
.38363d	6b		rtl		              RTL
.38363e					Percussion_8
.38363e	e2 20		sep #$20	                SEP #$20        ; set A short
.383640	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.383642	8f 32 e6 af	sta $afe632	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $12
.383646	c8		iny		              INY
.383647	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.383649	8f 52 e6 af	sta $afe652	              STA @lOPL3_R_KSL_TL + $12
.38364d	c8		iny		              INY
.38364e	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.383650	8f 72 e6 af	sta $afe672	              STA @lOPL3_R_AR_DR + $12
.383654	c8		iny		              INY
.383655	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.383657	8f 92 e6 af	sta $afe692	              STA @lOPL3_R_SL_RR + $12
.38365b	c8		iny		              INY
.38365c	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.38365e	8f f2 e6 af	sta $afe6f2	              STA @lOPL3_R_WAVE_SELECT + $12
.383662	6b		rtl		              RTL
.383663					Percussion_7
.383663	e2 20		sep #$20	                SEP #$20        ; set A short
.383665	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.383667	8f 34 e6 af	sta $afe634	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $14
.38366b	c8		iny		              INY
.38366c	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.38366e	8f 54 e6 af	sta $afe654	              STA @lOPL3_R_KSL_TL + $14
.383672	c8		iny		              INY
.383673	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.383675	8f 74 e6 af	sta $afe674	              STA @lOPL3_R_AR_DR + $14
.383679	c8		iny		              INY
.38367a	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.38367c	8f 94 e6 af	sta $afe694	              STA @lOPL3_R_SL_RR + $14
.383680	c8		iny		              INY
.383681	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.383683	8f f4 e6 af	sta $afe6f4	              STA @lOPL3_R_WAVE_SELECT + $14
.383687	6b		rtl		              RTL
.383688					Percussion_6
.383688	e2 20		sep #$20	                SEP #$20        ; set A short
.38368a	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.38368c	8f 30 e6 af	sta $afe630	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $10
.383690	8f 33 e6 af	sta $afe633	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $13
.383694	c8		iny		              INY
.383695	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.383697	8f 50 e6 af	sta $afe650	              STA @lOPL3_R_KSL_TL + $10
.38369b	8f 53 e6 af	sta $afe653	              STA @lOPL3_R_KSL_TL + $13
.38369f	c8		iny		              INY
.3836a0	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3836a2	8f 70 e6 af	sta $afe670	              STA @lOPL3_R_AR_DR + $10
.3836a6	8f 73 e6 af	sta $afe673	              STA @lOPL3_R_AR_DR + $13
.3836aa	c8		iny		              INY
.3836ab	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3836ad	8f 90 e6 af	sta $afe690	              STA @lOPL3_R_SL_RR + $10
.3836b1	8f 93 e6 af	sta $afe693	              STA @lOPL3_R_SL_RR + $13
.3836b5	c8		iny		              INY
.3836b6	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.3836b8	8f f0 e6 af	sta $afe6f0	              STA @lOPL3_R_WAVE_SELECT + $10
.3836bc	8f f3 e6 af	sta $afe6f3	              STA @lOPL3_R_WAVE_SELECT + $13
.3836c0	6b		rtl		              RTL
.3836c1					OPL2_SET_REGISTER
.3836c1	48		pha		                PHA             ; begin setdp macro
.3836c2	08		php		                PHP
.3836c3	c2 20		rep #$20	                REP #$20        ; set A long
.3836c5	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3836c8	5b		tcd		                TCD
.3836c9	28		plp		                PLP
.3836ca	68		pla		                PLA             ; end setdp macro
.3836cb	c2 20		rep #$20	                REP #$20        ; set A long
.3836cd	18		clc		              CLC
.3836ce	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3836d1	65 32		adc $32		              ADC OPL2_PARAMETER0
.3836d3	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3836d5	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3836d8	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3836da	e2 20		sep #$20	                SEP #$20        ; set A short
.3836dc	a5 33		lda $33		              LDA OPL2_PARAMETER1
.3836de	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3836e0	6b		rtl		              RTL
.3836e1					OPL2_SET_WAVEFORMSELECT
.3836e1	48		pha		                PHA             ; begin setdp macro
.3836e2	08		php		                PHP
.3836e3	c2 20		rep #$20	                REP #$20        ; set A long
.3836e5	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3836e8	5b		tcd		                TCD
.3836e9	28		plp		                PLP
.3836ea	68		pla		                PLA             ; end setdp macro
.3836eb	c2 20		rep #$20	                REP #$20        ; set A long
.3836ed	a9 01 e6	lda #$e601	              LDA #<>OPL3_R_BASE + $0001
.3836f0	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3836f2	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3836f5	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3836f7	e2 20		sep #$20	                SEP #$20        ; set A short
.3836f9	b0 07		bcs $383702	              BCS OPL2_Set_WaveFormSelect_set
.3836fb	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3836fd	29 df		and #$df	              AND #$DF
.3836ff	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383701	6b		rtl		              RTL
.383702					OPL2_Set_WaveFormSelect_set
.383702	48		pha		                PHA             ; begin setdp macro
.383703	08		php		                PHP
.383704	c2 20		rep #$20	                REP #$20        ; set A long
.383706	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383709	5b		tcd		                TCD
.38370a	28		plp		                PLP
.38370b	68		pla		                PLA             ; end setdp macro
.38370c	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.38370e	09 20 00	ora #$0020	              ORA #$20
.383711	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383713	6b		rtl		                RTL
.383714					OPL2_SET_TREMOLO
.383714	48		pha		                PHA             ; begin setdp macro
.383715	08		php		                PHP
.383716	c2 20		rep #$20	                REP #$20        ; set A long
.383718	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.38371b	5b		tcd		                TCD
.38371c	28		plp		                PLP
.38371d	68		pla		                PLA             ; end setdp macro
.38371e	08		php		                PHP ; Push the Carry
.38371f	c2 20		rep #$20	                REP #$20        ; set A long
.383721	18		clc		                CLC
.383722	a9 20 00	lda #$0020	                LDA #$0020 ;
.383725	85 28		sta $28		                STA OPL2_REG_REGION
.383727	20 1f 3c	jsr $383c1f	                JSR OPL2_GET_REG_OFFSET
.38372a	28		plp		                PLP ; Pull the Carry out
.38372b	e2 20		sep #$20	                SEP #$20        ; set A short
.38372d	b0 08		bcs $383737	                BCS OPL2_Set_Tremolo_Set;
.38372f	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383731	29 7f		and #$7f	                AND #$7F
.383733	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383735	80 06		bra $38373d	                BRA OPL2_Set_Tremolo_Exit
.383737					OPL2_Set_Tremolo_Set
.383737	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383739	09 80		ora #$80	                ORA #$80
.38373b	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.38373d					OPL2_Set_Tremolo_Exit
.38373d	6b		rtl		                RTL
.38373e					OPL2_GET_TREMOLO
.38373e	48		pha		                PHA             ; begin setdp macro
.38373f	08		php		                PHP
.383740	c2 20		rep #$20	                REP #$20        ; set A long
.383742	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383745	5b		tcd		                TCD
.383746	28		plp		                PLP
.383747	68		pla		                PLA             ; end setdp macro
.383748	c2 20		rep #$20	                REP #$20        ; set A long
.38374a	a9 20 00	lda #$0020	                LDA #$0020;
.38374d	85 28		sta $28		                STA OPL2_REG_REGION
.38374f	20 1f 3c	jsr $383c1f	                JSR OPL2_GET_REG_OFFSET
.383752	e2 20		sep #$20	                SEP #$20        ; set A short
.383754	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383756	29 80		and #$80	                AND #$80
.383758	6b		rtl		                RTL
.383759					OPL2_SET_VIBRATO
.383759	48		pha		                PHA             ; begin setdp macro
.38375a	08		php		                PHP
.38375b	c2 20		rep #$20	                REP #$20        ; set A long
.38375d	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383760	5b		tcd		                TCD
.383761	28		plp		                PLP
.383762	68		pla		                PLA             ; end setdp macro
.383763	08		php		                PHP ; Push the Carry
.383764	c2 20		rep #$20	                REP #$20        ; set A long
.383766	18		clc		                CLC
.383767	a9 20 00	lda #$0020	                LDA #$0020;
.38376a	85 28		sta $28		                STA OPL2_REG_REGION
.38376c	20 1f 3c	jsr $383c1f	                JSR OPL2_GET_REG_OFFSET
.38376f	28		plp		                PLP ; Pull the Carry out
.383770	e2 20		sep #$20	                SEP #$20        ; set A short
.383772	b0 08		bcs $38377c	                BCS OPL2_Set_Vibrato_Set;
.383774	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383776	29 bf		and #$bf	                AND #$BF
.383778	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.38377a	80 06		bra $383782	                BRA OPL2_Set_Vibrato_Exit
.38377c					OPL2_Set_Vibrato_Set
.38377c	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.38377e	09 40		ora #$40	                ORA #$40
.383780	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383782					OPL2_Set_Vibrato_Exit
.383782	6b		rtl		                RTL
.383783					OPL2_GET_VIBRATO
.383783	48		pha		                PHA             ; begin setdp macro
.383784	08		php		                PHP
.383785	c2 20		rep #$20	                REP #$20        ; set A long
.383787	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.38378a	5b		tcd		                TCD
.38378b	28		plp		                PLP
.38378c	68		pla		                PLA             ; end setdp macro
.38378d	c2 20		rep #$20	                REP #$20        ; set A long
.38378f	a9 20 00	lda #$0020	                LDA #$0020;
.383792	85 28		sta $28		                STA OPL2_REG_REGION
.383794	20 1f 3c	jsr $383c1f	                JSR OPL2_GET_REG_OFFSET
.383797	e2 20		sep #$20	                SEP #$20        ; set A short
.383799	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.38379b	29 40		and #$40	                AND #$40
.38379d	6b		rtl		                RTL
.38379e					OPL2_SET_MAINTAINSUSTAIN
.38379e	48		pha		                PHA             ; begin setdp macro
.38379f	08		php		                PHP
.3837a0	c2 20		rep #$20	                REP #$20        ; set A long
.3837a2	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3837a5	5b		tcd		                TCD
.3837a6	28		plp		                PLP
.3837a7	68		pla		                PLA             ; end setdp macro
.3837a8	08		php		              PHP ; Push the Carry
.3837a9	c2 20		rep #$20	                REP #$20        ; set A long
.3837ab	18		clc		              CLC
.3837ac	a9 20 00	lda #$0020	              LDA #$0020;
.3837af	85 28		sta $28		              STA OPL2_REG_REGION
.3837b1	20 1f 3c	jsr $383c1f	              JSR OPL2_GET_REG_OFFSET
.3837b4	28		plp		              PLP ; Pull the Carry out
.3837b5	e2 20		sep #$20	                SEP #$20        ; set A short
.3837b7	b0 08		bcs $3837c1	              BCS OPL2_Set_MaintainSustain_Set;
.3837b9	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3837bb	29 df		and #$df	              AND #$DF
.3837bd	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3837bf	80 06		bra $3837c7	              BRA OPL2_Set_MaintainSustain_Exit
.3837c1					OPL2_Set_MaintainSustain_Set
.3837c1	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3837c3	09 20		ora #$20	              ORA #$20
.3837c5	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3837c7					OPL2_Set_MaintainSustain_Exit
.3837c7	6b		rtl		                RTL
.3837c8					OPL2_GET_MAINTAINSUSTAIN
.3837c8	48		pha		                PHA             ; begin setdp macro
.3837c9	08		php		                PHP
.3837ca	c2 20		rep #$20	                REP #$20        ; set A long
.3837cc	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3837cf	5b		tcd		                TCD
.3837d0	28		plp		                PLP
.3837d1	68		pla		                PLA             ; end setdp macro
.3837d2	c2 20		rep #$20	                REP #$20        ; set A long
.3837d4	a9 20 00	lda #$0020	              LDA #$0020;
.3837d7	85 28		sta $28		              STA OPL2_REG_REGION
.3837d9	20 1f 3c	jsr $383c1f	              JSR OPL2_GET_REG_OFFSET
.3837dc	e2 20		sep #$20	                SEP #$20        ; set A short
.3837de	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3837e0	29 20		and #$20	              AND #$20
.3837e2	6b		rtl		                RTL
.3837e3					OPL2_SET_ENVELOPESCALING
.3837e3	48		pha		                PHA             ; begin setdp macro
.3837e4	08		php		                PHP
.3837e5	c2 20		rep #$20	                REP #$20        ; set A long
.3837e7	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3837ea	5b		tcd		                TCD
.3837eb	28		plp		                PLP
.3837ec	68		pla		                PLA             ; end setdp macro
.3837ed	08		php		              PHP ; Push the Carry
.3837ee	c2 20		rep #$20	                REP #$20        ; set A long
.3837f0	18		clc		              CLC
.3837f1	a9 20 00	lda #$0020	              LDA #$0020;
.3837f4	85 28		sta $28		              STA OPL2_REG_REGION
.3837f6	20 1f 3c	jsr $383c1f	              JSR OPL2_GET_REG_OFFSET
.3837f9	28		plp		              PLP ; Pull the Carry out
.3837fa	e2 20		sep #$20	                SEP #$20        ; set A short
.3837fc	b0 08		bcs $383806	              BCS OPL2_Set_EnvelopeScaling_Set;
.3837fe	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383800	29 ef		and #$ef	              AND #$EF
.383802	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383804	80 06		bra $38380c	              BRA OPL2_Set_EnvelopeScaling_Exit
.383806					OPL2_Set_EnvelopeScaling_Set
.383806	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383808	09 10		ora #$10	              ORA #$10
.38380a	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.38380c					OPL2_Set_EnvelopeScaling_Exit
.38380c	6b		rtl		                RTL
.38380d					OPL2_GET_ENVELOPESCALING
.38380d	48		pha		                PHA             ; begin setdp macro
.38380e	08		php		                PHP
.38380f	c2 20		rep #$20	                REP #$20        ; set A long
.383811	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383814	5b		tcd		                TCD
.383815	28		plp		                PLP
.383816	68		pla		                PLA             ; end setdp macro
.383817	c2 20		rep #$20	                REP #$20        ; set A long
.383819	a9 20 00	lda #$0020	              LDA #$0020;
.38381c	85 28		sta $28		              STA OPL2_REG_REGION
.38381e	20 1f 3c	jsr $383c1f	              JSR OPL2_GET_REG_OFFSET
.383821	e2 20		sep #$20	                SEP #$20        ; set A short
.383823	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383825	29 10		and #$10	              AND #$10
.383827	6b		rtl		                RTL
.383828					OPL2_GET_MODFREQMULTIPLE
.383828	48		pha		                PHA             ; begin setdp macro
.383829	08		php		                PHP
.38382a	c2 20		rep #$20	                REP #$20        ; set A long
.38382c	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.38382f	5b		tcd		                TCD
.383830	28		plp		                PLP
.383831	68		pla		                PLA             ; end setdp macro
.383832	c2 20		rep #$20	                REP #$20        ; set A long
.383834	a9 20 00	lda #$0020	              LDA #$0020;
.383837	85 28		sta $28		              STA OPL2_REG_REGION
.383839	20 1f 3c	jsr $383c1f	              JSR OPL2_GET_REG_OFFSET
.38383c	e2 20		sep #$20	                SEP #$20        ; set A short
.38383e	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383840	29 0f		and #$0f	              AND #$0F
.383842	6b		rtl		              RTL
.383843					OPL2_SET_MODFREQMULTIPLE
.383843	48		pha		                PHA             ; begin setdp macro
.383844	08		php		                PHP
.383845	c2 20		rep #$20	                REP #$20        ; set A long
.383847	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.38384a	5b		tcd		                TCD
.38384b	28		plp		                PLP
.38384c	68		pla		                PLA             ; end setdp macro
.38384d	c2 20		rep #$20	                REP #$20        ; set A long
.38384f	a9 20 00	lda #$0020	                LDA #$0020;
.383852	85 28		sta $28		                STA OPL2_REG_REGION
.383854	20 1f 3c	jsr $383c1f	                JSR OPL2_GET_REG_OFFSET
.383857	e2 20		sep #$20	                SEP #$20        ; set A short
.383859	a5 32		lda $32		                LDA OPL2_PARAMETER0
.38385b	29 0f		and #$0f	                AND #$0F
.38385d	85 32		sta $32		                STA OPL2_PARAMETER0
.38385f	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383861	29 f0		and #$f0	                AND #$F0
.383863	05 32		ora $32		                ORA OPL2_PARAMETER0
.383865	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383867	6b		rtl		                RTL
.383868					OPL2_SET_SCALINGLEVEL
.383868	48		pha		                PHA             ; begin setdp macro
.383869	08		php		                PHP
.38386a	c2 20		rep #$20	                REP #$20        ; set A long
.38386c	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.38386f	5b		tcd		                TCD
.383870	28		plp		                PLP
.383871	68		pla		                PLA             ; end setdp macro
.383872	c2 20		rep #$20	                REP #$20        ; set A long
.383874	a9 40 00	lda #$0040	                LDA #$0040;
.383877	85 28		sta $28		                STA OPL2_REG_REGION
.383879	20 1f 3c	jsr $383c1f	                JSR OPL2_GET_REG_OFFSET
.38387c	e2 20		sep #$20	                SEP #$20        ; set A short
.38387e	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.383880	29 03		and #$03	                AND #$03
.383882	0a		asl a		                ASL
.383883	0a		asl a		                ASL
.383884	0a		asl a		                ASL
.383885	0a		asl a		                ASL
.383886	0a		asl a		                ASL
.383887	0a		asl a		                ASL
.383888	85 32		sta $32		                STA OPL2_PARAMETER0
.38388a	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.38388c	29 3f		and #$3f	                AND #$3F
.38388e	05 32		ora $32		                ORA OPL2_PARAMETER0
.383890	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383892	6b		rtl		                RTL
.383893					OPL2_SET_VOLUME
.383893	48		pha		                PHA             ; begin setdp macro
.383894	08		php		                PHP
.383895	c2 20		rep #$20	                REP #$20        ; set A long
.383897	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.38389a	5b		tcd		                TCD
.38389b	28		plp		                PLP
.38389c	68		pla		                PLA             ; end setdp macro
.38389d	c2 20		rep #$20	                REP #$20        ; set A long
.38389f	a9 40 00	lda #$0040	                LDA #$0040  ;
.3838a2	85 28		sta $28		                STA OPL2_REG_REGION
.3838a4	20 1f 3c	jsr $383c1f	                JSR OPL2_GET_REG_OFFSET
.3838a7	e2 20		sep #$20	                SEP #$20        ; set A short
.3838a9	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.3838ab	29 3f		and #$3f	                AND #$3F
.3838ad	85 32		sta $32		                STA OPL2_PARAMETER0
.3838af	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3838b1	29 c0		and #$c0	                AND #$C0
.3838b3	05 32		ora $32		                ORA OPL2_PARAMETER0
.3838b5	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3838b7	6b		rtl		                RTL
.3838b8					OPL2_GET_VOLUME
.3838b8	48		pha		                PHA             ; begin setdp macro
.3838b9	08		php		                PHP
.3838ba	c2 20		rep #$20	                REP #$20        ; set A long
.3838bc	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3838bf	5b		tcd		                TCD
.3838c0	28		plp		                PLP
.3838c1	68		pla		                PLA             ; end setdp macro
.3838c2	c2 20		rep #$20	                REP #$20        ; set A long
.3838c4	a9 40 00	lda #$0040	                LDA #$0040  ;
.3838c7	85 28		sta $28		                STA OPL2_REG_REGION
.3838c9	20 1f 3c	jsr $383c1f	                JSR OPL2_GET_REG_OFFSET
.3838cc	e2 20		sep #$20	                SEP #$20        ; set A short
.3838ce	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3838d0	29 3f		and #$3f	                AND #$3F
.3838d2	6b		rtl		                RTL
.3838d3					OPL2_SET_ATTACK
.3838d3	48		pha		                PHA             ; begin setdp macro
.3838d4	08		php		                PHP
.3838d5	c2 20		rep #$20	                REP #$20        ; set A long
.3838d7	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3838da	5b		tcd		                TCD
.3838db	28		plp		                PLP
.3838dc	68		pla		                PLA             ; end setdp macro
.3838dd	c2 20		rep #$20	                REP #$20        ; set A long
.3838df	a9 60 00	lda #$0060	                LDA #$0060  ;
.3838e2	85 28		sta $28		                STA OPL2_REG_REGION
.3838e4	20 1f 3c	jsr $383c1f	                JSR OPL2_GET_REG_OFFSET
.3838e7	e2 20		sep #$20	                SEP #$20        ; set A short
.3838e9	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.3838eb	29 0f		and #$0f	                AND #$0F
.3838ed	0a		asl a		                ASL
.3838ee	0a		asl a		                ASL
.3838ef	0a		asl a		                ASL
.3838f0	0a		asl a		                ASL
.3838f1	85 32		sta $32		                STA OPL2_PARAMETER0
.3838f3	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3838f5	29 0f		and #$0f	                AND #$0F
.3838f7	05 32		ora $32		                ORA OPL2_PARAMETER0
.3838f9	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3838fb	6b		rtl		                RTL
.3838fc					OPL2_GET_ATTACK
.3838fc	48		pha		                PHA             ; begin setdp macro
.3838fd	08		php		                PHP
.3838fe	c2 20		rep #$20	                REP #$20        ; set A long
.383900	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383903	5b		tcd		                TCD
.383904	28		plp		                PLP
.383905	68		pla		                PLA             ; end setdp macro
.383906	c2 20		rep #$20	                REP #$20        ; set A long
.383908	a9 60 00	lda #$0060	                LDA #$0060
.38390b	85 28		sta $28		                STA OPL2_REG_REGION
.38390d	20 1f 3c	jsr $383c1f	                JSR OPL2_GET_REG_OFFSET
.383910	e2 20		sep #$20	                SEP #$20        ; set A short
.383912	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383914	29 f0		and #$f0	                AND #$F0
.383916	4a		lsr a		                LSR
.383917	4a		lsr a		                LSR
.383918	4a		lsr a		                LSR
.383919	4a		lsr a		                LSR
.38391a	6b		rtl		                RTL
.38391b					OPL2_SET_DECAY
.38391b	48		pha		                PHA             ; begin setdp macro
.38391c	08		php		                PHP
.38391d	c2 20		rep #$20	                REP #$20        ; set A long
.38391f	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383922	5b		tcd		                TCD
.383923	28		plp		                PLP
.383924	68		pla		                PLA             ; end setdp macro
.383925	c2 20		rep #$20	                REP #$20        ; set A long
.383927	a9 60 00	lda #$0060	                LDA #$0060;
.38392a	85 28		sta $28		                STA OPL2_REG_REGION
.38392c	20 1f 3c	jsr $383c1f	                JSR OPL2_GET_REG_OFFSET
.38392f	e2 20		sep #$20	                SEP #$20        ; set A short
.383931	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.383933	29 0f		and #$0f	                AND #$0F
.383935	85 32		sta $32		                STA OPL2_PARAMETER0
.383937	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383939	29 f0		and #$f0	                AND #$F0
.38393b	05 32		ora $32		                ORA OPL2_PARAMETER0
.38393d	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.38393f	6b		rtl		                RTL
.383940					OPL2_GET_DECAY
.383940	48		pha		                PHA             ; begin setdp macro
.383941	08		php		                PHP
.383942	c2 20		rep #$20	                REP #$20        ; set A long
.383944	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383947	5b		tcd		                TCD
.383948	28		plp		                PLP
.383949	68		pla		                PLA             ; end setdp macro
.38394a	c2 20		rep #$20	                REP #$20        ; set A long
.38394c	a9 60 00	lda #$0060	                LDA #$0060
.38394f	85 28		sta $28		                STA OPL2_REG_REGION
.383951	20 1f 3c	jsr $383c1f	                JSR OPL2_GET_REG_OFFSET
.383954	e2 20		sep #$20	                SEP #$20        ; set A short
.383956	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383958	29 0f		and #$0f	                AND #$0F
.38395a	6b		rtl		                RTL
.38395b					OPL2_SET_SUSTAIN
.38395b	48		pha		                PHA             ; begin setdp macro
.38395c	08		php		                PHP
.38395d	c2 20		rep #$20	                REP #$20        ; set A long
.38395f	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383962	5b		tcd		                TCD
.383963	28		plp		                PLP
.383964	68		pla		                PLA             ; end setdp macro
.383965	c2 20		rep #$20	                REP #$20        ; set A long
.383967	a9 80 00	lda #$0080	                LDA #$0080;
.38396a	85 28		sta $28		                STA OPL2_REG_REGION
.38396c	20 1f 3c	jsr $383c1f	                JSR OPL2_GET_REG_OFFSET
.38396f	e2 20		sep #$20	                SEP #$20        ; set A short
.383971	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.383973	29 0f		and #$0f	                AND #$0F
.383975	0a		asl a		                ASL
.383976	0a		asl a		                ASL
.383977	0a		asl a		                ASL
.383978	0a		asl a		                ASL
.383979	85 32		sta $32		                STA OPL2_PARAMETER0
.38397b	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.38397d	29 0f		and #$0f	                AND #$0F
.38397f	05 32		ora $32		                ORA OPL2_PARAMETER0
.383981	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383983	6b		rtl		                RTL
.383984					OPL2_GET_SUSTAIN
.383984	48		pha		                PHA             ; begin setdp macro
.383985	08		php		                PHP
.383986	c2 20		rep #$20	                REP #$20        ; set A long
.383988	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.38398b	5b		tcd		                TCD
.38398c	28		plp		                PLP
.38398d	68		pla		                PLA             ; end setdp macro
.38398e	c2 20		rep #$20	                REP #$20        ; set A long
.383990	a9 80 00	lda #$0080	                LDA #$0080
.383993	85 28		sta $28		                STA OPL2_REG_REGION
.383995	20 1f 3c	jsr $383c1f	                JSR OPL2_GET_REG_OFFSET
.383998	e2 20		sep #$20	                SEP #$20        ; set A short
.38399a	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.38399c	29 f0		and #$f0	                AND #$F0
.38399e	4a		lsr a		                LSR
.38399f	4a		lsr a		                LSR
.3839a0	4a		lsr a		                LSR
.3839a1	4a		lsr a		                LSR
.3839a2	6b		rtl		                RTL
.3839a3					OPL2_SET_RELEASE
.3839a3	48		pha		                PHA             ; begin setdp macro
.3839a4	08		php		                PHP
.3839a5	c2 20		rep #$20	                REP #$20        ; set A long
.3839a7	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3839aa	5b		tcd		                TCD
.3839ab	28		plp		                PLP
.3839ac	68		pla		                PLA             ; end setdp macro
.3839ad	c2 20		rep #$20	                REP #$20        ; set A long
.3839af	a9 80 00	lda #$0080	                LDA #$0080;
.3839b2	85 28		sta $28		                STA OPL2_REG_REGION
.3839b4	20 1f 3c	jsr $383c1f	                JSR OPL2_GET_REG_OFFSET
.3839b7	e2 20		sep #$20	                SEP #$20        ; set A short
.3839b9	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.3839bb	29 0f		and #$0f	                AND #$0F
.3839bd	85 32		sta $32		                STA OPL2_PARAMETER0
.3839bf	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3839c1	29 f0		and #$f0	                AND #$F0
.3839c3	05 32		ora $32		                ORA OPL2_PARAMETER0
.3839c5	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3839c7	6b		rtl		                RTL
.3839c8					OPL2_GET_RELEASE
.3839c8	48		pha		                PHA             ; begin setdp macro
.3839c9	08		php		                PHP
.3839ca	c2 20		rep #$20	                REP #$20        ; set A long
.3839cc	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3839cf	5b		tcd		                TCD
.3839d0	28		plp		                PLP
.3839d1	68		pla		                PLA             ; end setdp macro
.3839d2	c2 20		rep #$20	                REP #$20        ; set A long
.3839d4	a9 80 00	lda #$0080	                LDA #$0080
.3839d7	85 28		sta $28		                STA OPL2_REG_REGION
.3839d9	20 1f 3c	jsr $383c1f	                JSR OPL2_GET_REG_OFFSET
.3839dc	e2 20		sep #$20	                SEP #$20        ; set A short
.3839de	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3839e0	29 0f		and #$0f	                AND #$0F
.3839e2	6b		rtl		                RTL
.3839e3					OPL2_SET_FNUMBER
.3839e3	48		pha		                PHA             ; begin setdp macro
.3839e4	08		php		                PHP
.3839e5	c2 20		rep #$20	                REP #$20        ; set A long
.3839e7	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3839ea	5b		tcd		                TCD
.3839eb	28		plp		                PLP
.3839ec	68		pla		                PLA             ; end setdp macro
.3839ed	e2 20		sep #$20	                SEP #$20        ; set A short
.3839ef	18		clc		                CLC
.3839f0	a5 27		lda $27		                LDA OPL2_CHANNEL
.3839f2	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.3839f4	69 a0		adc #$a0	                ADC #$A0
.3839f6	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.3839f8	a9 00		lda #$00	                LDA #$00
.3839fa	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.3839fc	c2 30		rep #$30	                REP #$30        ; set A&X long
.3839fe	18		clc		                CLC
.3839ff	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.383a02	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.383a04	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.383a06	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.383a09	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.383a0b	e2 20		sep #$20	                SEP #$20        ; set A short
.383a0d	a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.383a0f	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.383a11	18		clc		                CLC
.383a12	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.383a14	69 10		adc #$10	                ADC #$10
.383a16	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.383a18	a5 33		lda $33		                LDA OPL2_PARAMETER1
.383a1a	29 03		and #$03	                AND #$03
.383a1c	85 33		sta $33		                STA OPL2_PARAMETER1
.383a1e	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383a20	29 fc		and #$fc	                AND #$FC
.383a22	05 33		ora $33		                ORA OPL2_PARAMETER1
.383a24	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383a26	6b		rtl		                RTL
.383a27					OPL2_GET_FNUMBER
.383a27	48		pha		                PHA             ; begin setdp macro
.383a28	08		php		                PHP
.383a29	c2 20		rep #$20	                REP #$20        ; set A long
.383a2b	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383a2e	5b		tcd		                TCD
.383a2f	28		plp		                PLP
.383a30	68		pla		                PLA             ; end setdp macro
.383a31	e2 20		sep #$20	                SEP #$20        ; set A short
.383a33	18		clc		                CLC
.383a34	a5 27		lda $27		                LDA OPL2_CHANNEL
.383a36	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.383a38	69 a0		adc #$a0	                ADC #$A0
.383a3a	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.383a3c	a9 00		lda #$00	                LDA #$00
.383a3e	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.383a40	c2 30		rep #$30	                REP #$30        ; set A&X long
.383a42	18		clc		                CLC
.383a43	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.383a46	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.383a48	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.383a4a	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.383a4d	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.383a4f	e2 20		sep #$20	                SEP #$20        ; set A short
.383a51	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383a53	85 32		sta $32		                STA OPL2_PARAMETER0
.383a55	18		clc		                CLC
.383a56	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.383a58	69 10		adc #$10	                ADC #$10
.383a5a	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.383a5c	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383a5e	29 03		and #$03	                AND #$03
.383a60	85 33		sta $33		                STA OPL2_PARAMETER1
.383a62	6b		rtl		                RTL
.383a63					OPL2_Set_Frequency
.383a63	6b		rtl		                RTL
.383a64					OPL2_Get_Frequency
.383a64	6b		rtl		                RTL
.383a65					OPL2_SET_BLOCK
.383a65	48		pha		                PHA             ; begin setdp macro
.383a66	08		php		                PHP
.383a67	c2 20		rep #$20	                REP #$20        ; set A long
.383a69	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383a6c	5b		tcd		                TCD
.383a6d	28		plp		                PLP
.383a6e	68		pla		                PLA             ; end setdp macro
.383a6f	e2 20		sep #$20	                SEP #$20        ; set A short
.383a71	18		clc		                CLC
.383a72	a5 27		lda $27		                LDA OPL2_CHANNEL
.383a74	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.383a76	69 b0		adc #$b0	                ADC #$B0
.383a78	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.383a7a	a9 00		lda #$00	                LDA #$00
.383a7c	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.383a7e	c2 30		rep #$30	                REP #$30        ; set A&X long
.383a80	18		clc		                CLC
.383a81	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.383a84	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.383a86	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.383a88	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.383a8b	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.383a8d	e2 20		sep #$20	                SEP #$20        ; set A short
.383a8f	a5 31		lda $31		                LDA OPL2_OCTAVE
.383a91	29 07		and #$07	                AND #$07
.383a93	0a		asl a		                ASL
.383a94	0a		asl a		                ASL
.383a95	85 31		sta $31		                STA OPL2_OCTAVE
.383a97	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383a99	29 e3		and #$e3	                AND #$E3
.383a9b	05 31		ora $31		                ORA OPL2_OCTAVE
.383a9d	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383a9f	60		rts		                RTS
.383aa0					OPL2_SET_KEYON
.383aa0	48		pha		                PHA             ; begin setdp macro
.383aa1	08		php		                PHP
.383aa2	c2 20		rep #$20	                REP #$20        ; set A long
.383aa4	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383aa7	5b		tcd		                TCD
.383aa8	28		plp		                PLP
.383aa9	68		pla		                PLA             ; end setdp macro
.383aaa	e2 20		sep #$20	                SEP #$20        ; set A short
.383aac	18		clc		                CLC
.383aad	a5 27		lda $27		                LDA OPL2_CHANNEL
.383aaf	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.383ab1	69 b0		adc #$b0	                ADC #$B0
.383ab3	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.383ab5	a9 00		lda #$00	                LDA #$00
.383ab7	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.383ab9	c2 30		rep #$30	                REP #$30        ; set A&X long
.383abb	18		clc		                CLC
.383abc	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.383abf	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.383ac1	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.383ac3	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.383ac6	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.383ac8	e2 20		sep #$20	                SEP #$20        ; set A short
.383aca	a5 32		lda $32		                LDA OPL2_PARAMETER0
.383acc	29 01		and #$01	                AND #$01
.383ace	f0 02		beq $383ad2	                BEQ SET_KEYON_OFF
.383ad0	a9 20		lda #$20	                LDA #$20
.383ad2					    SET_KEYON_OFF
.383ad2	85 32		sta $32		                STA OPL2_PARAMETER0
.383ad4	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383ad6	29 df		and #$df	                AND #$DF
.383ad8	05 32		ora $32		                ORA OPL2_PARAMETER0
.383ada	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383adc	60		rts		                RTS
.383add					OPL2_SET_FEEDBACK
.383add	48		pha		                PHA             ; begin setdp macro
.383ade	08		php		                PHP
.383adf	c2 20		rep #$20	                REP #$20        ; set A long
.383ae1	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383ae4	5b		tcd		                TCD
.383ae5	28		plp		                PLP
.383ae6	68		pla		                PLA             ; end setdp macro
.383ae7	e2 20		sep #$20	                SEP #$20        ; set A short
.383ae9	18		clc		              CLC
.383aea	a5 27		lda $27		              LDA OPL2_CHANNEL
.383aec	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.383aee	69 c0		adc #$c0	              ADC #$C0
.383af0	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.383af2	a9 00		lda #$00	              LDA #$00
.383af4	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.383af6	c2 30		rep #$30	                REP #$30        ; set A&X long
.383af8	18		clc		              CLC
.383af9	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.383afc	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.383afe	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383b00	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.383b03	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383b05	e2 20		sep #$20	                SEP #$20        ; set A short
.383b07	a5 32		lda $32		              LDA OPL2_PARAMETER0
.383b09	29 07		and #$07	              AND #$07
.383b0b	0a		asl a		              ASL
.383b0c	85 32		sta $32		              STA OPL2_PARAMETER0
.383b0e	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383b10	29 01		and #$01	              AND #$01
.383b12	05 32		ora $32		              ORA OPL2_PARAMETER0
.383b14	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383b16	6b		rtl		                RTL
.383b17					OPL2_SET_SYNTHMODE
.383b17	48		pha		                PHA             ; begin setdp macro
.383b18	08		php		                PHP
.383b19	c2 20		rep #$20	                REP #$20        ; set A long
.383b1b	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383b1e	5b		tcd		                TCD
.383b1f	28		plp		                PLP
.383b20	68		pla		                PLA             ; end setdp macro
.383b21	08		php		              PHP ; Push the Carry
.383b22	e2 20		sep #$20	                SEP #$20        ; set A short
.383b24	18		clc		              CLC
.383b25	a5 27		lda $27		              LDA OPL2_CHANNEL
.383b27	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.383b29	69 c0		adc #$c0	              ADC #$C0
.383b2b	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.383b2d	a9 00		lda #$00	              LDA #$00
.383b2f	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.383b31	c2 30		rep #$30	                REP #$30        ; set A&X long
.383b33	18		clc		              CLC
.383b34	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.383b37	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.383b39	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383b3b	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.383b3e	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383b40	28		plp		              PLP ; Pull the Carry out
.383b41	e2 20		sep #$20	                SEP #$20        ; set A short
.383b43	b0 08		bcs $383b4d	              BCS OPL2_Set_Synthmode_Set;
.383b45	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383b47	29 fe		and #$fe	              AND #$FE
.383b49	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383b4b	80 06		bra $383b53	              BRA OPL2_Set_Synthmode_Exit
.383b4d					OPL2_Set_Synthmode_Set
.383b4d	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383b4f	09 01		ora #$01	              ORA #$01
.383b51	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383b53					OPL2_Set_Synthmode_Exit
.383b53	6b		rtl		                RTL
.383b54					OPL2_SET_DEEPTREMOLO
.383b54	48		pha		                PHA             ; begin setdp macro
.383b55	08		php		                PHP
.383b56	c2 20		rep #$20	                REP #$20        ; set A long
.383b58	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383b5b	5b		tcd		                TCD
.383b5c	28		plp		                PLP
.383b5d	68		pla		                PLA             ; end setdp macro
.383b5e	c2 20		rep #$20	                REP #$20        ; set A long
.383b60	a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.383b63	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383b65	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.383b68	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383b6a	e2 20		sep #$20	                SEP #$20        ; set A short
.383b6c	b0 08		bcs $383b76	              BCS OPL2_Set_DeepTremolo_Set;
.383b6e	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383b70	29 7f		and #$7f	              AND #$7F
.383b72	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383b74	80 06		bra $383b7c	              BRA OPL2_Set_DeepTremolo_Exit
.383b76					OPL2_Set_DeepTremolo_Set
.383b76	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383b78	09 80		ora #$80	              ORA #$80
.383b7a	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383b7c					OPL2_Set_DeepTremolo_Exit
.383b7c	6b		rtl		                RTL
.383b7d					OPL2_SET_DEEPVIBRATO
.383b7d	48		pha		                PHA             ; begin setdp macro
.383b7e	08		php		                PHP
.383b7f	c2 20		rep #$20	                REP #$20        ; set A long
.383b81	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383b84	5b		tcd		                TCD
.383b85	28		plp		                PLP
.383b86	68		pla		                PLA             ; end setdp macro
.383b87	c2 20		rep #$20	                REP #$20        ; set A long
.383b89	a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.383b8c	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383b8e	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.383b91	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383b93	e2 20		sep #$20	                SEP #$20        ; set A short
.383b95	b0 08		bcs $383b9f	              BCS OPL2_Set_DeepVibrato_Set;
.383b97	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383b99	29 bf		and #$bf	              AND #$BF
.383b9b	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383b9d	80 06		bra $383ba5	              BRA OPL2_Set_DeepVibrato_Exit
.383b9f					OPL2_Set_DeepVibrato_Set
.383b9f	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383ba1	09 40		ora #$40	              ORA #$40
.383ba3	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383ba5					OPL2_Set_DeepVibrato_Exit
.383ba5	6b		rtl		                RTL
.383ba6					OPL2_SET_PERCUSSION
.383ba6	48		pha		                PHA             ; begin setdp macro
.383ba7	08		php		                PHP
.383ba8	c2 20		rep #$20	                REP #$20        ; set A long
.383baa	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383bad	5b		tcd		                TCD
.383bae	28		plp		                PLP
.383baf	68		pla		                PLA             ; end setdp macro
.383bb0	c2 20		rep #$20	                REP #$20        ; set A long
.383bb2	a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.383bb5	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.383bb7	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.383bba	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.383bbc	e2 20		sep #$20	                SEP #$20        ; set A short
.383bbe	b0 08		bcs $383bc8	                BCS OPL2_Set_Percussion_Set;
.383bc0	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383bc2	29 df		and #$df	                AND #$DF
.383bc4	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383bc6	80 06		bra $383bce	                BRA OPL2_Set_Percussion_Exit
.383bc8					OPL2_Set_Percussion_Set
.383bc8	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383bca	09 20		ora #$20	                ORA #$20
.383bcc	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383bce					OPL2_Set_Percussion_Exit
.383bce	6b		rtl		                RTL
.383bcf					OPL2_SET_DRUMS
.383bcf	48		pha		                PHA             ; begin setdp macro
.383bd0	08		php		                PHP
.383bd1	c2 20		rep #$20	                REP #$20        ; set A long
.383bd3	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383bd6	5b		tcd		                TCD
.383bd7	28		plp		                PLP
.383bd8	68		pla		                PLA             ; end setdp macro
.383bd9	c2 20		rep #$20	                REP #$20        ; set A long
.383bdb	a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.383bde	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.383be0	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.383be3	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.383be5	e2 20		sep #$20	                SEP #$20        ; set A short
.383be7	a5 32		lda $32		                LDA OPL2_PARAMETER0
.383be9	29 1f		and #$1f	                AND #$1F
.383beb	85 32		sta $32		                STA OPL2_PARAMETER0
.383bed	49 ff		eor #$ff	                EOR #$FF
.383bef	85 33		sta $33		                STA OPL2_PARAMETER1
.383bf1	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383bf3	25 33		and $33		                AND OPL2_PARAMETER1
.383bf5	05 32		ora $32		                ORA OPL2_PARAMETER0
.383bf7	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383bf9	6b		rtl		                RTL
.383bfa					OPL2_SET_WAVEFORM
.383bfa	48		pha		                PHA             ; begin setdp macro
.383bfb	08		php		                PHP
.383bfc	c2 20		rep #$20	                REP #$20        ; set A long
.383bfe	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383c01	5b		tcd		                TCD
.383c02	28		plp		                PLP
.383c03	68		pla		                PLA             ; end setdp macro
.383c04	c2 20		rep #$20	                REP #$20        ; set A long
.383c06	a9 e0 00	lda #$00e0	                LDA #$00E0;
.383c09	85 28		sta $28		                STA OPL2_REG_REGION
.383c0b	20 1f 3c	jsr $383c1f	                JSR OPL2_GET_REG_OFFSET
.383c0e	e2 20		sep #$20	                SEP #$20        ; set A short
.383c10	a5 32		lda $32		                LDA OPL2_PARAMETER0
.383c12	29 03		and #$03	                AND #$03
.383c14	85 32		sta $32		                STA OPL2_PARAMETER0
.383c16	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383c18	29 fc		and #$fc	                AND #$FC
.383c1a	05 32		ora $32		                ORA OPL2_PARAMETER0
.383c1c	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383c1e	6b		rtl		                RTL
.383c1f					OPL2_GET_REG_OFFSET
.383c1f	e2 30		sep #$30	                SEP #$30        ; set A&X short
.383c21	a5 27		lda $27		                LDA OPL2_CHANNEL
.383c23	29 0f		and #$0f	                AND #$0F
.383c25	aa		tax		                TAX
.383c26	a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.383c28	d0 06		bne $383c30	                BNE OPL2_Get_Register_Offset_l0
.383c2a	bf 67 12 38	lda $381267,x	                LDA @lregisterOffsets_operator0, X
.383c2e	80 04		bra $383c34	                BRA OPL2_Get_Register_Offset_exit
.383c30					OPL2_Get_Register_Offset_l0
.383c30	bf 70 12 38	lda $381270,x	                LDA @lregisterOffsets_operator1, X
.383c34					OPL2_Get_Register_Offset_exit
.383c34	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.383c36	a9 00		lda #$00	                LDA #$00
.383c38	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.383c3a	c2 30		rep #$30	                REP #$30        ; set A&X long
.383c3c	18		clc		                CLC
.383c3d	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.383c40	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.383c42	65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.383c44	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.383c46	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.383c49	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.383c4b	60		rts		                RTS

;******  Return to file: src/kernel.asm


;******  Processing file: src/SDCard_Controller_def.asm

=$afea00				SDC_VERSION_REG         = $AFEA00    ; Ought to read 12
=$afea01				SDC_CONTROL_REG         = $AFEA01    ; Bit0 1 = Reset core logic, and registers. Self clearing
=$afea02				SDC_TRANS_TYPE_REG      = $AFEA02  ; Bit[1:0]
=$00					SDC_TRANS_DIRECT      = $00   ; 00 = Direct Access
=$01					SDC_TRANS_INIT_SD     = $01   ; 01 = Init SD
=$02					SDC_TRANS_READ_BLK    = $02   ; 10 = RW_READ_BLOCK (512 Bytes)
=$03					SDC_TRANS_WRITE_BLK   = $03   ; 11 = RW_WRITE_SD_BLOCK
=$afea03				SDC_TRANS_CONTROL_REG   = $AFEA03
=$01					SDC_TRANS_START         = $01
=$afea04				SDC_TRANS_STATUS_REG    = $AFEA04
=$01					SDC_TRANS_BUSY          = $01     ;  1= Transaction Busy
=$afea05				SDC_TRANS_ERROR_REG     = $AFEA05
=$00					SDC_TRANS_INIT_NO_ERR   = $00   ; Init Error Report [1:0]
=$01					SDC_TRANS_INIT_CMD0_ERR = $01
=$02					SDC_TRANS_INIT_CMD1_ERR = $02
=$00					SDC_TRANS_RD_NO_ERR     = $00   ; Read Error Report [3:2]
=$04					SDC_TRANS_RD_CMD_ERR    = $04
=$08					SDC_TRANS_RD_TOKEN_ERR  = $08
=$00					SDC_TRANS_WR_NO_ERR     = $00   ; Write Report Error  [5:4]
=$10					SDC_TRANS_WR_CMD_ERR    = $10   ;
=$20					SDC_TRANS_WR_DATA_ERR   = $20
=$30					SDC_TRANS_WR_BUSY_ERR   = $30
=$afea06				SDC_DIRECT_ACCESS_REG   = $AFEA06 ; SPI Direct Read and Write - Set DATA before initiating direct Access Transaction
=$afea07				SDC_SD_ADDR_7_0_REG     = $AFEA07 ; Set the ADDR before a block read or block write
=$afea08				SDC_SD_ADDR_15_8_REG    = $AFEA08 ; Addr0 [8:0] Always should be 0, since each block is 512Bytes
=$afea09				SDC_SD_ADDR_23_16_REG   = $AFEA09
=$afea0a				SDC_SD_ADDR_31_24_REG   = $AFEA0A
=$afea0b				SDC_SPI_CLK_DEL_REG     = $AFEA0B
=$afea10				SDC_RX_FIFO_DATA_REG    = $AFEA10 ; Data from the Block Read
=$afea12				SDC_RX_FIFO_DATA_CNT_HI = $AFEA12 ; How many Bytes in the FIFO HI
=$afea13				SDC_RX_FIFO_DATA_CNT_LO = $AFEA13 ; How many Bytes in the FIFO LO
=$afea14				SDC_RX_FIFO_CTRL_REG    = $AFEA14 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)
=$afea20				SDC_TX_FIFO_DATA_REG    = $AFEA20 ; Write Data Block here
=$afea24				SDC_TX_FIFO_CTRL_REG    = $AFEA24 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)

;******  Return to file: src/kernel.asm


;******  Processing file: src/SDOS.asm


;******  Processing file: src/sdos_fat.asm


;******  Processing file: src/sdos_bios.asm

=0					BIOS_DEV_HD0 = 0
=1					BIOS_DEV_HD1 = 1
=2					BIOS_DEV_SD = 2
=3					BIOS_DEV_FDC = 3
=$80					BIOS_ERR_BADDEV = $80           ; BIOS bad device # error
.383c4c					IGETBLOCK
.383c4c	0b		phd		                PHD
.383c4d	8b		phb		                PHB
.383c4e	08		php		                PHP
.383c4f	48		pha		                PHA             ; begin setdbr macro
.383c50	08		php		                PHP
.383c51	e2 20		sep #$20	                SEP #$20        ; set A short
.383c53	a9 00		lda #$00	                LDA #0
.383c55	48		pha		                PHA
.383c56	ab		plb		                PLB
.383c57	28		plp		                PLP
.383c58	68		pla		                PLA             ; end setdbr macro
.383c59	48		pha		                PHA             ; begin setdp macro
.383c5a	08		php		                PHP
.383c5b	c2 20		rep #$20	                REP #$20        ; set A long
.383c5d	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.383c60	5b		tcd		                TCD
.383c61	28		plp		                PLP
.383c62	68		pla		                PLA             ; end setdp macro
.383c63	e2 20		sep #$20	                SEP #$20        ; set A short
.383c65	a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.383c67	c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.383c69	f0 0b		beq $383c76	                BEQ sd_getblock                     ; Yes: go to the SDC GETBLOCK routine
.383c6b	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.383c6d					ret_failure
.383c6d	e2 20		sep #$20	                SEP #$20        ; set A short
.383c6f	85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.383c71	28		plp		                PLP
.383c72	ab		plb		                PLB
.383c73	2b		pld		                PLD
.383c74	38		sec		                SEC                                 ; Return failure
.383c75	6b		rtl		                RTL
.383c76	22 06 3d 38	jsl $383d06	sd_getblock     JSL SDCGETBLOCK                     ; Call the SDC GETBLOCK routine
.383c7a					ret_success
.383c7a	e2 20		sep #$20	                SEP #$20        ; set A short
.383c7c	64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.383c7e	28		plp		                PLP
.383c7f	ab		plb		                PLB
.383c80	2b		pld		                PLD
.383c81	38		sec		                SEC                                 ; Return success
.383c82	6b		rtl		                RTL
.383c83					IPUTBLOCK
.383c83	0b		phd		                PHD
.383c84	8b		phb		                PHB
.383c85	08		php		                PHP
.383c86	48		pha		                PHA             ; begin setdbr macro
.383c87	08		php		                PHP
.383c88	e2 20		sep #$20	                SEP #$20        ; set A short
.383c8a	a9 00		lda #$00	                LDA #0
.383c8c	48		pha		                PHA
.383c8d	ab		plb		                PLB
.383c8e	28		plp		                PLP
.383c8f	68		pla		                PLA             ; end setdbr macro
.383c90	48		pha		                PHA             ; begin setdp macro
.383c91	08		php		                PHP
.383c92	c2 20		rep #$20	                REP #$20        ; set A long
.383c94	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.383c97	5b		tcd		                TCD
.383c98	28		plp		                PLP
.383c99	68		pla		                PLA             ; end setdp macro
.383c9a	e2 20		sep #$20	                SEP #$20        ; set A short
.383c9c	a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.383c9e	c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.383ca0	f0 0b		beq $383cad	                BEQ sd_putblock                     ; Yes: go to the SDC PUTBLOCK routine
.383ca2	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.383ca4					ret_failure
.383ca4	e2 20		sep #$20	                SEP #$20        ; set A short
.383ca6	85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.383ca8	28		plp		                PLP
.383ca9	ab		plb		                PLB
.383caa	2b		pld		                PLD
.383cab	38		sec		                SEC                                 ; Return failure
.383cac	6b		rtl		                RTL
.383cad	22 9b 3d 38	jsl $383d9b	sd_putblock     JSL SDCPUTBLOCK                     ; Call the SDC PUTBLOCK routine
.383cb1					ret_success
.383cb1	e2 20		sep #$20	                SEP #$20        ; set A short
.383cb3	64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.383cb5	28		plp		                PLP
.383cb6	ab		plb		                PLB
.383cb7	2b		pld		                PLD
.383cb8	38		sec		                SEC                                 ; Return success
.383cb9	6b		rtl		                RTL
.383cba					SDCWAITBUSY
.383cba	08		php		                PHP
.383cbb	e2 20		sep #$20	                SEP #$20        ; set A short
.383cbd	af 04 ea af	lda $afea04	wait_xact       LDA @l SDC_TRANS_STATUS_REG         ; Wait for the transaction to complete
.383cc1	29 01		and #$01	                AND #SDC_TRANS_BUSY
.383cc3	c9 01		cmp #$01	                CMP #SDC_TRANS_BUSY
.383cc5	f0 f6		beq $383cbd	                BEQ wait_xact
.383cc7	28		plp		                PLP
.383cc8	6b		rtl		                RTL
.383cc9	0b		phd		SDCINIT         PHD
.383cca	8b		phb		                PHB
.383ccb	08		php		                PHP
.383ccc	48		pha		                PHA             ; begin setdbr macro
.383ccd	08		php		                PHP
.383cce	e2 20		sep #$20	                SEP #$20        ; set A short
.383cd0	a9 00		lda #$00	                LDA #0
.383cd2	48		pha		                PHA
.383cd3	ab		plb		                PLB
.383cd4	28		plp		                PLP
.383cd5	68		pla		                PLA             ; end setdbr macro
.383cd6	48		pha		                PHA             ; begin setdp macro
.383cd7	08		php		                PHP
.383cd8	c2 20		rep #$20	                REP #$20        ; set A long
.383cda	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.383cdd	5b		tcd		                TCD
.383cde	28		plp		                PLP
.383cdf	68		pla		                PLA             ; end setdp macro
.383ce0	e2 20		sep #$20	                SEP #$20        ; set A short
.383ce2	a9 01		lda #$01	                LDA #SDC_TRANS_INIT_SD
.383ce4	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG           ; Set Init SD
.383ce8	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.383cea	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.383cee	22 ba 3c 38	jsl $383cba	                JSL SDCWAITBUSY                     ; Wait for initialization to complete
.383cf2	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.383cf6	d0 07		bne $383cff	                BNE ret_error                       ; Is there one? Process the error
.383cf8	64 00		stz $0320	ret_success     STZ BIOS_STATUS
.383cfa	28		plp		                PLP
.383cfb	ab		plb		                PLB
.383cfc	2b		pld		                PLD
.383cfd	38		sec		                SEC
.383cfe	6b		rtl		                RTL
.383cff	85 00		sta $0320	ret_error       STA BIOS_STATUS
.383d01	28		plp		                PLP
.383d02	ab		plb		                PLB
.383d03	2b		pld		                PLD
.383d04	18		clc		                CLC
.383d05	6b		rtl		                RTL
.383d06					SDCGETBLOCK
.383d06	0b		phd		                PHD
.383d07	8b		phb		                PHB
.383d08	08		php		                PHP
.383d09	48		pha		                PHA             ; begin setdbr macro
.383d0a	08		php		                PHP
.383d0b	e2 20		sep #$20	                SEP #$20        ; set A short
.383d0d	a9 00		lda #$00	                LDA #0
.383d0f	48		pha		                PHA
.383d10	ab		plb		                PLB
.383d11	28		plp		                PLP
.383d12	68		pla		                PLA             ; end setdbr macro
.383d13	48		pha		                PHA             ; begin setdp macro
.383d14	08		php		                PHP
.383d15	c2 20		rep #$20	                REP #$20        ; set A long
.383d17	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.383d1a	5b		tcd		                TCD
.383d1b	28		plp		                PLP
.383d1c	68		pla		                PLA             ; end setdp macro
.383d1d	e2 20		sep #$20	                SEP #$20        ; set A short
.383d1f	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.383d23	09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.383d25	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.383d29	a9 00		lda #$00	                LDA #0
.383d2b	8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.383d2f	a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to read
.383d31	0a		asl a		                ASL A
.383d32	8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.383d36	a5 03		lda $0323	                LDA BIOS_LBA+1
.383d38	2a		rol a		                ROL A
.383d39	8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.383d3d	a5 04		lda $0324	                LDA BIOS_LBA+2
.383d3f	2a		rol a		                ROL A
.383d40	8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.383d44	a9 02		lda #$02	                LDA #SDC_TRANS_READ_BLK             ; Set the transaction to READ
.383d46	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.383d4a	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.383d4c	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.383d50	22 ba 3c 38	jsl $383cba	                JSL SDCWAITBUSY                     ; Wait for transaction to complete
.383d54	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.383d58	d0 30		bne $383d8a	                BNE ret_error                       ; Is there one? Process the error
.383d5a	e2 20		sep #$20	                SEP #$20        ; set A short
.383d5c	af 13 ea af	lda $afea13	                LDA @l SDC_RX_FIFO_DATA_CNT_LO      ; Record the number of bytes read
.383d60	85 0a		sta $032a	                STA BIOS_FIFO_COUNT
.383d62	af 12 ea af	lda $afea12	                LDA @l SDC_RX_FIFO_DATA_CNT_HI
.383d66	85 0b		sta $032b	                STA BIOS_FIFO_COUNT+1
.383d68	c2 10		rep #$10	                REP #$10        ; set X long
.383d6a	a0 00 00	ldy #$0000	                LDY #0
.383d6d	af 10 ea af	lda $afea10	loop_rd         LDA @l SDC_RX_FIFO_DATA_REG         ; Get the byte...
.383d71	97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y               ; Save it to the buffer
.383d73	c8		iny		                INY                                 ; Advance to the next byte
.383d74	c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.383d77	d0 f4		bne $383d6d	                BNE loop_rd                         ; No: keep reading
.383d79	64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.383d7b	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.383d7f	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.383d81	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.383d85	28		plp		                PLP
.383d86	ab		plb		                PLB
.383d87	2b		pld		                PLD
.383d88	38		sec		                SEC
.383d89	6b		rtl		                RTL
.383d8a	85 00		sta $0320	ret_error       STA BIOS_STATUS
.383d8c	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.383d90	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.383d92	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.383d96	28		plp		                PLP
.383d97	ab		plb		                PLB
.383d98	2b		pld		                PLD
.383d99	18		clc		                CLC
.383d9a	6b		rtl		                RTL
.383d9b					SDCPUTBLOCK
.383d9b	0b		phd		                PHD
.383d9c	8b		phb		                PHB
.383d9d	08		php		                PHP
.383d9e	48		pha		                PHA             ; begin setdbr macro
.383d9f	08		php		                PHP
.383da0	e2 20		sep #$20	                SEP #$20        ; set A short
.383da2	a9 00		lda #$00	                LDA #0
.383da4	48		pha		                PHA
.383da5	ab		plb		                PLB
.383da6	28		plp		                PLP
.383da7	68		pla		                PLA             ; end setdbr macro
.383da8	48		pha		                PHA             ; begin setdp macro
.383da9	08		php		                PHP
.383daa	c2 20		rep #$20	                REP #$20        ; set A long
.383dac	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.383daf	5b		tcd		                TCD
.383db0	28		plp		                PLP
.383db1	68		pla		                PLA             ; end setdp macro
.383db2	e2 20		sep #$20	                SEP #$20        ; set A short
.383db4	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.383db8	09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.383dba	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.383dbe	c2 10		rep #$10	                REP #$10        ; set X long
.383dc0	a0 00 00	ldy #$0000	                LDY #0
.383dc3	b7 06		lda [$0326],y	loop_wr         LDA [BIOS_BUFF_PTR],Y               ; Get the byte...
.383dc5	8f 20 ea af	sta $afea20	                STA @l SDC_TX_FIFO_DATA_REG         ; Save it to the SDC
.383dc9	c8		iny		                INY                                 ; Advance to the next byte
.383dca	c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.383dcd	d0 f4		bne $383dc3	                BNE loop_wr                         ; No: keep writing
.383dcf	a9 00		lda #$00	                LDA #0
.383dd1	8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.383dd5	a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to write
.383dd7	0a		asl a		                ASL A
.383dd8	8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.383ddc	a5 03		lda $0323	                LDA BIOS_LBA+1
.383dde	2a		rol a		                ROL A
.383ddf	8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.383de3	a5 04		lda $0324	                LDA BIOS_LBA+2
.383de5	2a		rol a		                ROL A
.383de6	8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.383dea	a9 03		lda #$03	                LDA #SDC_TRANS_WRITE_BLK            ; Set the transaction to WRITE
.383dec	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.383df0	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.383df2	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.383df6	22 ba 3c 38	jsl $383cba	                JSL SDCWAITBUSY                     ; Wait for transaction to complete
.383dfa	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.383dfe	d0 11		bne $383e11	                BNE ret_error                       ; Is there one? Process the error
.383e00	64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.383e02	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.383e06	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.383e08	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.383e0c	28		plp		                PLP
.383e0d	ab		plb		                PLB
.383e0e	2b		pld		                PLD
.383e0f	38		sec		                SEC
.383e10	6b		rtl		                RTL
.383e11	85 00		sta $0320	ret_error       STA BIOS_STATUS
.383e13	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.383e17	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.383e19	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.383e1d	28		plp		                PLP
.383e1e	ab		plb		                PLB
.383e1f	2b		pld		                PLD
.383e20	18		clc		                CLC
.383e21	6b		rtl		                RTL

;******  Return to file: src/sdos_fat.asm

.0000					DIRENTRY
>0000					SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b					ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c					IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e					CREATE_TIME             .word ?         ; $0E - Creation time
>0010					CREATE_DATE             .word ?         ; $10 - Creation date
>0012					ACCESS_DATE             .word ?         ; $12 - Last access date
>0014					CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016					MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018					MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a					CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c					SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01					DOS_ATTR_RO = $01                       ; File is read-only
=$02					DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04					DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08					DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10					DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20					DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f					DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
.0000					FILEDESC
>0000					STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001					DEV                 .byte ?             ; The ID of the device holding the file
>0002					PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006					CLUSTER             .dword ?            ; The current cluster of the file.
>000a					FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e					BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012					SIZE                .dword ?            ; The size of the file
>0016					CREATE_DATE         .word ?             ; The creation date of the file
>0018					CREATE_TIME         .word ?             ; The creation time of the file
>001a					MODIFIED_DATE       .word ?             ; The modification date of the file
>001c					MODIFIED_TIME       .word ?             ; The modification time of the file
=$01					FD_STAT_READ = $01                      ; The file is readable
=$02					FD_STAT_WRITE = $02                     ; The file is writable
=$40					FD_STAT_OPEN = $40                      ; The file is open
=$60					FD_STAT_ERROR = $60                     ; The file is in an error condition
=$80					FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
=$0fffffff				FAT_LAST_CLUSTER = $0FFFFFFF            ; Code to mark the last cluster of a file
=1					VOLUMEMAX = 1                           ; The maximum number of mounted volumes we support
=32					DOS_DIR_ENTRY_SIZE = 32                 ; The size of a directory entry
=512					DOS_SECTOR_SIZE = 512                   ; The size of a sector
=$e5					DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
=446					PART0_OFF = 446                         ; Offset to the first partition in the MBR
=4					PART_TYPE_OFF = 4                       ; Offset to the partition's type
=8					PART_LBA_OFF = 8                        ; Offset to the LBA of the first sector of the partition
=13					PART_SECT_COUNT_OFF = 13                ; Offset to the sector count of the partition
=510					MBR_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=$0c					PART_TYPE_FAT32_LBA = $0C               ; Patition type: FAT32 with LBA addressing
=$0b					BPB_BYTEPERSEC_OFF = $0B                ; Offset in the BPB sector to the Bytes Per Sector
=$0d					BPB_SECPERCLUS_OFF = $0D                ; Offset in the BPB sector to the Sectors Per Cluster
=$0e					BPB_RSRVCLUS_OFF = $0E                  ; Offset in the BPB sector to the Number of Reserved Clusters
=$10					BPB_NUMFAT_OFF = $10                    ; Offset in the BPB sector to the Number of FATs
=$24					BPB_SECPERFAT_OFF = $24                 ; Offset in the BPB sector to the Sectors Per FAT
=$2c					BPB_ROOTCLUS_OFF = $2C                  ; Offset in the BPB sector to the Root Cluster Number
=510					BPB_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=1					DOS_ERR_READ = 1                        ; We could not read a sector, check BIOS_STATUS for details
=2					DOS_ERR_NOTMBR = 2                      ; We could not find the MBR
=3					DOS_ERR_NOFAT32 = 3                     ; We could not find a FAT32 parition using LBA
=4					DOS_ERR_NOINIT = 4                      ; We could not INIT the block device
=5					DOS_ERR_VOLID = 5                       ; Volume ID sector could not be loaded
=6					DOS_ERR_FAT = 6                         ; Can't scan the FAT for some reason
=7					DOS_ERR_BADPATH = 7                     ; The path was badly formatted
=8					DOS_ERR_NODIR = 8                       ; Could not read the directory
=9					DOS_ERR_NOTFOUND = 9                    ; File/directory requested was not found
=10					DOS_ERR_NOCLUSTER = 10                  ; There are no more clusters
=11					DOS_ERR_FILEEXISTS = 11                 ; There is already a file of that name
=12					DOS_ERR_NOTOPEN = 12                    ; File has not been open
=13					DOS_ERR_NOTREAD = 13                    ; File is not open for reading
=14					DOS_ERR_NOTWRITE = 14                   ; File is not open for writing
=15					DOS_ERR_OPEN = 15                       ; File is already open
=16					DOS_ERR_PGXSIG = 16                     ; File does not have the PGX signature
=17					DOS_ERR_NOEXEC = 17                     ; File does is not an executable format
=$37e000				DOS_HIGH_VARIABLES      = $37E000
=$37e000				DEVICE                  = $37E000       ; 1 byte - The number of the block device
=$37e001				PARTITION               = $37E001       ; 1 byte - The number of the partitions on the device
=$37e002				SECTORS_PER_CLUSTER     = $37E002       ; 1 byte - The number of sectors in a cluster
=$37e004				FIRSTSECTOR             = $37E004       ; 4 bytes - The LBA of the first sector on the volume
=$37e008				SECTORCOUNT             = $37E008       ; 4 bytes - The number of sectors in the volume
=$37e00c				NUM_RSRV_SEC            = $37E00C       ; 2 bytes - The number of hidden or reserved sectors
=$37e00e				CLUSTER_SIZE            = $37E00E       ; 2 bytes - The size of a cluster in bytes
=$37e010				SEC_PER_FAT             = $37E010       ; 4 bytes - The number of sectors per FAT
=$37e014				FAT_BEGIN_LBA           = $37E014       ; 4 bytes - The LBA of the first sector of the FAT
=$37e018				CLUSTER_BEGIN_LBA       = $37E018       ; 4 bytes - The LBA of the first cluster in the storage area
=$37e01c				ROOT_DIR_FIRST_CLUSTER  = $37E01C       ; 4 bytes - The number of the first cluster in the root directory
=$37e020				DOS_CURR_CLUS           = $37E020       ; 4 bytes - The current cluster (for delete)
=$37e024				DOS_NEXT_CLUS           = $37E024       ; 4 bytes - The next cluster in a file (for delete)
=$37e028				DOS_DIR_CLUS_ID         = $37E028       ; 4 bytes - The cluster ID of the current directory record
=$37e02c				DOS_NEW_CLUSTER         = $37E02C       ; 4 bytes - Space to store a newly written cluster ID
=$37e030				DOS_SHORT_NAME          = $37E030       ; 11 bytes - The short name for a desired file
=$37e140				DOS_DIR_CLUSTER         = $37E140       ; 512 bytes - A buffer for directory entries
=$37e340				DOS_DIR_CLUSTER_END     = $37E340       ; The byte just past the end of the directory cluster buffer
=$37e340				DOS_SECTOR              = $37E340       ; 512 bytes - A buffer for block device read/write
=$37e540				DOS_SECTOR_END          = $37E540       ; The byte just past the end of the cluster buffer
.383e22					DOS_MOUNT
.383e22	08		php		                PHP
.383e23	e2 20		sep #$20	                SEP #$20        ; set A short
.383e25	a5 01		lda $0321	                LDA BIOS_DEV            ; Check the device
.383e27	c9 02		cmp #$02	                CMP #BIOS_DEV_SD        ; Is it the SDC?
.383e29	d0 0b		bne $383e36	                BNE get_mbr
.383e2b	22 c9 3c 38	jsl $383cc9	                JSL SDCINIT             ; Yes: Initialize access to the SDC
.383e2f	b0 05		bcs $383e36	                BCS get_mbr             ; Continue if success
.383e31	a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.383e33	82 20 01	brl $383f56	                BRL ret_failure
.383e36					get_mbr
.383e36	c2 30		rep #$30	                REP #$30        ; set A&X long
.383e38	64 02		stz $0322	                STZ BIOS_LBA            ; Get the MBR
.383e3a	64 04		stz $0324	                STZ BIOS_LBA+2
.383e3c	a9 40 e3	lda #$e340	                LDA #<>DOS_SECTOR       ; Into DOS_SECTOR
.383e3f	85 06		sta $0326	                STA BIOS_BUFF_PTR
.383e41	a9 37 00	lda #$0037	                LDA #`DOS_SECTOR
.383e44	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.383e46	22 44 10 38	jsl $381044	                JSL GETBLOCK            ; Try to read the MBR
.383e4a	b0 07		bcs $383e53	                BCS chk_signature       ; If success, check the signature bytes
.383e4c	e2 20		sep #$20	                SEP #$20        ; set A short
.383e4e	a9 01		lda #$01	                LDA #DOS_ERR_READ       ; Otherwise: report we couldn't read the first sector
.383e50	82 03 01	brl $383f56	                BRL ret_failure
.383e53					chk_signature
.383e53	e2 20		sep #$20	                SEP #$20        ; set A short
.383e55	ad 3e e5	lda $37e53e	                LDA DOS_SECTOR+MBR_SIGNATURE
.383e58	c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.383e5a	d0 07		bne $383e63	                BNE not_mbr             ; No: signal we could find the MBR
.383e5c	ad 3f e5	lda $37e53f	                LDA DOS_SECTOR+MBR_SIGNATURE+1
.383e5f	c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.383e61	f0 05		beq $383e68	                BEQ chk_part_type       ; Yes: we have an MBR
.383e63	a9 02		lda #$02	not_mbr         LDA #DOS_ERR_NOTMBR     ; Return that we didn't find the MBR
.383e65	82 ee 00	brl $383f56	                BRL ret_failure
.383e68	ad 02 e5	lda $37e502	chk_part_type   LDA DOS_SECTOR+PART0_OFF+PART_TYPE_OFF
.383e6b	c9 0c		cmp #$0c	                CMP #PART_TYPE_FAT32_LBA
.383e6d	f0 05		beq $383e74	                BEQ get_LBA             ; Is FAT32 with LBA?
.383e6f	a9 03		lda #$03	                LDA #DOS_ERR_NOFAT32    ; No: return No FAT32 found error
.383e71	82 e2 00	brl $383f56	                BRL ret_failure
.383e74					get_LBA
.383e74	c2 20		rep #$20	                REP #$20        ; set A long
.383e76	ad 06 e5	lda $37e506	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF
.383e79	8d 04 e0	sta $37e004	                STA FIRSTSECTOR
.383e7c	ad 08 e5	lda $37e508	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF+2
.383e7f	8d 06 e0	sta $37e006	                STA FIRSTSECTOR+2
.383e82	ad 0b e5	lda $37e50b	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF
.383e85	8d 08 e0	sta $37e008	                STA SECTORCOUNT
.383e88	ad 0d e5	lda $37e50d	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF+2
.383e8b	8d 0a e0	sta $37e00a	                STA SECTORCOUNT+2
.383e8e	e2 20		sep #$20	                SEP #$20        ; set A short
.383e90	a5 01		lda $0321	                LDA BIOS_DEV            ; Save the device number
.383e92	8d 00 e0	sta $37e000	                STA DEVICE
.383e95	a9 00		lda #$00	                LDA #0
.383e97	8d 01 e0	sta $37e001	                STA PARTITION    ; For the moment, we only support the first partition
.383e9a	c2 20		rep #$20	                REP #$20        ; set A long
.383e9c	a9 40 e3	lda #$e340	                LDA #<>DOS_SECTOR
.383e9f	85 06		sta $0326	                STA BIOS_BUFF_PTR
.383ea1	a9 37 00	lda #$0037	                LDA #`DOS_SECTOR
.383ea4	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.383ea6	ad 04 e0	lda $37e004	                LDA FIRSTSECTOR
.383ea9	85 02		sta $0322	                STA BIOS_LBA
.383eab	ad 06 e0	lda $37e006	                LDA FIRSTSECTOR+2
.383eae	85 04		sta $0324	                STA BIOS_LBA+2
.383eb0	22 44 10 38	jsl $381044	                JSL GETBLOCK            ; Attempt to load the volume ID
.383eb4	b0 1c		bcs $383ed2	                BCS get_first_sec       ; Got it? Start parsing it
.383eb6	e2 20		sep #$20	                SEP #$20        ; set A short
.383eb8	a9 05		lda #$05	                LDA #DOS_ERR_VOLID      ; Otherwise: return an error
.383eba	82 99 00	brl $383f56	                BRL ret_failure
.383ebd					chk_bpb_sig
.383ebd	e2 20		sep #$20	                SEP #$20        ; set A short
.383ebf	ad 3e e5	lda $37e53e	                LDA DOS_SECTOR+BPB_SIGNATURE
.383ec2	c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.383ec4	d0 07		bne $383ecd	                BNE not_bpb             ; No: signal we could find the volume ID
.383ec6	ad 3f e5	lda $37e53f	                LDA DOS_SECTOR+BPB_SIGNATURE+1
.383ec9	c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.383ecb	f0 05		beq $383ed2	                BEQ get_first_sec       ; Yes: we have an volume ID
.383ecd	a9 05		lda #$05	not_bpb         LDA #DOS_ERR_VOLID      ; Return that we didn't find the Volume ID (BPB)
.383ecf	82 84 00	brl $383f56	                BRL ret_failure
.383ed2					get_first_sec
.383ed2	c2 20		rep #$20	                REP #$20        ; set A long
.383ed4	ad 6c e3	lda $37e36c	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF
.383ed7	8d 1c e0	sta $37e01c	                STA ROOT_DIR_FIRST_CLUSTER
.383eda	ad 6e e3	lda $37e36e	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF+2
.383edd	8d 1e e0	sta $37e01e	                STA ROOT_DIR_FIRST_CLUSTER+2
.383ee0	ad 4e e3	lda $37e34e	                LDA DOS_SECTOR+BPB_RSRVCLUS_OFF
.383ee3	8d 0c e0	sta $37e00c	                STA NUM_RSRV_SEC
.383ee6	18		clc		                CLC                     ; fat_begin_lba := FirstSector + Number_of_Reserved_Sectors
.383ee7	ad 04 e0	lda $37e004	                LDA FIRSTSECTOR
.383eea	6d 0c e0	adc $37e00c	                ADC NUM_RSRV_SEC
.383eed	8d 14 e0	sta $37e014	                STA FAT_BEGIN_LBA
.383ef0	ad 06 e0	lda $37e006	                LDA FIRSTSECTOR+2
.383ef3	69 00 00	adc #$0000	                ADC #0
.383ef6	8d 16 e0	sta $37e016	                STA FAT_BEGIN_LBA+2
.383ef9	ad 64 e3	lda $37e364	                LDA DOS_SECTOR+BPB_SECPERFAT_OFF
.383efc	8d 10 e0	sta $37e010	                STA SEC_PER_FAT
.383eff	ad 66 e3	lda $37e366	                LDA DOS_SECTOR+BPB_SECPERFAT_OFF+2
.383f02	8d 12 e0	sta $37e012	                STA SEC_PER_FAT+2
.383f05	ad 10 e0	lda $37e010	                LDA SEC_PER_FAT
.383f08	0a		asl a		                ASL A
.383f09	8d 18 e0	sta $37e018	                STA CLUSTER_BEGIN_LBA
.383f0c	ad 12 e0	lda $37e012	                LDA SEC_PER_FAT+2
.383f0f	2a		rol a		                ROL A
.383f10	8d 1a e0	sta $37e01a	                STA CLUSTER_BEGIN_LBA+2
.383f13	18		clc		                CLC
.383f14	ad 18 e0	lda $37e018	                LDA CLUSTER_BEGIN_LBA                    ; Sectors Per FAT * 2 + fat_begin_lba
.383f17	6d 14 e0	adc $37e014	                ADC FAT_BEGIN_LBA
.383f1a	8d 18 e0	sta $37e018	                STA CLUSTER_BEGIN_LBA
.383f1d	ad 1a e0	lda $37e01a	                LDA CLUSTER_BEGIN_LBA+2
.383f20	6d 16 e0	adc $37e016	                ADC FAT_BEGIN_LBA+2
.383f23	8d 1a e0	sta $37e01a	                STA CLUSTER_BEGIN_LBA+2
.383f26	e2 20		sep #$20	                SEP #$20        ; set A short
.383f28	ad 4d e3	lda $37e34d	                LDA DOS_SECTOR+BPB_SECPERCLUS_OFF
.383f2b	8d 02 e0	sta $37e002	                STA SECTORS_PER_CLUSTER
.383f2e	c2 20		rep #$20	                REP #$20        ; set A long
.383f30	29 ff 00	and #$00ff	                AND #$00FF
.383f33	48		pha		                PHA                                     ; Save the number of sectors per cluster
.383f34	a9 00 02	lda #$0200	                LDA #<>DOS_SECTOR_SIZE                  ; Default to one sector's worth of bytes
.383f37	8d 0e e0	sta $37e00e	                STA CLUSTER_SIZE
.383f3a	a9 00 00	lda #$0000	                LDA #`DOS_SECTOR_SIZE
.383f3d	8d 10 e0	sta $37e010	                STA CLUSTER_SIZE+2
.383f40	68		pla		                PLA                                     ; Restore the number of sectors per cluster
.383f41	c9 01 00	cmp #$0001	clus_size_loop  CMP #1                                  ; If there's only one cluster, return success
.383f44	f0 09		beq $383f4f	                BEQ ret_success
.383f46	0e 0e e0	asl $37e00e	                ASL CLUSTER_SIZE                        ; Otherwise, multiply the number of bytes by 2
.383f49	2e 10 e0	rol $37e010	                ROL CLUSTER_SIZE+2
.383f4c	4a		lsr a		                LSR A                                   ; And divide the number of sectors by 2
.383f4d	80 f2		bra $383f41	                BRA clus_size_loop
.383f4f					ret_success
.383f4f	e2 20		sep #$20	                SEP #$20        ; set A short
.383f51	64 0e		stz $032e	                STZ DOS_STATUS          ; Set status code to 0
.383f53	28		plp		                PLP
.383f54	38		sec		                SEC
.383f55	6b		rtl		                RTL
.383f56					ret_failure
.383f56	e2 20		sep #$20	                SEP #$20        ; set A short
.383f58	85 0e		sta $032e	                STA DOS_STATUS          ; Save the status code
.383f5a	28		plp		                PLP
.383f5b	18		clc		                CLC
.383f5c	6b		rtl		                RTL
.383f5d					DOS_CALC_LBA
.383f5d	08		php		                PHP
.383f5e	c2 20		rep #$20	                REP #$20        ; set A long
.383f60	38		sec		                SEC
.383f61	a5 10		lda $0330	                LDA DOS_CLUS_ID                     ; cluster - 2
.383f63	e9 02 00	sbc #$0002	                SBC #2
.383f66	85 28		sta $0348	                STA DOS_TEMP
.383f68	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.383f6a	e9 00 00	sbc #$0000	                SBC #0
.383f6d	85 2a		sta $034a	                STA DOS_TEMP+2
.383f6f	e2 10		sep #$10	                SEP #$10        ; set X short
.383f71	ae 02 e0	ldx $37e002	                LDX SECTORS_PER_CLUSTER
.383f74	e0 01		cpx #$01	mult_loop       CPX #1
.383f76	f0 07		beq $383f7f	                BEQ add_offset
.383f78	06 28		asl $0348	                ASL DOS_TEMP
.383f7a	26 28		rol $0348	                ROL DOS_TEMP
.383f7c	ca		dex		                DEX
.383f7d	80 f5		bra $383f74	                BRA mult_loop
.383f7f	18		clc		add_offset      CLC
.383f80	a5 28		lda $0348	                LDA DOS_TEMP                        ; cluster_being_lba + (cluster - 2) * SECTORS_PER_CLUSTER
.383f82	6d 18 e0	adc $37e018	                ADC CLUSTER_BEGIN_LBA
.383f85	85 02		sta $0322	                STA BIOS_LBA
.383f87	a5 2a		lda $034a	                LDA DOS_TEMP+2
.383f89	6d 1a e0	adc $37e01a	                ADC CLUSTER_BEGIN_LBA+2
.383f8c	85 04		sta $0324	                STA BIOS_LBA+2
.383f8e	28		plp		                PLP
.383f8f	6b		rtl		                RTL
.383f90					DOS_GETCLUSTER
.383f90	08		php		                PHP
.383f91	c2 20		rep #$20	                REP #$20        ; set A long
.383f93	a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.383f95	85 06		sta $0326	                STA BIOS_BUFF_PTR
.383f97	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.383f99	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.383f9b	22 5d 3f 38	jsl $383f5d	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.383f9f	22 44 10 38	jsl $381044	                JSL GETBLOCK                        ; Get the first block of the cluster
.383fa3	90 07		bcc $383fac	                BCC ret_failure
.383fa5					ret_success
.383fa5	e2 20		sep #$20	                SEP #$20        ; set A short
.383fa7	64 0e		stz $032e	                STZ DOS_STATUS
.383fa9	28		plp		                PLP
.383faa	38		sec		                SEC
.383fab	6b		rtl		                RTL
.383fac					ret_failure
.383fac	e2 20		sep #$20	                SEP #$20        ; set A short
.383fae	85 0e		sta $032e	                STA DOS_STATUS
.383fb0	28		plp		                PLP
.383fb1	18		clc		                CLC
.383fb2	6b		rtl		                RTL
.383fb3					DOS_PUTCLUSTER
.383fb3	08		php		                PHP
.383fb4	c2 20		rep #$20	                REP #$20        ; set A long
.383fb6	a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.383fb8	85 06		sta $0326	                STA BIOS_BUFF_PTR
.383fba	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.383fbc	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.383fbe	22 5d 3f 38	jsl $383f5d	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.383fc2	22 24 10 38	jsl $381024	                JSL PUTBLOCK                        ; PUT the first block of the cluster
.383fc6	90 07		bcc $383fcf	                BCC ret_failure
.383fc8					ret_success
.383fc8	e2 20		sep #$20	                SEP #$20        ; set A short
.383fca	64 0e		stz $032e	                STZ DOS_STATUS
.383fcc	28		plp		                PLP
.383fcd	38		sec		                SEC
.383fce	6b		rtl		                RTL
.383fcf					ret_failure
.383fcf	e2 20		sep #$20	                SEP #$20        ; set A short
.383fd1	85 0e		sta $032e	                STA DOS_STATUS
.383fd3	28		plp		                PLP
.383fd4	18		clc		                CLC
.383fd5	6b		rtl		                RTL
.383fd6					DOS_DIRFIRST
.383fd6	08		php		                PHP
.383fd7	c2 20		rep #$20	                REP #$20        ; set A long
.383fd9	a9 40 e1	lda #$e140	                LDA #<>DOS_DIR_CLUSTER
.383fdc	85 18		sta $0338	                STA DOS_DIR_PTR
.383fde	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER
.383fe1	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.383fe3	28		plp		                PLP
.383fe4	6b		rtl		                RTL
.383fe5					DOS_DIRNEXT
.383fe5	08		php		                PHP
.383fe6	c2 20		rep #$20	                REP #$20        ; set A long
.383fe8	18		clc		                CLC                         ; Advance the directory entry pointer to the next entry
.383fe9	a5 18		lda $0338	                LDA DOS_DIR_PTR
.383feb	69 20 00	adc #$0020	                ADC #DOS_DIR_ENTRY_SIZE
.383fee	85 18		sta $0338	                STA DOS_DIR_PTR
.383ff0	a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.383ff2	69 00 00	adc #$0000	                ADC #0
.383ff5	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.383ff7	38		sec		                SEC                         ; Check to see if we've reached the end of the sector buffer
.383ff8	a9 40 e3	lda #$e340	                LDA #<>DOS_DIR_CLUSTER_END
.383ffb	e5 18		sbc $0338	                SBC DOS_DIR_PTR
.383ffd	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER_END
.384000	e5 1a		sbc $033a	                SBC DOS_DIR_PTR+2
.384002	30 03		bmi $384007	                BMI ret_failure             ; Yes: return failure
.384004	28		plp		ret_success     PLP
.384005	38		sec		                SEC
.384006	6b		rtl		                RTL
.384007	28		plp		ret_failure     PLP
.384008	18		clc		                CLC
.384009	6b		rtl		                RTL
.38400a					DOS_PARSE_PATH
.38400a	08		php		                PHP
.38400b	c2 10		rep #$10	                REP #$10        ; set X long
.38400d	e2 20		sep #$20	                SEP #$20        ; set A short
.38400f	a2 00 00	ldx #$0000	                LDX #0
.384012	b5 e0		lda $0400,x	upcase_loop     LDA DOS_PATH_BUFF,X     ; Get the character
.384014	f0 1b		beq $384031	                BEQ clr_name            ; If it's NULL, the path is upper case, clear the name
.384016	c9 20		cmp #$20	                CMP #' '                ; Is a control character?
.384018	b0 05		bcs $38401f	                BGE check_case          ; No: check the case
.38401a	a9 07		lda #$07	                LDA #DOS_ERR_BADPATH    ; Yes: return a bad path error
.38401c	82 51 00	brl $384070	                BRL ret_failure
.38401f	c9 61		cmp #$61	check_case      CMP #'a'                ; Is the character lower case?
.384021	90 08		bcc $38402b	                BLT next_char
.384023	c9 7b		cmp #$7b	                CMP #'z'+1
.384025	b0 04		bcs $38402b	                BGE next_char
.384027	29 5f		and #$5f	                AND #%01011111          ; Yes: Convert to uppercase
.384029	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.38402b	e8		inx		next_char       INX                     ; Move to the next character
.38402c	e0 00 01	cpx #$0100	                CPX #$100
.38402f	d0 e1		bne $384012	                BNE upcase_loop
.384031	a0 00 00	ldy #$0000	clr_name        LDY #0                  ; Set the short name to blanks
.384034	a9 20		lda #$20	                LDA #' '
.384036	99 30 e0	sta $37e030,y	clr_loop        STA DOS_SHORT_NAME,Y
.384039	c8		iny		                INY
.38403a	c0 0b 00	cpy #$000b	                CPY #11
.38403d	d0 f7		bne $384036	                BNE clr_loop
.38403f	a2 00 00	ldx #$0000	                LDX #0
.384042	a0 00 00	ldy #$0000	                LDY #0
.384045	b5 e0		lda $0400,x	cpy_name_loop   LDA DOS_PATH_BUFF,X     ; Get the character of the name
.384047	f0 20		beq $384069	                BEQ ret_success         ; If NULL: we've finished parsing the path
.384049	c9 2e		cmp #$2e	                CMP #'.'                ; If it's a dot, we've finished the name part
.38404b	f0 0a		beq $384057	                BEQ cpy_ext             ; And move to the extension
.38404d	99 30 e0	sta $37e030,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, store it to the name portion
.384050	e8		inx		                INX
.384051	c8		iny		                INY                     ; Move to the next character
.384052	c0 08 00	cpy #$0008	                CPY #8                  ; Have we processed 8?
.384055	d0 ee		bne $384045	                BNE cpy_name_loop       ; No: process this one
.384057	e8		inx		cpy_ext         INX                     ; Skip the dot
.384058	a0 08 00	ldy #$0008	                LDY #8
.38405b	b5 e0		lda $0400,x	cpy_ext_loop    LDA DOS_PATH_BUFF,X     ; Get the character of the extension
.38405d	f0 0a		beq $384069	                BEQ ret_success         ; If it's NULL, we've finished
.38405f	99 30 e0	sta $37e030,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, copy it to the short name
.384062	e8		inx		                INX
.384063	c8		iny		                INY                     ; Move to the next character
.384064	c0 0b 00	cpy #$000b	                CPY #11                 ; Have we processed the three ext characters?
.384067	d0 f2		bne $38405b	                BNE cpy_ext_loop        ; No: process this one
.384069					ret_success
.384069	e2 20		sep #$20	                SEP #$20        ; set A short
.38406b	64 0e		stz $032e	                STZ DOS_STATUS
.38406d	28		plp		                PLP
.38406e	38		sec		                SEC
.38406f	6b		rtl		                RTL
.384070					ret_failure
.384070	e2 20		sep #$20	                SEP #$20        ; set A short
.384072	85 0e		sta $032e	                STA DOS_STATUS
.384074	28		plp		                PLP
.384075	18		clc		                CLC
.384076	6b		rtl		                RTL
.384077					DOS_FINDFILE
.384077	08		php		                PHP
.384078	c2 30		rep #$30	                REP #$30        ; set A&X long
.38407a	22 0a 40 38	jsl $38400a	                JSL DOS_PARSE_PATH              ; Break out the path into its components
.38407e	b0 03		bcs $384083	                BCS mount                       ; If success: try to open the directory
.384080	28		plp		pass_failure    PLP                             ; If failure, just pass the failure back up
.384081	18		clc		                CLC
.384082	6b		rtl		                RTL
.384083					mount
.384083	e2 20		sep #$20	                SEP #$20        ; set A short
.384085	a9 02		lda #$02	                LDA #BIOS_DEV_SD                ; Mount the drive... defaults to SDC
.384087	85 01		sta $0321	                STA BIOS_DEV                    ; TODO: set from DOS_PARSE_PATH
.384089	22 22 3e 38	jsl $383e22	                JSL DOS_MOUNT
.38408d					get_directory
.38408d	c2 20		rep #$20	                REP #$20        ; set A long
.38408f	a9 40 e1	lda #$e140	                LDA #<>DOS_DIR_CLUSTER          ; Load the directory cluster into the directory buffer
.384092	85 1c		sta $033c	                STA DOS_BUFF_PTR
.384094	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER
.384097	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.384099	ad 1c e0	lda $37e01c	                LDA ROOT_DIR_FIRST_CLUSTER      ; Queue up loading the first sector of the root directory
.38409c	85 10		sta $0330	                STA DOS_CLUS_ID
.38409e	ad 1e e0	lda $37e01e	                LDA ROOT_DIR_FIRST_CLUSTER+2
.3840a1	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3840a3	22 90 3f 38	jsl $383f90	                JSL DOS_GETCLUSTER              ; Get the directory
.3840a7	b0 07		bcs $3840b0	                BCS scan_entries                ; If success: start scanning the directory entries
.3840a9	e2 20		sep #$20	                SEP #$20        ; set A short
.3840ab	a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Otherwise: return a no directory error
.3840ad	82 5f 00	brl $38410f	                BRL ret_failure
.3840b0	22 d6 3f 38	jsl $383fd6	scan_entries    JSL DOS_DIRFIRST                ; Move the DIR pointer to the beginning of the sector
.3840b4					scan_loop
.3840b4	e2 20		sep #$20	                SEP #$20        ; set A short
.3840b6	a0 00 00	ldy #$0000	                LDY #0
.3840b9	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y             ; Check the directory entry
.3840bb	d0 05		bne $3840c2	                BNE chk_unused                  ; If there's an entry, check to see if it's unused
.3840bd	a9 09		lda #$09	                LDA #DOS_ERR_NOTFOUND           ; If end-of-directory, we couldn't find a match
.3840bf	82 4d 00	brl $38410f	                BRL ret_failure
.3840c2	c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED         ; If it's unused...
.3840c4	f0 25		beq $3840eb	                BEQ next_entry                  ; Go to the next entry
.3840c6	a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE         ; Check the entry's attributes
.3840c9	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3840cb	89 08		bit #$08	                BIT #DOS_ATTR_VOLUME            ; Is it a volume name?
.3840cd	d0 1c		bne $3840eb	                BNE next_entry                  ; Yes: skip it!
.3840cf	29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME
.3840d1	c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME          ; Is it a long name field?
.3840d3	f0 16		beq $3840eb	                BEQ next_entry                  ; Yes: skip it!
.3840d5	a2 00 00	ldx #$0000	                LDX #0
.3840d8	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.3840db	b7 18		lda [$0338],y	scan_cmp_loop   LDA [DOS_DIR_PTR],Y             ; Get the X'th character of the entry
.3840dd	dd 30 e0	cmp $37e030,x	                CMP DOS_SHORT_NAME,X            ; And compare to the X'th character of the name we want
.3840e0	d0 09		bne $3840eb	                BNE next_entry                  ; If not equal: try the next entry
.3840e2	c8		iny		                INY                             ; Advance to the next character
.3840e3	e8		inx		                INX
.3840e4	e0 0b 00	cpx #$000b	                CPX #11                         ; Did we reach the end of the names?
.3840e7	f0 2d		beq $384116	                BEQ match                       ; Yes: we have a match!
.3840e9	80 f0		bra $3840db	                BRA scan_cmp_loop               ; No: keep checking
.3840eb	22 e5 3f 38	jsl $383fe5	next_entry      JSL DOS_DIRNEXT                 ; Try to get the next directory entry
.3840ef	82 c2 ff	brl $3840b4	                BRL scan_loop                   ; If found: keep scanning
.3840f2	c2 20		rep #$20	                REP #$20        ; set A long
.3840f4	22 86 41 38	jsl $384186	                JSL NEXTCLUSTER32               ; Move to the next cluster of the directory
.3840f8	a9 40 e1	lda #$e140	set_buff_ptr    LDA #<>DOS_DIR_CLUSTER          ; Load the directory cluster into the directory buffer
.3840fb	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3840fd	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER
.384100	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.384102	e2 20		sep #$20	                SEP #$20        ; set A short
.384104	22 90 3f 38	jsl $383f90	                JSL DOS_GETCLUSTER              ; Attempt to load the directory cluster
.384108	90 03		bcc $38410d	                BCC bad_dir                     ; If failed: return an error
.38410a	82 a3 ff	brl $3840b0	                BRL scan_entries                ; If loaded: scan it
.38410d	a9 08		lda #$08	bad_dir         LDA #DOS_ERR_NODIR              ; Otherwise: fail with a NODIR error (maybe something else is better)
.38410f					ret_failure
.38410f	e2 20		sep #$20	                SEP #$20        ; set A short
.384111	85 0e		sta $032e	                STA DOS_STATUS
.384113	28		plp		                PLP
.384114	18		clc		                CLC
.384115	6b		rtl		                RTL
.384116					match
.384116	c2 20		rep #$20	                REP #$20        ; set A long
.384118	a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Save the ID of the directory cluster for later use
.38411a	8d 28 e0	sta $37e028	                STA DOS_DIR_CLUS_ID
.38411d	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.38411f	8d 2a e0	sta $37e02a	                STA DOS_DIR_CLUS_ID+2
.384122	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L         ; Copy the cluster number from the directory entry
.384125	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.384127	85 10		sta $0330	                STA DOS_CLUS_ID                 ; To DOS_CLUS_ID
.384129	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.38412c	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.38412e	85 12		sta $0332	                STA DOS_CLUS_ID+2
.384130					ret_success
.384130	e2 20		sep #$20	                SEP #$20        ; set A short
.384132	64 0e		stz $032e	                STZ DOS_STATUS
.384134	28		plp		                PLP
.384135	38		sec		                SEC
.384136	6b		rtl		                RTL
.384137					FATFORCLUSTER32
.384137	c2 30		rep #$30	                REP #$30        ; set A&X long
.384139	a5 10		lda $0330	                LDA DOS_CLUS_ID
.38413b	85 24		sta $0344	                STA DOS_FAT_LBA
.38413d	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.38413f	85 26		sta $0346	                STA DOS_FAT_LBA+2
.384141	a2 07 00	ldx #$0007	                LDX #7
.384144	46 26		lsr $0346	div_loop        LSR DOS_FAT_LBA+2
.384146	66 24		ror $0344	                ROR DOS_FAT_LBA
.384148	ca		dex		                DEX
.384149	d0 f9		bne $384144	                BNE div_loop
.38414b	18		clc		                CLC
.38414c	a5 24		lda $0344	                LDA DOS_FAT_LBA
.38414e	6d 14 e0	adc $37e014	                ADC FAT_BEGIN_LBA
.384151	85 24		sta $0344	                STA DOS_FAT_LBA
.384153	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.384155	6d 16 e0	adc $37e016	                ADC FAT_BEGIN_LBA+2
.384158	85 26		sta $0346	                STA DOS_FAT_LBA+2
.38415a	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; We want to load the FAT sector
.38415c	85 02		sta $0322	                STA BIOS_LBA
.38415e	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.384160	85 04		sta $0324	                STA BIOS_LBA+2
.384162	a9 40 e3	lda #$e340	                LDA #<>DOS_SECTOR               ; We want to load the FAT sector in DOS_SECTOR
.384165	85 06		sta $0326	                STA BIOS_BUFF_PTR
.384167	a9 37 00	lda #$0037	                LDA #`DOS_SECTOR
.38416a	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.38416c	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Load the FAT entry
.384170	b0 06		bcs $384178	                BCS find_entry
.384172	e2 20		sep #$20	                SEP #$20        ; set A short
.384174	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.384176	80 0c		bra $384184	                BRA ret_failure
.384178					find_entry
.384178	c2 20		rep #$20	                REP #$20        ; set A long
.38417a	a5 10		lda $0330	                LDA DOS_CLUS_ID
.38417c	0a		asl a		                ASL A
.38417d	0a		asl a		                ASL A                           ; * 4
.38417e	29 7f 00	and #$007f	                AND #$7F                        ; DOS_CLUS_ID MOD 128
.384181	aa		tax		                TAX                             ; X should be the offset within the sector
.384182	38		sec		ret_success     SEC                             ; return success
.384183	6b		rtl		                RTL
.384184	18		clc		ret_failure     CLC                             ; Return failure
.384185	6b		rtl		                RTL
.384186					NEXTCLUSTER32
.384186	08		php		                PHP
.384187	c2 30		rep #$30	                REP #$30        ; set A&X long
.384189	22 37 41 38	jsl $384137	                JSL FATFORCLUSTER32             ; Get the FAT entry for this cluster
.38418d	90 2c		bcc $3841bb	                BCC ret_failure                 ; If it did not work, return the error
.38418f	bd 40 e3	lda $37e340,x	                LDA DOS_SECTOR,X                ; Get the entry and copy it to DOS_TEMP
.384192	85 28		sta $0348	                STA DOS_TEMP
.384194	bd 42 e3	lda $37e342,x	                LDA DOS_SECTOR+2,X
.384197	85 2a		sta $034a	                STA DOS_TEMP+2
.384199	a5 28		lda $0348	                LDA DOS_TEMP                    ; Is DOS_TEMP = $FFFFFFFF?
.38419b	c9 ff ff	cmp #$ffff	                CMP #$FFFF
.38419e	d0 0c		bne $3841ac	                BNE found_next
.3841a0	a5 2a		lda $034a	                LDA DOS_TEMP+2
.3841a2	c9 ff 0f	cmp #$0fff	                CMP #$0FFF
.3841a5	d0 05		bne $3841ac	                BNE found_next                  ; No: return this cluster as the next
.3841a7	a9 0a 00	lda #$000a	                LDA #DOS_ERR_NOCLUSTER          ; Yes: return that there are no more clusters
.3841aa	80 0f		bra $3841bb	                BRA ret_failure
.3841ac	a5 28		lda $0348	found_next      LDA DOS_TEMP                    ; No: return DOS_TEMP as the new DOS_CLUS_ID
.3841ae	85 10		sta $0330	                STA DOS_CLUS_ID
.3841b0	a5 2a		lda $034a	                LDA DOS_TEMP+2
.3841b2	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3841b4					ret_success
.3841b4	e2 20		sep #$20	                SEP #$20        ; set A short
.3841b6	64 0e		stz $032e	                STZ DOS_STATUS                  ; Record success
.3841b8	28		plp		                PLP
.3841b9	38		sec		                SEC
.3841ba	6b		rtl		                RTL
.3841bb	85 0e		sta $032e	ret_failure     STA DOS_STATUS                  ; Record the error condition
.3841bd	28		plp		                PLP
.3841be	18		clc		                CLC
.3841bf	6b		rtl		                RTL
.3841c0					DOS_FREECLUS32
.3841c0	08		php		                PHP
.3841c1	c2 30		rep #$30	                REP #$30        ; set A&X long
.3841c3	a9 40 e3	lda #$e340	                LDA #<>DOS_SECTOR               ; Set the location to store the sector
.3841c6	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3841c8	a9 37 00	lda #$0037	                LDA #`DOS_SECTOR
.3841cb	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3841cd	ad 14 e0	lda $37e014	                LDA FAT_BEGIN_LBA               ; Set the LBA to that of the first FAT sector
.3841d0	85 02		sta $0322	                STA BIOS_LBA
.3841d2	ad 16 e0	lda $37e016	                LDA FAT_BEGIN_LBA+2
.3841d5	85 04		sta $0324	                STA BIOS_LBA+2
.3841d7	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Load the sector into memory
.3841db	b0 07		bcs $3841e4	                BCS initial_entry               ; If OK: set the initial entry to check
.3841dd	e2 20		sep #$20	                SEP #$20        ; set A short
.3841df	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Return a NOFAT error
.3841e1	82 5a 00	brl $38423e	                BRL ret_failure
.3841e4					initial_entry
.3841e4	c2 20		rep #$20	                REP #$20        ; set A long
.3841e6	a9 02 00	lda #$0002	                LDA #2                          ; Set DOS_CLUS_ID to 2
.3841e9	85 10		sta $0330	                STA DOS_CLUS_ID
.3841eb	a9 00 00	lda #$0000	                LDA #0
.3841ee	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3841f0	a2 08 00	ldx #$0008	                LDX #8                          ; Set the offset to DOS_CLUS_ID * 4
.3841f3	bd 40 e3	lda $37e340,x	chk_entry       LDA DOS_SECTOR,X                ; Is the cluster entry == $00000000?
.3841f6	d0 05		bne $3841fd	                BNE next_entry                  ; No: move to the next entry
.3841f8	bd 42 e3	lda $37e342,x	                LDA DOS_SECTOR+2,X
.3841fb	f0 29		beq $384226	                BEQ found_free                  ; Yes: go to allocate and return it
.3841fd	e6 10		inc $0330	next_entry      INC DOS_CLUS_ID                 ; Move to the next cluster
.3841ff	d0 02		bne $384203	                BNE inc_ptr
.384201	e6 12		inc $0332	                INC DOS_CLUS_ID+2
.384203	e8		inx		inc_ptr         INX                             ; Update the index to the entry
.384204	e8		inx		                INX
.384205	e8		inx		                INX
.384206	e8		inx		                INX
.384207	e0 00 02	cpx #$0200	                CPX #DOS_SECTOR_SIZE            ; Are we outside the sector?
.38420a	90 e7		bcc $3841f3	                BLT chk_entry                   ; No: check this entry
.38420c	18		clc		                CLC                             ; Point to the next sector in the FAT
.38420d	a5 02		lda $0322	                LDA BIOS_LBA
.38420f	69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.384212	85 02		sta $0322	                STA BIOS_LBA
.384214	a5 04		lda $0324	                LDA BIOS_LBA+2
.384216	69 00 00	adc #$0000	                ADC #0
.384219	85 04		sta $0324	                STA BIOS_LBA+2
.38421b	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Attempt to read the block
.38421f	b0 00		bcs $384221	                BCS set_ptr                     ; If OK: set the pointer and check it
.384221	a2 00 00	ldx #$0000	set_ptr         LDX #0                          ; Set index pointer to the first entry
.384224	80 cd		bra $3841f3	                BRA chk_entry                   ; Check this entry
.384226					found_free
.384226	c2 20		rep #$20	                REP #$20        ; set A long
.384228	a9 ff ff	lda #$ffff	                LDA #<>FAT_LAST_CLUSTER         ; Set the entry to $0FFFFFFF to make it the last entry in its chain
.38422b	9d 40 e3	sta $37e340,x	                STA DOS_SECTOR,X
.38422e	a9 ff 0f	lda #$0fff	                LDA #(FAT_LAST_CLUSTER >> 16)
.384231	9d 42 e3	sta $37e342,x	                STA DOS_SECTOR+2,X
.384234	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.384238	b0 0b		bcs $384245	                BCS ret_success                 ; If OK: return success
.38423a	e2 20		sep #$20	                SEP #$20        ; set A short
.38423c	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Otherwise: return NOFAT error
.38423e					ret_failure
.38423e	e2 20		sep #$20	                SEP #$20        ; set A short
.384240	85 0e		sta $032e	                STA DOS_STATUS
.384242	28		plp		                PLP
.384243	18		clc		                CLC
.384244	6b		rtl		                RTL
.384245					ret_success
.384245	e2 20		sep #$20	                SEP #$20        ; set A short
.384247	64 0e		stz $032e	                STZ DOS_STATUS
.384249	28		plp		                PLP
.38424a	38		sec		                SEC
.38424b	6b		rtl		                RTL
.38424c					DELCLUSTER32
.38424c	08		php		                PHP
.38424d	c2 30		rep #$30	                REP #$30        ; set A&X long
.38424f	22 37 41 38	jsl $384137	                JSL FATFORCLUSTER32
.384253	a9 00 00	lda #$0000	                LDA #0
.384256	9d 40 e3	sta $37e340,x	                STA DOS_SECTOR,X                ; Set the cluster entry to 0
.384259	9d 42 e3	sta $37e342,x	                STA DOS_SECTOR+2,X
.38425c	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.384260	b0 09		bcs $38426b	                BCS ret_success
.384262					ret_failure
.384262	e2 20		sep #$20	                SEP #$20        ; set A short
.384264	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.384266	85 0e		sta $032e	                STA DOS_STATUS
.384268	28		plp		                PLP
.384269	18		clc		                CLC
.38426a	6b		rtl		                RTL
.38426b					ret_success
.38426b	e2 20		sep #$20	                SEP #$20        ; set A short
.38426d	64 0e		stz $032e	                STZ DOS_STATUS
.38426f	28		plp		                PLP
.384270	38		sec		                SEC
.384271	6b		rtl		                RTL
.384272					DOS_APPENDCLUS
.384272	08		php		                PHP
.384273	c2 30		rep #$30	                REP #$30        ; set A&X long
.384275	a5 12		lda $0332	                LDA DOS_CLUS_ID+2               ; Save the cluster number for later
.384277	48		pha		                PHA
.384278	a5 10		lda $0330	                LDA DOS_CLUS_ID
.38427a	48		pha		                PHA
.38427b	22 c0 41 38	jsl $3841c0	                JSL DOS_FREECLUS32              ; Find a free cluster on the block device
.38427f	b0 08		bcs $384289	                BCS save_cluster                ; If we got a cluster, write the data to it
.384281	68		pla		fail_cleanup    PLA                             ; Restore the cluster of the file
.384282	85 10		sta $0330	                STA DOS_CLUS_ID
.384284	68		pla		                PLA
.384285	85 12		sta $0332	                STA DOS_CLUS_ID+2
.384287	80 34		bra $3842bd	                BRA pass_failure                ; Pass the failure back up the chain
.384289	a5 10		lda $0330	save_cluster    LDA DOS_CLUS_ID
.38428b	8d 2c e0	sta $37e02c	                STA DOS_NEW_CLUSTER
.38428e	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.384290	8d 2e e0	sta $37e02e	                STA DOS_NEW_CLUSTER+2
.384293	22 b3 3f 38	jsl $383fb3	                JSL DOS_PUTCLUSTER              ; Write the data to the free cluster
.384297	90 e8		bcc $384281	                BCC fail_cleanup                ; If failure: clean up stack and pass the failure up
.384299	68		pla		                PLA                             ; Restore the cluster of the file
.38429a	85 10		sta $0330	                STA DOS_CLUS_ID
.38429c	68		pla		                PLA
.38429d	85 12		sta $0332	                STA DOS_CLUS_ID+2
.38429f	22 86 41 38	jsl $384186	walk_loop       JSL NEXTCLUSTER32               ; Try to get the next cluster in the chain
.3842a3	b0 fa		bcs $38429f	                BCS walk_loop                   ; If found a cluster, keep walking the chain
.3842a5	ad 2c e0	lda $37e02c	                LDA DOS_NEW_CLUSTER             ; Write the ID of the new cluster to the end of the chain
.3842a8	9d 40 e3	sta $37e340,x	                STA DOS_SECTOR,X
.3842ab	ad 2e e0	lda $37e02e	                LDA DOS_NEW_CLUSTER+2
.3842ae	9d 42 e3	sta $37e342,x	                STA DOS_SECTOR+2,X
.3842b1	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the FAT sector back (assumes BIOS_LBA and BIOS_BUFF_PTR haven't changed)
.3842b5	b0 09		bcs $3842c0	                BCS ret_success
.3842b7	e2 20		sep #$20	                SEP #$20        ; set A short
.3842b9	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Problem working with the FAT
.3842bb	85 0e		sta $032e	                STA DOS_STATUS
.3842bd	28		plp		pass_failure    PLP
.3842be	18		clc		                CLC
.3842bf	6b		rtl		                RTL
.3842c0					ret_success
.3842c0	e2 20		sep #$20	                SEP #$20        ; set A short
.3842c2	64 0e		stz $032e	                STZ DOS_STATUS
.3842c4	28		plp		                PLP
.3842c5	38		sec		                SEC
.3842c6	6b		rtl		                RTL
.3842c7					DOS_DIRFINDFREE
.3842c7	08		php		                PHP
.3842c8	c2 30		rep #$30	                REP #$30        ; set A&X long
.3842ca	ad 28 e0	lda $37e028	                LDA DOS_DIR_CLUS_ID
.3842cd	85 10		sta $0330	                STA DOS_CLUS_ID
.3842cf	ad 2a e0	lda $37e02a	                LDA DOS_DIR_CLUS_ID+2
.3842d2	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3842d4	a9 40 e1	lda #$e140	load_dir_clus   LDA #<>DOS_DIR_CLUSTER
.3842d7	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3842d9	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER
.3842dc	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3842de	22 90 3f 38	jsl $383f90	                JSL DOS_GETCLUSTER
.3842e2	b0 06		bcs $3842ea	                BCS start_walk
.3842e4	a9 08 00	lda #$0008	                LDA #DOS_ERR_NODIR          ; Return that we could not read the directory
.3842e7	82 1f 00	brl $384309	                BRL ret_failure
.3842ea	22 d6 3f 38	jsl $383fd6	start_walk      JSL DOS_DIRFIRST            ; Point to the first directory entry
.3842ee	a0 00 00	ldy #$0000	                LDY #0                      ; We check the first character of the entry
.3842f1					chk_entry
.3842f1	e2 20		sep #$20	                SEP #$20        ; set A short
.3842f3	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the first byte of the directory entry
.3842f5	f0 19		beq $384310	                BEQ ret_success             ; If 0: we have a blank... return it
.3842f7	c9 e5		cmp #$e5	                CMP #DOS_DIR_ENT_UNUSED     ; Is it an unused (deleted) entry?
.3842f9	f0 15		beq $384310	                BEQ ret_success             ; Yes: return it
.3842fb	22 e5 3f 38	jsl $383fe5	                JSL DOS_DIRNEXT             ; Move to the next directory entry
.3842ff	b0 f0		bcs $3842f1	                BCS chk_entry               ; If there is one, check this next entry
.384301	22 86 41 38	jsl $384186	                JSL NEXTCLUSTER32           ; Move to the next cluster of the directory
.384305	b0 e3		bcs $3842ea	                BCS start_walk              ; If we got one, start walking it
.384307	00		brk #		                BRK                         ; For the moment, just fail
.384308	ea		nop		                NOP                         ; TODO: add a new cluster to the end of the directory
.384309					ret_failure
.384309	e2 20		sep #$20	                SEP #$20        ; set A short
.38430b	85 0e		sta $032e	                STA DOS_STATUS              ; Return failure
.38430d	28		plp		                PLP
.38430e	18		clc		                CLC
.38430f	6b		rtl		                RTL
.384310					ret_success
.384310	c2 20		rep #$20	                REP #$20        ; set A long
.384312	a5 10		lda $0330	                LDA DOS_CLUS_ID             ; Return the directory cluster we found
.384314	8d 28 e0	sta $37e028	                STA DOS_DIR_CLUS_ID
.384317	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.384319	8d 2a e0	sta $37e02a	                STA DOS_DIR_CLUS_ID+2
.38431c	e2 20		sep #$20	                SEP #$20        ; set A short
.38431e	64 0e		stz $032e	                STZ DOS_STATUS              ; And return success
.384320	28		plp		                PLP
.384321	38		sec		                SEC
.384322	6b		rtl		                RTL
.384323					BCD2BIN
.384323	08		php		                PHP
.384324	c2 30		rep #$30	                REP #$30        ; set A&X long
.384326	85 28		sta $0348	                STA DOS_TEMP
.384328	29 0f 00	and #$000f	                AND #$000F
.38432b	85 2a		sta $034a	                STA DOS_TEMP+2
.38432d	a5 28		lda $0348	                LDA DOS_TEMP
.38432f	4a		lsr a		                LSR A
.384330	4a		lsr a		                LSR A
.384331	4a		lsr a		                LSR A
.384332	4a		lsr a		                LSR A
.384333	85 28		sta $0348	                STA DOS_TEMP
.384335	29 0f 00	and #$000f	                AND #$000F
.384338	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.38433c	a9 0a 00	lda #$000a	                LDA #10
.38433f	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.384343	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.384347	18		clc		                CLC
.384348	65 2a		adc $034a	                ADC DOS_TEMP+2
.38434a	85 2a		sta $034a	                STA DOS_TEMP+2
.38434c	a5 28		lda $0348	                LDA DOS_TEMP
.38434e	4a		lsr a		                LSR A
.38434f	4a		lsr a		                LSR A
.384350	4a		lsr a		                LSR A
.384351	4a		lsr a		                LSR A
.384352	85 28		sta $0348	                STA DOS_TEMP
.384354	29 0f 00	and #$000f	                AND #$000F
.384357	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.38435b	a9 64 00	lda #$0064	                LDA #100
.38435e	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.384362	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.384366	18		clc		                CLC
.384367	65 2a		adc $034a	                ADC DOS_TEMP+2
.384369	85 2a		sta $034a	                STA DOS_TEMP+2
.38436b	a5 28		lda $0348	                LDA DOS_TEMP
.38436d	4a		lsr a		                LSR A
.38436e	4a		lsr a		                LSR A
.38436f	4a		lsr a		                LSR A
.384370	4a		lsr a		                LSR A
.384371	29 0f 00	and #$000f	                AND #$000F
.384374	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.384378	a9 e8 03	lda #$03e8	                LDA #1000
.38437b	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.38437f	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.384383	18		clc		                CLC
.384384	65 2a		adc $034a	                ADC DOS_TEMP+2
.384386	28		plp		                PLP
.384387	6b		rtl		                RTL
.384388					DOS_RTCCREATE
.384388	08		php		                PHP
.384389	c2 10		rep #$10	                REP #$10        ; set X long
.38438b	e2 20		sep #$20	                SEP #$20        ; set A short
.38438d	af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn off the updates to the clock
.384391	09 08		ora #$08	                ORA #%00001000
.384393	8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.384397	af 0f 08 af	lda $af080f	                LDA @l RTC_CENTURY
.38439b	85 29		sta $0349	                STA DOS_TEMP+1
.38439d	af 0a 08 af	lda $af080a	                LDA @l RTC_YEAR             ; Get the year
.3843a1	85 28		sta $0348	                STA DOS_TEMP
.3843a3	c2 20		rep #$20	                REP #$20        ; set A long
.3843a5	a5 28		lda $0348	                LDA DOS_TEMP
.3843a7	22 23 43 38	jsl $384323	                JSL BCD2BIN                 ; Convert it to binary
.3843ab	38		sec		                SEC                         ; Year is relative to 1980
.3843ac	e9 bc 07	sbc #$07bc	                SBC #1980
.3843af	c2 20		rep #$20	                REP #$20        ; set A long
.3843b1	0a		asl a		                ASL A
.3843b2	0a		asl a		                ASL A
.3843b3	0a		asl a		                ASL A
.3843b4	0a		asl a		                ASL A
.3843b5	0a		asl a		                ASL A
.3843b6	0a		asl a		                ASL A
.3843b7	0a		asl a		                ASL A
.3843b8	0a		asl a		                ASL A
.3843b9	0a		asl a		                ASL A
.3843ba	29 00 fe	and #$fe00	                AND #$FE00
.3843bd	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.3843c0	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3843c2	e2 20		sep #$20	                SEP #$20        ; set A short
.3843c4	af 09 08 af	lda $af0809	                LDA @l RTC_MONTH            ; Get the month
.3843c8	c2 20		rep #$20	                REP #$20        ; set A long
.3843ca	29 ff 00	and #$00ff	                AND #$00FF
.3843cd	22 23 43 38	jsl $384323	                JSL BCD2BIN                 ; Convert it to binary
.3843d1	29 ff 00	and #$00ff	                AND #$00FF                  ; Move the year to bits 15 - 9
.3843d4	0a		asl a		                ASL A
.3843d5	0a		asl a		                ASL A
.3843d6	0a		asl a		                ASL A
.3843d7	0a		asl a		                ASL A
.3843d8	0a		asl a		                ASL A
.3843d9	29 e0 01	and #$01e0	                AND #$01E0                  ; Make sure only the month is covered
.3843dc	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.3843df	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.3843e1	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3843e3	e2 20		sep #$20	                SEP #$20        ; set A short
.3843e5	af 06 08 af	lda $af0806	                LDA @l RTC_DAY              ; Get the day
.3843e9	c2 20		rep #$20	                REP #$20        ; set A long
.3843eb	29 ff 00	and #$00ff	                AND #$00FF
.3843ee	22 23 43 38	jsl $384323	                JSL BCD2BIN                 ; Convert it to binary
.3843f2	29 1f 00	and #$001f	                AND #$001F                  ; Make sure only the day is covered
.3843f5	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.3843f8	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.3843fa	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3843fc	e2 20		sep #$20	                SEP #$20        ; set A short
.3843fe	af 04 08 af	lda $af0804	                LDA @l RTC_HRS              ; Get the hour
.384402	29 1f		and #$1f	                AND #$1F                    ; Trim AM/PM bit
.384404	c2 20		rep #$20	                REP #$20        ; set A long
.384406	29 ff 00	and #$00ff	                AND #$00FF
.384409	22 23 43 38	jsl $384323	                JSL BCD2BIN                 ; Convert it to binary
.38440d	c2 20		rep #$20	                REP #$20        ; set A long
.38440f	0a		asl a		                ASL A
.384410	0a		asl a		                ASL A
.384411	0a		asl a		                ASL A
.384412	0a		asl a		                ASL A
.384413	0a		asl a		                ASL A
.384414	0a		asl a		                ASL A
.384415	0a		asl a		                ASL A
.384416	0a		asl a		                ASL A
.384417	0a		asl a		                ASL A
.384418	0a		asl a		                ASL A
.384419	0a		asl a		                ASL A
.38441a	29 00 f8	and #$f800	                AND #$F800
.38441d	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.384420	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.384422	e2 20		sep #$20	                SEP #$20        ; set A short
.384424	af 02 08 af	lda $af0802	                LDA @l RTC_MIN              ; Get the minute
.384428	c2 20		rep #$20	                REP #$20        ; set A long
.38442a	29 ff 00	and #$00ff	                AND #$00FF
.38442d	22 23 43 38	jsl $384323	                JSL BCD2BIN                 ; Convert it to binary
.384431	c2 20		rep #$20	                REP #$20        ; set A long
.384433	0a		asl a		                ASL A
.384434	0a		asl a		                ASL A
.384435	0a		asl a		                ASL A
.384436	0a		asl a		                ASL A
.384437	0a		asl a		                ASL A
.384438	29 e0 07	and #$07e0	                AND #$07E0
.38443b	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.38443e	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.384440	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.384442	e2 20		sep #$20	                SEP #$20        ; set A short
.384444	af 00 08 af	lda $af0800	                LDA @l RTC_SEC              ; Get the second
.384448	c2 20		rep #$20	                REP #$20        ; set A long
.38444a	29 ff 00	and #$00ff	                AND #$00FF
.38444d	22 23 43 38	jsl $384323	                JSL BCD2BIN                 ; Convert it to binary
.384451	c2 20		rep #$20	                REP #$20        ; set A long
.384453	29 1f 00	and #$001f	                AND #$001F
.384456	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.384459	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.38445b	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.38445d	af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn on the updates again
.384461	29 f7 00	and #$00f7	                AND #%11110111
.384464	8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.384468	28		plp		                PLP
.384469	6b		rtl		                RTL
.38446a					DOS_CREATE
.38446a	08		php		                PHP
.38446b	c2 30		rep #$30	                REP #$30        ; set A&X long
.38446d	a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; DOS_TEMP := DOS_FD_PTR->PATH
.384470	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384472	85 28		sta $0348	                STA DOS_TEMP
.384474	c8		iny		                INY
.384475	c8		iny		                INY
.384476	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384478	85 2a		sta $034a	                STA DOS_TEMP+2
.38447a	e2 20		sep #$20	                SEP #$20        ; set A short
.38447c	a0 00 00	ldy #$0000	                LDY #0
.38447f	a2 00 00	ldx #$0000	                LDX #0
.384482	b7 28		lda [$0348],y	path_loop       LDA [DOS_TEMP],Y                ; Get a byte of the path
.384484	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X             ; ... save it to the path buffer
.384486	f0 04		beq $38448c	                BEQ find_file                   ; If it's NULL, we're done
.384488	e8		inx		                INX
.384489	c8		iny		                INY
.38448a	80 f6		bra $384482	                BRA path_loop
.38448c	22 0a 40 38	jsl $38400a	find_file       JSL DOS_PARSE_PATH
.384490	22 77 40 38	jsl $384077	                JSL DOS_FINDFILE
.384494	90 07		bcc $38449d	                BCC validate_name
.384496	e2 20		sep #$20	                SEP #$20        ; set A short
.384498	a9 0b		lda #$0b	                LDA #DOS_ERR_FILEEXISTS
.38449a	82 ed 00	brl $38458a	                BRL ret_failure
.38449d					validate_name
.38449d	22 c0 41 38	jsl $3841c0	                JSL DOS_FREECLUS32
.3844a1	b0 03		bcs $3844a6	                BCS save_data
.3844a3	82 e8 00	brl $38458e	                BRL pass_failure
.3844a6					save_data
.3844a6	c2 20		rep #$20	                REP #$20        ; set A long
.3844a8	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER
.3844ab	a5 10		lda $0330	                LDA DOS_CLUS_ID             ; DOS_FD_PTR->FIRST_CLUSTER := DOS_CLUS_ID
.3844ad	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3844af	c8		iny		                INY
.3844b0	c8		iny		                INY
.3844b1	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3844b3	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3844b5	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; DOS_BUFF_PTR := DOS_FD_PTR->BUFFER
.3844b8	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3844ba	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3844bc	c8		iny		                INY
.3844bd	c8		iny		                INY
.3844be	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3844c0	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3844c2	22 b3 3f 38	jsl $383fb3	                JSL DOS_PUTCLUSTER
.3844c6	b0 03		bcs $3844cb	                BCS find_dir
.3844c8	82 c3 00	brl $38458e	                BRL pass_failure
.3844cb					find_dir
.3844cb	c2 20		rep #$20	                REP #$20        ; set A long
.3844cd	ad 1c e0	lda $37e01c	                LDA ROOT_DIR_FIRST_CLUSTER      ; Scan the root directory
.3844d0	8d 28 e0	sta $37e028	                STA DOS_DIR_CLUS_ID
.3844d3	ad 1e e0	lda $37e01e	                LDA ROOT_DIR_FIRST_CLUSTER+2
.3844d6	8d 2a e0	sta $37e02a	                STA DOS_DIR_CLUS_ID+2
.3844d9	22 c7 42 38	jsl $3842c7	                JSL DOS_DIRFINDFREE
.3844dd	b0 1a		bcs $3844f9	                BCS set_entry
.3844df	c2 20		rep #$20	                REP #$20        ; set A long
.3844e1	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Failed to get the directory entry...
.3844e4	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y              ; DOS_CLUS_ID := DOS_FD_PTR->FIRST_CLUSTER
.3844e6	85 10		sta $0330	                STA DOS_CLUS_ID
.3844e8	c8		iny		                INY
.3844e9	c8		iny		                INY
.3844ea	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3844ec	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3844ee	22 4c 42 38	jsl $38424c	                JSL DELCLUSTER32                ; Delete the cluster
.3844f2	e2 20		sep #$20	                SEP #$20        ; set A short
.3844f4	a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Return that we couldn't read the directory
.3844f6	82 91 00	brl $38458a	                BRL ret_failure
.3844f9					set_entry
.3844f9	e2 20		sep #$20	                SEP #$20        ; set A short
.3844fb	a0 00 00	ldy #$0000	                LDY #0
.3844fe	a9 00		lda #$00	                LDA #0                          ; NULL
.384500	97 18		sta [$0338],y	copy_dir_loop   STA [DOS_DIR_PTR],Y             ; Save it to the directory cluster
.384502	c8		iny		                INY
.384503	c0 20 00	cpy #$0020	                CPY #SIZE(DIRENTRY)
.384506	d0 f8		bne $384500	                BNE copy_dir_loop
.384508	a0 00 00	ldy #$0000	                LDY #0
.38450b	b9 30 e0	lda $37e030,y	name_loop       LDA DOS_SHORT_NAME,Y            ; Copy the name over
.38450e	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.384510	c8		iny		                INY
.384511	c0 0b 00	cpy #$000b	                CPY #11
.384514	d0 f5		bne $38450b	                BNE name_loop
.384516	c2 20		rep #$20	                REP #$20        ; set A long
.384518	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; DOS_DIR_PTR->CLUSTER_L := DOS_FD_PTR->FIRST_CLUSTER[15..0]
.38451b	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.38451d	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.384520	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.384522	a0 0c 00	ldy #$000c	                LDY #FILEDESC.FIRST_CLUSTER+2   ; DOS_DIR_PTR->CLUSTER_H := DOS_FD_PTR->FIRST_CLUSTER[31..16]
.384525	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384527	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.38452a	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.38452c	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE              ; DOS_DIR_PTR->SIZE := DOS_FD_PTR->SIZE
.38452f	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384531	a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.384534	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.384536	a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.384539	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.38453b	a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.38453e	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.384540	22 88 43 38	jsl $384388	                JSL DOS_RTCCREATE               ; Pull the creation date-time from the RTC
.384544	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; DOS_DIR_PTR->CREATE_DATE := DOS_FD_PTR->CREATE_DATE
.384547	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384549	a0 10 00	ldy #$0010	                LDY #DIRENTRY.CREATE_DATE
.38454c	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.38454e	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME       ; DOS_DIR_PTR->CREATE_TIME := DOS_FD_PTR->CREATE_TIME
.384551	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384553	a0 0e 00	ldy #$000e	                LDY #DIRENTRY.CREATE_TIME
.384556	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.384558	a0 1a 00	ldy #$001a	                LDY #FILEDESC.MODIFIED_DATE     ; DOS_DIR_PTR->MODIFIED_DATE := DOS_FD_PTR->MODIFIED_DATE
.38455b	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.38455d	a0 18 00	ldy #$0018	                LDY #DIRENTRY.MODIFIED_DATE
.384560	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.384562	a0 1c 00	ldy #$001c	                LDY #FILEDESC.MODIFIED_TIME     ; DOS_DIR_PTR->MODIFIED_TIME := DOS_FD_PTR->MODIFIED_TIME
.384565	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384567	a0 16 00	ldy #$0016	                LDY #DIRENTRY.MODIFIED_TIME
.38456a	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.38456c	c2 20		rep #$20	                REP #$20        ; set A long
.38456e	ad 28 e0	lda $37e028	                LDA DOS_DIR_CLUS_ID
.384571	85 10		sta $0330	                STA DOS_CLUS_ID
.384573	ad 2a e0	lda $37e02a	                LDA DOS_DIR_CLUS_ID+2
.384576	85 12		sta $0332	                STA DOS_CLUS_ID+2
.384578	a9 40 e1	lda #$e140	                LDA #<>DOS_DIR_CLUSTER
.38457b	85 1c		sta $033c	                STA DOS_BUFF_PTR
.38457d	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER
.384580	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.384582	22 b3 3f 38	jsl $383fb3	                JSL DOS_PUTCLUSTER
.384586	b0 09		bcs $384591	                BCS ret_success
.384588	80 04		bra $38458e	                BRA pass_failure
.38458a					ret_failure
.38458a	e2 20		sep #$20	                SEP #$20        ; set A short
.38458c	85 0e		sta $032e	                STA DOS_STATUS
.38458e	28		plp		pass_failure    PLP
.38458f	18		clc		                CLC
.384590	6b		rtl		                RTL
.384591					ret_success
.384591	e2 20		sep #$20	                SEP #$20        ; set A short
.384593	64 0e		stz $032e	                STZ DOS_STATUS
.384595	28		plp		                PLP
.384596	38		sec		                SEC
.384597	6b		rtl		                RTL
.384598					DOS_COPYPATH
.384598	08		php		                PHP
.384599	c2 30		rep #$30	                REP #$30        ; set A&X long
.38459b	a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH
.38459e	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3845a0	85 28		sta $0348	                STA DOS_TEMP
.3845a2	c8		iny		                INY
.3845a3	c8		iny		                INY
.3845a4	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3845a6	85 2a		sta $034a	                STA DOS_TEMP+2
.3845a8	e2 20		sep #$20	                SEP #$20        ; set A short
.3845aa	a2 00 00	ldx #$0000	                LDX #0
.3845ad	a0 00 00	ldy #$0000	                LDY #0
.3845b0	b7 28		lda [$0348],y	loop            LDA [DOS_TEMP],Y
.3845b2	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.3845b4	f0 04		beq $3845ba	                BEQ done
.3845b6	e8		inx		                INX
.3845b7	c8		iny		                INY
.3845b8	d0 f6		bne $3845b0	                BNE loop
.3845ba	28		plp		done            PLP
.3845bb	6b		rtl		                RTL

;******  Return to file: src/SDOS.asm

.3845bc					IF_OPEN
.3845bc	da		phx		                PHX
.3845bd	5a		phy		                PHY
.3845be	0b		phd		                PHD
.3845bf	8b		phb		                PHB
.3845c0	08		php		                PHP
.3845c1	48		pha		                PHA             ; begin setdbr macro
.3845c2	08		php		                PHP
.3845c3	e2 20		sep #$20	                SEP #$20        ; set A short
.3845c5	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.3845c7	48		pha		                PHA
.3845c8	ab		plb		                PLB
.3845c9	28		plp		                PLP
.3845ca	68		pla		                PLA             ; end setdbr macro
.3845cb	48		pha		                PHA             ; begin setdp macro
.3845cc	08		php		                PHP
.3845cd	c2 20		rep #$20	                REP #$20        ; set A long
.3845cf	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3845d2	5b		tcd		                TCD
.3845d3	28		plp		                PLP
.3845d4	68		pla		                PLA             ; end setdp macro
.3845d5	e2 20		sep #$20	                SEP #$20        ; set A short
.3845d7	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a open is ok
.3845da	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3845dc	89 40		bit #$40	                BIT #FD_STAT_OPEN
.3845de	f0 05		beq $3845e5	                BEQ ok_to_open
.3845e0	a9 0f		lda #$0f	                LDA #DOS_ERR_OPEN               ; If already open: throw an error
.3845e2	82 f1 05	brl $384bd6	                BRL IF_FAILURE
.3845e5	22 98 45 38	jsl $384598	ok_to_open      JSL DOS_COPYPATH                ; Copy the path to the path buffer
.3845e9	22 77 40 38	jsl $384077	                JSL DOS_FINDFILE                ; Attempt to find the file
.3845ed	b0 03		bcs $3845f2	                BCS is_found                    ; If OK: we found the file
.3845ef	82 e8 05	brl $384bda	                BRL IF_PASSFAILURE              ; Otherwise: pass the failure up the chain
.3845f2					is_found
.3845f2	c2 20		rep #$20	                REP #$20        ; set A long
.3845f4	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Set the buffer point to the one provided in the file
.3845f7	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3845f9	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3845fb	c8		iny		                INY
.3845fc	c8		iny		                INY
.3845fd	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3845ff	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.384601	22 90 3f 38	jsl $383f90	                JSL DOS_GETCLUSTER              ; Attempt to load the cluster
.384605	b0 03		bcs $38460a	                BCS read_cluster
.384607	82 d0 05	brl $384bda	                BRL IF_PASSFAILURE
.38460a	a0 0a 00	ldy #$000a	read_cluster    LDY #FILEDESC.FIRST_CLUSTER     ; Set the first cluster in the file descriptor
.38460d	a5 10		lda $0330	                LDA DOS_CLUS_ID
.38460f	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.384611	c8		iny		                INY
.384612	c8		iny		                INY
.384613	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.384615	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.384617	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Set the current cluster in the file descriptor
.38461a	a5 10		lda $0330	                LDA DOS_CLUS_ID
.38461c	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.38461e	c8		iny		                INY
.38461f	c8		iny		                INY
.384620	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.384622	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.384624	a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE              ; Copy the filesize from the directory entry to the file descriptor
.384627	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.384629	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE
.38462c	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.38462e	a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.384631	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.384633	a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.384636	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.384638	e2 20		sep #$20	                SEP #$20        ; set A short
.38463a	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Mark file as open and readable
.38463d	a9 41		lda #$41	                LDA #FD_STAT_OPEN | FD_STAT_READ
.38463f	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.384641	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.384643	82 9b 05	brl $384be1	                BRL IF_SUCCESS
.384646					IF_CREATE
.384646	da		phx		                PHX
.384647	5a		phy		                PHY
.384648	0b		phd		                PHD
.384649	8b		phb		                PHB
.38464a	08		php		                PHP
.38464b	48		pha		                PHA             ; begin setdbr macro
.38464c	08		php		                PHP
.38464d	e2 20		sep #$20	                SEP #$20        ; set A short
.38464f	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.384651	48		pha		                PHA
.384652	ab		plb		                PLB
.384653	28		plp		                PLP
.384654	68		pla		                PLA             ; end setdbr macro
.384655	48		pha		                PHA             ; begin setdp macro
.384656	08		php		                PHP
.384657	c2 20		rep #$20	                REP #$20        ; set A long
.384659	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.38465c	5b		tcd		                TCD
.38465d	28		plp		                PLP
.38465e	68		pla		                PLA             ; end setdp macro
.38465f	22 6a 44 38	jsl $38446a	                JSL DOS_CREATE                  ; Attempt to create the file
.384663	90 18		bcc $38467d	                BCC pass_failure                ; If it fails: pass the failure up the chain
.384665	c2 30		rep #$30	                REP #$30        ; set A&X long
.384667	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Sets the current cluster to 0 to make sure the next write appends
.38466a	a9 00 00	lda #$0000	                LDA #0
.38466d	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.38466f	c8		iny		                INY
.384670	c8		iny		                INY
.384671	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.384673	e2 20		sep #$20	                SEP #$20        ; set A short
.384675	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS
.384678	a9 42		lda #$42	                LDA #FD_STAT_OPEN | FD_STAT_WRITE   ; Set the file to open and APPEND only
.38467a	82 64 05	brl $384be1	                BRL IF_SUCCESS
.38467d	82 56 05	brl $384bd6	pass_failure    BRL IF_FAILURE
.384680					IF_CLOSE
.384680	da		phx		                PHX
.384681	5a		phy		                PHY
.384682	0b		phd		                PHD
.384683	8b		phb		                PHB
.384684	08		php		                PHP
.384685	48		pha		                PHA             ; begin setdbr macro
.384686	08		php		                PHP
.384687	e2 20		sep #$20	                SEP #$20        ; set A short
.384689	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.38468b	48		pha		                PHA
.38468c	ab		plb		                PLB
.38468d	28		plp		                PLP
.38468e	68		pla		                PLA             ; end setdbr macro
.38468f	48		pha		                PHA             ; begin setdp macro
.384690	08		php		                PHP
.384691	c2 20		rep #$20	                REP #$20        ; set A long
.384693	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.384696	5b		tcd		                TCD
.384697	28		plp		                PLP
.384698	68		pla		                PLA             ; end setdp macro
.384699	e2 20		sep #$20	                SEP #$20        ; set A short
.38469b	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Check to see if we were writing the file
.38469e	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3846a0	89 02		bit #$02	                BIT #FD_STAT_WRITE
.3846a2	f0 09		beq $3846ad	                BEQ set_flag                    ; No, just mark it closed
.3846a4	22 2f 47 38	jsl $38472f	                JSL IF_WRITE                    ; Attempt to write the cluster
.3846a8	b0 03		bcs $3846ad	                BCS set_flag
.3846aa	82 2d 05	brl $384bda	                BRL IF_PASSFAILURE              ; If there was a problem, pass it up the chain
.3846ad	a0 00 00	ldy #$0000	set_flag        LDY #FILEDESC.STATUS
.3846b0	a9 bf		lda #$bf	                LDA #~FD_STAT_OPEN              ; Mark file as closed
.3846b2	37 20		and [$0340],y	                AND [DOS_FD_PTR],Y
.3846b4	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3846b6	82 28 05	brl $384be1	                BRL IF_SUCCESS
.3846b9					IF_READ
.3846b9	da		phx		                PHX
.3846ba	5a		phy		                PHY
.3846bb	0b		phd		                PHD
.3846bc	8b		phb		                PHB
.3846bd	08		php		                PHP
.3846be	48		pha		                PHA             ; begin setdbr macro
.3846bf	08		php		                PHP
.3846c0	e2 20		sep #$20	                SEP #$20        ; set A short
.3846c2	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.3846c4	48		pha		                PHA
.3846c5	ab		plb		                PLB
.3846c6	28		plp		                PLP
.3846c7	68		pla		                PLA             ; end setdbr macro
.3846c8	48		pha		                PHA             ; begin setdp macro
.3846c9	08		php		                PHP
.3846ca	c2 20		rep #$20	                REP #$20        ; set A long
.3846cc	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3846cf	5b		tcd		                TCD
.3846d0	28		plp		                PLP
.3846d1	68		pla		                PLA             ; end setdp macro
.3846d2	c2 10		rep #$10	                REP #$10        ; set X long
.3846d4	e2 20		sep #$20	                SEP #$20        ; set A short
.3846d6	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a read is ok
.3846d9	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3846db	89 40		bit #$40	                BIT #FD_STAT_OPEN               ; Make sure the file is open
.3846dd	f0 05		beq $3846e4	                BEQ chk_readable
.3846df	a9 0c		lda #$0c	                LDA #DOS_ERR_NOTOPEN            ; If not: throw a NOTOPEN error
.3846e1	82 f2 04	brl $384bd6	                BRL IF_FAILURE
.3846e4	89 01		bit #$01	chk_readable    BIT #FD_STAT_READ               ; Make sure the file is readable
.3846e6	f0 05		beq $3846ed	                BEQ get_dev
.3846e8	a9 0d		lda #$0d	                LDA #DOS_ERR_NOTREAD            ; If not: throw a NOTREAD error
.3846ea	82 e9 04	brl $384bd6	                BRL IF_FAILURE
.3846ed	a0 01 00	ldy #$0001	get_dev         LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.3846f0	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3846f2	85 01		sta $0321	                STA BIOS_DEV
.3846f4	c2 20		rep #$20	                REP #$20        ; set A long
.3846f6	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.3846f9	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3846fb	85 10		sta $0330	                STA DOS_CLUS_ID
.3846fd	c8		iny		                INY
.3846fe	c8		iny		                INY
.3846ff	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384701	85 12		sta $0332	                STA DOS_CLUS_ID+2
.384703	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.384706	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384708	85 1c		sta $033c	                STA DOS_BUFF_PTR
.38470a	c8		iny		                INY
.38470b	c8		iny		                INY
.38470c	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.38470e	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.384710	22 86 41 38	jsl $384186	                JSL NEXTCLUSTER32               ; Find the next cluster of the file
.384714	90 13		bcc $384729	                BCC pass_failure                ; If not OK: pass the failure up the chaing
.384716	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Update the file's current cluster
.384719	a5 10		lda $0330	                LDA DOS_CLUS_ID
.38471b	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.38471d	c8		iny		                INY
.38471e	c8		iny		                INY
.38471f	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.384721	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.384723	22 90 3f 38	jsl $383f90	                JSL DOS_GETCLUSTER              ; Get the cluster
.384727	b0 03		bcs $38472c	                BCS ret_success                 ; If ok: return success
.384729	82 ae 04	brl $384bda	pass_failure    BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.38472c	82 b2 04	brl $384be1	ret_success     BRL IF_SUCCESS
.38472f					IF_WRITE
.38472f	da		phx		                PHX
.384730	5a		phy		                PHY
.384731	0b		phd		                PHD
.384732	8b		phb		                PHB
.384733	08		php		                PHP
.384734	48		pha		                PHA             ; begin setdbr macro
.384735	08		php		                PHP
.384736	e2 20		sep #$20	                SEP #$20        ; set A short
.384738	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.38473a	48		pha		                PHA
.38473b	ab		plb		                PLB
.38473c	28		plp		                PLP
.38473d	68		pla		                PLA             ; end setdbr macro
.38473e	48		pha		                PHA             ; begin setdp macro
.38473f	08		php		                PHP
.384740	c2 20		rep #$20	                REP #$20        ; set A long
.384742	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.384745	5b		tcd		                TCD
.384746	28		plp		                PLP
.384747	68		pla		                PLA             ; end setdp macro
.384748	c2 10		rep #$10	                REP #$10        ; set X long
.38474a	e2 20		sep #$20	                SEP #$20        ; set A short
.38474c	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a read is ok
.38474f	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384751	89 40		bit #$40	                BIT #FD_STAT_OPEN               ; Make sure the file is open
.384753	f0 05		beq $38475a	                BEQ chk_readable
.384755	a9 0c		lda #$0c	                LDA #DOS_ERR_NOTOPEN            ; If not: throw a NOTOPEN error
.384757	82 7c 04	brl $384bd6	                BRL IF_FAILURE
.38475a	89 02		bit #$02	chk_readable    BIT #FD_STAT_WRITE              ; Make sure the file is WRITE
.38475c	f0 05		beq $384763	                BEQ get_dev
.38475e	a9 0e		lda #$0e	                LDA #DOS_ERR_NOTWRITE           ; If not: throw a NOTWRITE error
.384760	82 73 04	brl $384bd6	                BRL IF_FAILURE
.384763	a0 01 00	ldy #$0001	get_dev         LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.384766	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384768	85 01		sta $0321	                STA BIOS_DEV
.38476a	c2 20		rep #$20	                REP #$20        ; set A long
.38476c	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.38476f	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384771	85 1c		sta $033c	                STA DOS_BUFF_PTR
.384773	c8		iny		                INY
.384774	c8		iny		                INY
.384775	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384777	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.384779	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.38477c	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.38477e	85 10		sta $0330	                STA DOS_CLUS_ID
.384780	c8		iny		                INY
.384781	c8		iny		                INY
.384782	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384784	85 12		sta $0332	                STA DOS_CLUS_ID+2
.384786	d0 1a		bne $3847a2	                BNE rewrite_cluster             ; If the cluster ID <> 0, overwrite it
.384788	a5 10		lda $0330	                LDA DOS_CLUS_ID
.38478a	d0 16		bne $3847a2	                BNE rewrite_cluster
.38478c	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Get the file's first cluster
.38478f	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384791	85 10		sta $0330	                STA DOS_CLUS_ID
.384793	c8		iny		                INY
.384794	c8		iny		                INY
.384795	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384797	85 12		sta $0332	                STA DOS_CLUS_ID+2
.384799	22 72 42 38	jsl $384272	                JSL DOS_APPENDCLUS              ; Append the cluster
.38479d	b0 0c		bcs $3847ab	                BCS ret_success                 ; If OK: return success
.38479f	82 38 04	brl $384bda	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.3847a2	22 b3 3f 38	jsl $383fb3	rewrite_cluster JSL DOS_PUTCLUSTER              ; Over-write the cluster
.3847a6	b0 03		bcs $3847ab	                BCS ret_success                 ; If ok: return success
.3847a8	82 2f 04	brl $384bda	pass_failure    BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.3847ab	82 33 04	brl $384be1	ret_success     BRL IF_SUCCESS
.3847ae					IF_DIROPEN
.3847ae	da		phx		                PHX
.3847af	5a		phy		                PHY
.3847b0	0b		phd		                PHD
.3847b1	8b		phb		                PHB
.3847b2	08		php		                PHP
.3847b3	48		pha		                PHA             ; begin setdbr macro
.3847b4	08		php		                PHP
.3847b5	e2 20		sep #$20	                SEP #$20        ; set A short
.3847b7	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.3847b9	48		pha		                PHA
.3847ba	ab		plb		                PLB
.3847bb	28		plp		                PLP
.3847bc	68		pla		                PLA             ; end setdbr macro
.3847bd	48		pha		                PHA             ; begin setdp macro
.3847be	08		php		                PHP
.3847bf	c2 20		rep #$20	                REP #$20        ; set A long
.3847c1	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3847c4	5b		tcd		                TCD
.3847c5	28		plp		                PLP
.3847c6	68		pla		                PLA             ; end setdp macro
.3847c7	e2 20		sep #$20	                SEP #$20        ; set A short
.3847c9	a9 02		lda #$02	                LDA #BIOS_DEV_SD
.3847cb	85 01		sta $0321	                STA BIOS_DEV
.3847cd	22 22 3e 38	jsl $383e22	                JSL DOS_MOUNT               ; Make sure we've mounted the SDC.
.3847d1	b0 03		bcs $3847d6	                BCS get_root_dir            ; If successful: get the root directory
.3847d3	82 04 04	brl $384bda	                BRL IF_PASSFAILURE          ; Otherwise: pass the error up the chain
.3847d6					get_root_dir
.3847d6	c2 20		rep #$20	                REP #$20        ; set A long
.3847d8	ad 1c e0	lda $37e01c	                LDA ROOT_DIR_FIRST_CLUSTER
.3847db	8d 28 e0	sta $37e028	                STA DOS_DIR_CLUS_ID
.3847de	85 10		sta $0330	                STA DOS_CLUS_ID
.3847e0	ad 1e e0	lda $37e01e	                LDA ROOT_DIR_FIRST_CLUSTER+2
.3847e3	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3847e5	8d 2a e0	sta $37e02a	                STA DOS_DIR_CLUS_ID+2
.3847e8	a9 40 e1	lda #$e140	                LDA #<>DOS_DIR_CLUSTER
.3847eb	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3847ed	85 18		sta $0338	                STA DOS_DIR_PTR
.3847ef	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER
.3847f2	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3847f4	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.3847f6	22 90 3f 38	jsl $383f90	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.3847fa	b0 03		bcs $3847ff	                BCS do_success              ; If successful: set the directory cursor
.3847fc	82 db 03	brl $384bda	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.3847ff	82 df 03	brl $384be1	do_success      BRL IF_SUCCESS
.384802					IF_DIRNEXT
.384802	da		phx		                PHX
.384803	5a		phy		                PHY
.384804	0b		phd		                PHD
.384805	8b		phb		                PHB
.384806	08		php		                PHP
.384807	48		pha		                PHA             ; begin setdbr macro
.384808	08		php		                PHP
.384809	e2 20		sep #$20	                SEP #$20        ; set A short
.38480b	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.38480d	48		pha		                PHA
.38480e	ab		plb		                PLB
.38480f	28		plp		                PLP
.384810	68		pla		                PLA             ; end setdbr macro
.384811	48		pha		                PHA             ; begin setdp macro
.384812	08		php		                PHP
.384813	c2 20		rep #$20	                REP #$20        ; set A long
.384815	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.384818	5b		tcd		                TCD
.384819	28		plp		                PLP
.38481a	68		pla		                PLA             ; end setdp macro
.38481b	22 e5 3f 38	jsl $383fe5	                JSL DOS_DIRNEXT             ; Attempt to move to the next entry
.38481f	b0 36		bcs $384857	                BCS do_success              ; If successful, return success
.384821	c2 20		rep #$20	                REP #$20        ; set A long
.384823	ad 28 e0	lda $37e028	                LDA DOS_DIR_CLUS_ID
.384826	85 10		sta $0330	                STA DOS_CLUS_ID
.384828	ad 2a e0	lda $37e02a	                LDA DOS_DIR_CLUS_ID+2
.38482b	85 12		sta $0332	                STA DOS_CLUS_ID+2
.38482d	a9 40 e1	lda #$e140	                LDA #<>DOS_DIR_CLUSTER
.384830	85 1c		sta $033c	                STA DOS_BUFF_PTR
.384832	85 18		sta $0338	                STA DOS_DIR_PTR
.384834	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER
.384837	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.384839	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.38483b	22 86 41 38	jsl $384186	                JSL NEXTCLUSTER32           ; Try to find the next cluster
.38483f	b0 03		bcs $384844	                BCS set_next
.384841	82 96 03	brl $384bda	                BRL IF_PASSFAILURE          ; If error: pass it up the chain
.384844	a5 10		lda $0330	set_next        LDA DOS_CLUS_ID             ; Save the cluster as the current directory cluster
.384846	8d 28 e0	sta $37e028	                STA DOS_DIR_CLUS_ID
.384849	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.38484b	8d 2a e0	sta $37e02a	                STA DOS_DIR_CLUS_ID+2
.38484e	22 90 3f 38	jsl $383f90	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.384852	b0 03		bcs $384857	                BCS do_success              ; If successful: set the directory cursor
.384854	82 83 03	brl $384bda	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.384857	82 87 03	brl $384be1	do_success      BRL IF_SUCCESS
.38485a					IF_DELETE
.38485a	da		phx		                PHX
.38485b	5a		phy		                PHY
.38485c	0b		phd		                PHD
.38485d	8b		phb		                PHB
.38485e	08		php		                PHP
.38485f	48		pha		                PHA             ; begin setdbr macro
.384860	08		php		                PHP
.384861	e2 20		sep #$20	                SEP #$20        ; set A short
.384863	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.384865	48		pha		                PHA
.384866	ab		plb		                PLB
.384867	28		plp		                PLP
.384868	68		pla		                PLA             ; end setdbr macro
.384869	48		pha		                PHA             ; begin setdp macro
.38486a	08		php		                PHP
.38486b	c2 20		rep #$20	                REP #$20        ; set A long
.38486d	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.384870	5b		tcd		                TCD
.384871	28		plp		                PLP
.384872	68		pla		                PLA             ; end setdp macro
.384873	c2 30		rep #$30	                REP #$30        ; set A&X long
.384875	22 77 40 38	jsl $384077	                JSL DOS_FINDFILE
.384879	b0 03		bcs $38487e	                BCS get_first_clus
.38487b	82 5c 03	brl $384bda	                BRL IF_PASSFAILURE
.38487e					get_first_clus
.38487e	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.384881	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.384883	85 10		sta $0330	                STA DOS_CLUS_ID
.384885	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.384888	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.38488a	85 12		sta $0332	                STA DOS_CLUS_ID+2
.38488c	a5 10		lda $0330	                LDA DOS_CLUS_ID
.38488e	8d 20 e0	sta $37e020	                STA DOS_CURR_CLUS
.384891	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.384893	8d 22 e0	sta $37e022	                STA DOS_CURR_CLUS+2
.384896	22 86 41 38	jsl $384186	del_loop        JSL NEXTCLUSTER32
.38489a	90 2f		bcc $3848cb	                BCC del_one
.38489c	a5 10		lda $0330	                LDA DOS_CLUS_ID
.38489e	8d 24 e0	sta $37e024	                STA DOS_NEXT_CLUS
.3848a1	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3848a3	8d 26 e0	sta $37e026	                STA DOS_NEXT_CLUS+2
.3848a6	ad 20 e0	lda $37e020	                LDA DOS_CURR_CLUS
.3848a9	85 10		sta $0330	                STA DOS_CLUS_ID
.3848ab	ad 22 e0	lda $37e022	                LDA DOS_CURR_CLUS+2
.3848ae	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3848b0	22 4c 42 38	jsl $38424c	                JSL DELCLUSTER32
.3848b4	b0 03		bcs $3848b9	                BCS go_next
.3848b6	82 21 03	brl $384bda	                BRL IF_PASSFAILURE
.3848b9					go_next
.3848b9	ad 24 e0	lda $37e024	                LDA DOS_NEXT_CLUS
.3848bc	85 10		sta $0330	                STA DOS_CLUS_ID
.3848be	8d 20 e0	sta $37e020	                STA DOS_CURR_CLUS
.3848c1	ad 26 e0	lda $37e026	                LDA DOS_NEXT_CLUS+2
.3848c4	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3848c6	8d 22 e0	sta $37e022	                STA DOS_CURR_CLUS+2
.3848c9	80 cb		bra $384896	                BRA del_loop
.3848cb					del_one
.3848cb	ad 20 e0	lda $37e020	                LDA DOS_CURR_CLUS
.3848ce	85 10		sta $0330	                STA DOS_CLUS_ID
.3848d0	ad 22 e0	lda $37e022	                LDA DOS_CURR_CLUS+2
.3848d3	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3848d5	22 4c 42 38	jsl $38424c	                JSL DELCLUSTER32
.3848d9	b0 03		bcs $3848de	                BCS free_dir_entry
.3848db	82 fc 02	brl $384bda	                BRL IF_PASSFAILURE
.3848de					free_dir_entry
.3848de	e2 20		sep #$20	                SEP #$20        ; set A short
.3848e0	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME         ; Flag the directory entry as deleted
.3848e3	a9 e5		lda #$e5	                LDA #DOS_DIR_ENT_UNUSED
.3848e5	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3848e7	c2 20		rep #$20	                REP #$20        ; set A long
.3848e9	ad 28 e0	lda $37e028	                LDA DOS_DIR_CLUS_ID             ; Set up to write the directory cluster
.3848ec	85 10		sta $0330	                STA DOS_CLUS_ID
.3848ee	ad 2a e0	lda $37e02a	                LDA DOS_DIR_CLUS_ID+2
.3848f1	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3848f3	a9 40 e1	lda #$e140	                LDA #<>DOS_DIR_CLUSTER          ; And its buffer
.3848f6	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3848f8	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER
.3848fb	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3848fd	22 b3 3f 38	jsl $383fb3	                JSL DOS_PUTCLUSTER              ; Write the cluster back
.384901	b0 03		bcs $384906	                BCS ret_success
.384903	82 d4 02	brl $384bda	                BRL IF_PASSFAILURE
.384906	82 d8 02	brl $384be1	ret_success     BRL IF_SUCCESS
.384909					IF_DIRREAD
.384909	da		phx		                PHX
.38490a	5a		phy		                PHY
.38490b	0b		phd		                PHD
.38490c	8b		phb		                PHB
.38490d	08		php		                PHP
.38490e	48		pha		                PHA             ; begin setdbr macro
.38490f	08		php		                PHP
.384910	e2 20		sep #$20	                SEP #$20        ; set A short
.384912	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.384914	48		pha		                PHA
.384915	ab		plb		                PLB
.384916	28		plp		                PLP
.384917	68		pla		                PLA             ; end setdbr macro
.384918	48		pha		                PHA             ; begin setdp macro
.384919	08		php		                PHP
.38491a	c2 20		rep #$20	                REP #$20        ; set A long
.38491c	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.38491f	5b		tcd		                TCD
.384920	28		plp		                PLP
.384921	68		pla		                PLA             ; end setdp macro
.384922	c2 30		rep #$30	                REP #$30        ; set A&X long
.384924	22 77 40 38	jsl $384077	                JSL DOS_FINDFILE              ; This is really just DOS_FINDFILE
.384928	b0 03		bcs $38492d	                BCS success
.38492a	82 a9 02	brl $384bd6	                BRL IF_FAILURE
.38492d	82 b1 02	brl $384be1	success         BRL IF_SUCCESS
.384930					IF_DIRWRITE
.384930	da		phx		                PHX
.384931	5a		phy		                PHY
.384932	0b		phd		                PHD
.384933	8b		phb		                PHB
.384934	08		php		                PHP
.384935	48		pha		                PHA             ; begin setdbr macro
.384936	08		php		                PHP
.384937	e2 20		sep #$20	                SEP #$20        ; set A short
.384939	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.38493b	48		pha		                PHA
.38493c	ab		plb		                PLB
.38493d	28		plp		                PLP
.38493e	68		pla		                PLA             ; end setdbr macro
.38493f	48		pha		                PHA             ; begin setdp macro
.384940	08		php		                PHP
.384941	c2 20		rep #$20	                REP #$20        ; set A long
.384943	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.384946	5b		tcd		                TCD
.384947	28		plp		                PLP
.384948	68		pla		                PLA             ; end setdp macro
.384949	c2 30		rep #$30	                REP #$30        ; set A&X long
.38494b	ad 28 e0	lda $37e028	                LDA DOS_DIR_CLUS_ID
.38494e	85 10		sta $0330	                STA DOS_CLUS_ID
.384950	ad 2a e0	lda $37e02a	                LDA DOS_DIR_CLUS_ID+2
.384953	85 12		sta $0332	                STA DOS_CLUS_ID+2
.384955	a9 40 e1	lda #$e140	                LDA #<>DOS_DIR_CLUSTER
.384958	85 1c		sta $033c	                STA DOS_BUFF_PTR
.38495a	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER
.38495d	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.38495f	22 b3 3f 38	jsl $383fb3	                JSL DOS_PUTCLUSTER
.384963	b0 03		bcs $384968	                BCS success
.384965	82 6e 02	brl $384bd6	                BRL IF_FAILURE
.384968	82 76 02	brl $384be1	success         BRL IF_SUCCESS
.38496b					IF_LOAD
.38496b	da		phx		                PHX
.38496c	5a		phy		                PHY
.38496d	0b		phd		                PHD
.38496e	8b		phb		                PHB
.38496f	08		php		                PHP
.384970	48		pha		                PHA             ; begin setdbr macro
.384971	08		php		                PHP
.384972	e2 20		sep #$20	                SEP #$20        ; set A short
.384974	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.384976	48		pha		                PHA
.384977	ab		plb		                PLB
.384978	28		plp		                PLP
.384979	68		pla		                PLA             ; end setdbr macro
.38497a	48		pha		                PHA             ; begin setdp macro
.38497b	08		php		                PHP
.38497c	c2 20		rep #$20	                REP #$20        ; set A long
.38497e	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.384981	5b		tcd		                TCD
.384982	28		plp		                PLP
.384983	68		pla		                PLA             ; end setdp macro
.384984	c2 30		rep #$30	                REP #$30        ; set A&X long
.384986	22 bc 45 38	jsl $3845bc	                JSL IF_OPEN
.38498a	b0 03		bcs $38498f	                BCS setup                   ; If success: start setting things up
.38498c	82 4b 02	brl $384bda	                BRL IF_PASSFAILURE          ; Otherwise: pass the failure up the chain
.38498f					setup
.38498f	c2 20		rep #$20	                REP #$20        ; set A long
.384991	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE          ; Record the size of the file in DOS_FILE_SIZE
.384994	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384996	85 2c		sta $034c	                STA DOS_FILE_SIZE
.384998	c8		iny		                INY
.384999	c8		iny		                INY
.38499a	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.38499c	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.38499e	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; Set up the source pointer
.3849a1	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3849a3	85 30		sta $0350	                STA DOS_SRC_PTR
.3849a5	c8		iny		                INY
.3849a6	c8		iny		                INY
.3849a7	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3849a9	85 32		sta $0352	                STA DOS_SRC_PTR+2
.3849ab	a5 36		lda $0356	                LDA DOS_DST_PTR+2           ; Is there a destination address in RAM?
.3849ad	c9 40 00	cmp #$0040	                CMP #$0040
.3849b0	b0 04		bcs $3849b6	                BGE load_by_type            ; No: try to load it by type
.3849b2	5c 80 4a 38	jmp $384a80	                JML IF_LOADRAW              ; Otherwise, load it to the supplied destination
.3849b6	a0 08 00	ldy #$0008	load_by_type    LDY #8                      ; Point to the first extension byte
.3849b9	a2 00 00	ldx #$0000	                LDX #0                      ; and the first byte of the table
.3849bc					type_loop
.3849bc	e2 20		sep #$20	                SEP #$20        ; set A short
.3849be	bf 02 4a 38	lda $384a02,x	                LDA LOAD_TYPE_TABLE,X       ; Get 1st extension character of the entry
.3849c2	f0 37		beq $3849fb	                BEQ no_match                ; If NULL... we didn't get a match
.3849c4	d9 30 e0	cmp $37e030,y	                CMP DOS_SHORT_NAME,Y        ; Get the character of the extension
.3849c7	d0 28		bne $3849f1	                BNE next_entry              ; If they don't match, try the next entry
.3849c9	bf 03 4a 38	lda $384a03,x	                LDA LOAD_TYPE_TABLE+1,X     ; Get 2nd extension character of the entry
.3849cd	d9 31 e0	cmp $37e031,y	                CMP DOS_SHORT_NAME+1,Y      ; Get the 2nd character of the extension
.3849d0	d0 1f		bne $3849f1	                BNE next_entry              ; If they don't match, try the next entry
.3849d2	bf 04 4a 38	lda $384a04,x	                LDA LOAD_TYPE_TABLE+2,X     ; Get 3rd extension character of the entry
.3849d6	d9 32 e0	cmp $37e032,y	                CMP DOS_SHORT_NAME+2,Y      ; Get the 3rd character of the extension
.3849d9	d0 16		bne $3849f1	                BNE next_entry              ; If they don't match, try the next entry
.3849db	c2 20		rep #$20	                REP #$20        ; set A long
.3849dd	bf 05 4a 38	lda $384a05,x	                LDA LOAD_TYPE_TABLE+3,X     ; Get the low word of the address
.3849e1	85 28		sta $0348	                STA DOS_TEMP                ; Save it to the jump vector
.3849e3	e2 20		sep #$20	                SEP #$20        ; set A short
.3849e5	bf 07 4a 38	lda $384a07,x	                LDA LOAD_TYPE_TABLE+5,X     ; Get the high byte of the address
.3849e9	85 2a		sta $034a	                STA DOS_TEMP+2              ; Save it to the jump vector
.3849eb	a2 00 00	ldx #$0000	                LDX #0
.3849ee	dc 48 03	jmp [$0348]	                JML [DOS_TEMP]              ; Jump to the loading routine
.3849f1					next_entry
.3849f1	c2 30		rep #$30	                REP #$30        ; set A&X long
.3849f3	8a		txa		                TXA
.3849f4	18		clc		                CLC
.3849f5	69 06 00	adc #$0006	                ADC #6
.3849f8	aa		tax		                TAX
.3849f9	80 c1		bra $3849bc	                BRA type_loop               ; And check it against the file
.3849fb					no_match
.3849fb	e2 20		sep #$20	                SEP #$20        ; set A short
.3849fd	a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC         ; Return an not-executable error
.3849ff	82 d4 01	brl $384bd6	                BRL IF_FAILURE
>384a02	50 47 58			LOAD_TYPE_TABLE .text "PGX"                 ; "PGX" --> IF_LOADPGX
>384a05	09 4a				                .word <>IF_LOADPGX
>384a07	38				                .byte `IF_LOADPGX
>384a08	00				                .byte 0
.384a09					IF_LOADPGX
.384a09	c2 10		rep #$10	                REP #$10        ; set X long
.384a0b	e2 20		sep #$20	                SEP #$20        ; set A short
.384a0d	a0 00 00	ldy #$0000	                LDY #0
.384a10	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "PGX" signature
.384a12	c9 50		cmp #$50	                CMP #'P'
.384a14	d0 15		bne $384a2b	                BNE fail_sig                        ; If not found, fail
.384a16	c8		iny		                INY
.384a17	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.384a19	c9 47		cmp #$47	                CMP #'G'
.384a1b	d0 0e		bne $384a2b	                BNE fail_sig
.384a1d	c8		iny		                INY
.384a1e	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.384a20	c9 58		cmp #$58	                CMP #'X'
.384a22	d0 07		bne $384a2b	                BNE fail_sig
.384a24	c8		iny		                INY                                 ; Check for CPU and version code ($01 for 65816)
.384a25	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.384a27	c9 01		cmp #$01	                CMP #$01
.384a29	f0 06		beq $384a31	                BEQ get_dest                        ; All passes: go to get the destination address
.384a2b	a9 10		lda #$10	fail_sig        LDA #DOS_ERR_PGXSIG                 ; Fail with a PGXSIG error code
.384a2d	22 d6 4b 38	jsl $384bd6	                JSL IF_FAILURE
.384a31					get_dest
.384a31	c2 20		rep #$20	                REP #$20        ; set A long
.384a33	c8		iny		                INY
.384a34	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get low word of destination address
.384a36	85 34		sta $0354	                STA DOS_DST_PTR                     ; And save it to the destination pointer
.384a38	85 3c		sta $035c	                STA DOS_RUN_PTR                     ; And save it to the RUN pointer
.384a3a	c8		iny		                INY
.384a3b	c8		iny		                INY
.384a3c	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get high word of destination address
.384a3e	85 36		sta $0356	                STA DOS_DST_PTR+2
.384a40	85 3e		sta $035e	                STA DOS_RUN_PTR+2
.384a42	c8		iny		                INY                                 ; Point to the first data byte
.384a43	c8		iny		                INY
.384a44					copy_loop
.384a44	e2 20		sep #$20	                SEP #$20        ; set A short
.384a46	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Read a byte from the file
.384a48	87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Write it to the destination
.384a4a	c2 20		rep #$20	                REP #$20        ; set A long
.384a4c	e6 34		inc $0354	                INC DOS_DST_PTR                     ; Move to the next destination location
.384a4e	d0 02		bne $384a52	                BNE dec_file_size
.384a50	e6 34		inc $0354	                INC DOS_DST_PTR
.384a52	38		sec		dec_file_size   SEC                                 ; Count down the number of bytes to read
.384a53	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.384a55	e9 01 00	sbc #$0001	                SBC #1
.384a58	85 2c		sta $034c	                STA DOS_FILE_SIZE
.384a5a	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.384a5c	e9 00 00	sbc #$0000	                SBC #0
.384a5f	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.384a61	a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.384a63	d0 04		bne $384a69	                BNE next_byte
.384a65	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.384a67	f0 14		beq $384a7d	                BEQ done                            ; Yes: we're done
.384a69	c8		iny		next_byte       INY                                 ; Otherwise, move to the next source location
.384a6a	cc 0e e0	cpy $37e00e	                CPY CLUSTER_SIZE                    ; Are we at the end of the cluster?
.384a6d	d0 d5		bne $384a44	                BNE copy_loop                       ; No: keep copying
.384a6f	22 86 41 38	jsl $384186	                JSL NEXTCLUSTER32                   ; Yes: Load the next cluster
.384a73	b0 03		bcs $384a78	                BCS next_cluster
.384a75	82 62 01	brl $384bda	                BRL IF_PASSFAILURE                  ; If failed: pass that up the chain
.384a78	a0 00 00	ldy #$0000	next_cluster    LDY #0                              ; Reset the source index
.384a7b	80 c7		bra $384a44	                BRA copy_loop                       ; Go back to copying
.384a7d	82 61 01	brl $384be1	done            BRL IF_SUCCESS
.384a80					IF_LOADRAW
.384a80	c2 30		rep #$30	                REP #$30        ; set A&X long
.384a82	a0 00 00	ldy #$0000	copy_cluster    LDY #0
.384a85					copy_loop
.384a85	e2 20		sep #$20	                SEP #$20        ; set A short
.384a87	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y         ; Copy byte from cluster to destination
.384a89	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.384a8b	c2 20		rep #$20	                REP #$20        ; set A long
.384a8d	38		sec		                SEC                         ; Count down the number of bytes left
.384a8e	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.384a90	e9 01 00	sbc #$0001	                SBC #1
.384a93	85 2c		sta $034c	                STA DOS_FILE_SIZE
.384a95	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.384a97	e9 00 00	sbc #$0000	                SBC #0
.384a9a	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.384a9c	d0 04		bne $384aa2	                BNE continue
.384a9e	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.384aa0	f0 1b		beq $384abd	                BEQ close_file              ; If not: we're done
.384aa2	c8		iny		continue        INY
.384aa3	cc 0e e0	cpy $37e00e	                CPY CLUSTER_SIZE            ; Are we done with the cluster?
.384aa6	d0 dd		bne $384a85	                BNE copy_loop               ; No: keep processing the bytes
.384aa8	18		clc		                CLC                         ; Advance the destination pointer to the next chunk of memory
.384aa9	a5 34		lda $0354	                LDA DOS_DST_PTR
.384aab	6d 0e e0	adc $37e00e	                ADC CLUSTER_SIZE
.384aae	85 34		sta $0354	                STA DOS_DST_PTR
.384ab0	a5 36		lda $0356	                LDA DOS_DST_PTR+2
.384ab2	69 00 00	adc #$0000	                ADC #0
.384ab5	85 36		sta $0356	                STA DOS_DST_PTR+2
.384ab7	22 86 41 38	jsl $384186	                JSL NEXTCLUSTER32           ; Yes: load the next cluster
.384abb	90 c5		bcc $384a82	                BCC copy_cluster            ; And start copying it
.384abd	22 80 46 38	jsl $384680	close_file      JSL IF_CLOSE                ; Close the file
.384ac1	b0 03		bcs $384ac6	                BCS ret_success             ; If success: we're done
.384ac3	82 14 01	brl $384bda	                BRL IF_PASSFAILURE          ; Otherwise: pass the failure up the chain
.384ac6	82 18 01	brl $384be1	ret_success     BRL IF_SUCCESS
.384ac9					IF_NULLBUFFER
.384ac9	5a		phy		                PHY
.384aca	8b		phb		                PHB
.384acb	0b		phd		                PHD
.384acc	08		php		                PHP
.384acd	48		pha		                PHA             ; begin setdbr macro
.384ace	08		php		                PHP
.384acf	e2 20		sep #$20	                SEP #$20        ; set A short
.384ad1	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.384ad3	48		pha		                PHA
.384ad4	ab		plb		                PLB
.384ad5	28		plp		                PLP
.384ad6	68		pla		                PLA             ; end setdbr macro
.384ad7	48		pha		                PHA             ; begin setdp macro
.384ad8	08		php		                PHP
.384ad9	c2 20		rep #$20	                REP #$20        ; set A long
.384adb	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.384ade	5b		tcd		                TCD
.384adf	28		plp		                PLP
.384ae0	68		pla		                PLA             ; end setdp macro
.384ae1	c2 30		rep #$30	                REP #$30        ; set A&X long
.384ae3	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.384ae6	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384ae8	85 28		sta $0348	                STA DOS_TEMP
.384aea	c8		iny		                INY
.384aeb	c8		iny		                INY
.384aec	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384aee	85 2a		sta $034a	                STA DOS_TEMP+2
.384af0	a0 00 00	ldy #$0000	                LDY #0
.384af3	a9 00 00	lda #$0000	                LDA #0
.384af6	97 28		sta [$0348],y	loop            STA [DOS_TEMP],Y
.384af8	c8		iny		                INY
.384af9	c8		iny		                INY
.384afa	cc 0e e0	cpy $37e00e	                CPY CLUSTER_SIZE
.384afd	d0 f7		bne $384af6	                BNE loop
.384aff	28		plp		                PLP
.384b00	2b		pld		                PLD
.384b01	ab		plb		                PLB
.384b02	7a		ply		                PLY
.384b03	6b		rtl		                RTL
.384b04					IF_COPY2BUFF
.384b04	5a		phy		                PHY
.384b05	8b		phb		                PHB
.384b06	0b		phd		                PHD
.384b07	08		php		                PHP
.384b08	48		pha		                PHA             ; begin setdbr macro
.384b09	08		php		                PHP
.384b0a	e2 20		sep #$20	                SEP #$20        ; set A short
.384b0c	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.384b0e	48		pha		                PHA
.384b0f	ab		plb		                PLB
.384b10	28		plp		                PLP
.384b11	68		pla		                PLA             ; end setdbr macro
.384b12	48		pha		                PHA             ; begin setdp macro
.384b13	08		php		                PHP
.384b14	c2 20		rep #$20	                REP #$20        ; set A long
.384b16	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.384b19	5b		tcd		                TCD
.384b1a	28		plp		                PLP
.384b1b	68		pla		                PLA             ; end setdp macro
.384b1c	c2 30		rep #$30	                REP #$30        ; set A&X long
.384b1e	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.384b21	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384b23	85 28		sta $0348	                STA DOS_TEMP
.384b25	c8		iny		                INY
.384b26	c8		iny		                INY
.384b27	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384b29	85 2a		sta $034a	                STA DOS_TEMP+2
.384b2b	a0 00 00	ldy #$0000	                LDY #0
.384b2e					copy_loop
.384b2e	e2 20		sep #$20	                SEP #$20        ; set A short
.384b30	a7 30		lda [$0350]	                LDA [DOS_SRC_PTR]           ; Copy a byte
.384b32	97 28		sta [$0348],y	                STA [DOS_TEMP],Y
.384b34	c2 20		rep #$20	                REP #$20        ; set A long
.384b36	c8		iny		                INY                         ; Count it
.384b37	cc 0e e0	cpy $37e00e	                CPY CLUSTER_SIZE            ; Have we reached the limit?
.384b3a	f0 14		beq $384b50	                BEQ done                    ; Yes: we're done
.384b3c	a5 30		lda $0350	                LDA DOS_SRC_PTR             ; Check if we copied the last byte
.384b3e	c5 38		cmp $0358	                CMP DOS_END_PTR
.384b40	d0 06		bne $384b48	                BNE next_byte
.384b42	a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.384b44	c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.384b46	f0 08		beq $384b50	                BEQ done                    ; Yes: we're done
.384b48	e6 30		inc $0350	next_byte       INC DOS_SRC_PTR             ; No: advance the source pointer
.384b4a	d0 e2		bne $384b2e	                BNE copy_loop
.384b4c	e6 32		inc $0352	                INC DOS_SRC_PTR+2
.384b4e	80 de		bra $384b2e	                BRA copy_loop               ; And try this next byte
.384b50	28		plp		done            PLP
.384b51	2b		pld		                PLD
.384b52	ab		plb		                PLB
.384b53	7a		ply		                PLY
.384b54	6b		rtl		                RTL
.384b55					IF_SAVE
.384b55	da		phx		                PHX
.384b56	5a		phy		                PHY
.384b57	0b		phd		                PHD
.384b58	8b		phb		                PHB
.384b59	08		php		                PHP
.384b5a	48		pha		                PHA             ; begin setdbr macro
.384b5b	08		php		                PHP
.384b5c	e2 20		sep #$20	                SEP #$20        ; set A short
.384b5e	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.384b60	48		pha		                PHA
.384b61	ab		plb		                PLB
.384b62	28		plp		                PLP
.384b63	68		pla		                PLA             ; end setdbr macro
.384b64	48		pha		                PHA             ; begin setdp macro
.384b65	08		php		                PHP
.384b66	c2 20		rep #$20	                REP #$20        ; set A long
.384b68	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.384b6b	5b		tcd		                TCD
.384b6c	28		plp		                PLP
.384b6d	68		pla		                PLA             ; end setdp macro
.384b6e	c2 30		rep #$30	                REP #$30        ; set A&X long
.384b70	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE := DOS_END_PTR - DOS_SRC_PTR
.384b73	38		sec		                SEC
.384b74	a5 38		lda $0358	                LDA DOS_END_PTR
.384b76	e5 30		sbc $0350	                SBC DOS_SRC_PTR
.384b78	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.384b7a	c8		iny		                INY
.384b7b	c8		iny		                INY
.384b7c	a5 3a		lda $035a	                LDA DOS_END_PTR+2
.384b7e	e5 32		sbc $0352	                SBC DOS_SRC_PTR+2
.384b80	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.384b82	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE++
.384b85	18		clc		                CLC
.384b86	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384b88	69 01 00	adc #$0001	                ADC #1
.384b8b	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.384b8d	90 09		bcc $384b98	                BCC first_block
.384b8f	c8		iny		                INY
.384b90	c8		iny		                INY
.384b91	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384b93	69 00 00	adc #$0000	                ADC #0
.384b96	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.384b98	22 c9 4a 38	jsl $384ac9	first_block     JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.384b9c	22 04 4b 38	jsl $384b04	                JSL IF_COPY2BUFF        ; Copy first (at most) 512 bytes of data to FD buffer
.384ba0	22 46 46 38	jsl $384646	                JSL IF_CREATE           ; Create file.
.384ba4	b0 03		bcs $384ba9	                BCS check_for_end
.384ba6	82 31 00	brl $384bda	                BRL IF_PASSFAILURE      ; If we couldn't create the file, pass the failure up
.384ba9	a5 30		lda $0350	check_for_end   LDA DOS_SRC_PTR         ; Check if we copied the last byte
.384bab	c5 38		cmp $0358	                CMP DOS_END_PTR
.384bad	d0 06		bne $384bb5	                BNE next_block
.384baf	a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.384bb1	c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.384bb3	f0 1d		beq $384bd2	                BEQ done                ; Yes: we're done
.384bb5	22 c9 4a 38	jsl $384ac9	next_block      JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.384bb9	22 04 4b 38	jsl $384b04	                JSL IF_COPY2BUFF        ; Copy next (at most) 512 bytes of data to FD buffer
.384bbd	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER   ; Make sure the CLUSTER is 0 to force an append
.384bc0	a9 00 00	lda #$0000	                LDA #0
.384bc3	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.384bc5	c8		iny		                INY
.384bc6	c8		iny		                INY
.384bc7	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.384bc9	22 2f 47 38	jsl $38472f	                JSL IF_WRITE            ; Append to the file
.384bcd	b0 da		bcs $384ba9	                BCS check_for_end       ; And try again
.384bcf	82 08 00	brl $384bda	                BRL IF_PASSFAILURE      ; If we couldn't update the file, pass the failure up
.384bd2	5c e1 4b 38	jmp $384be1	done            JML IF_SUCCESS
.384bd6					IF_FAILURE
.384bd6	e2 20		sep #$20	                SEP #$20        ; set A short
.384bd8	85 0e		sta $032e	                STA DOS_STATUS
.384bda	28		plp		IF_PASSFAILURE  PLP
.384bdb	18		clc		                CLC
.384bdc	ab		plb		                PLB
.384bdd	2b		pld		                PLD
.384bde	7a		ply		                PLY
.384bdf	fa		plx		                PLX
.384be0	6b		rtl		                RTL
.384be1					IF_SUCCESS
.384be1	e2 20		sep #$20	                SEP #$20        ; set A short
.384be3	64 00		stz $0320	                STZ BIOS_STATUS
.384be5	64 0e		stz $032e	                STZ DOS_STATUS
.384be7	28		plp		                PLP
.384be8	38		sec		                SEC
.384be9	ab		plb		                PLB
.384bea	2b		pld		                PLD
.384beb	7a		ply		                PLY
.384bec	fa		plx		                PLX
.384bed	6b		rtl		                RTL

;******  Return to file: src/kernel.asm


;******  Processing file: src/keyboard.asm

.384bee					KEYBOARD_INTERRUPT
.384bee	48		pha		                PHA             ; begin setdp macro
.384bef	08		php		                PHP
.384bf0	c2 20		rep #$20	                REP #$20        ; set A long
.384bf2	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.384bf5	5b		tcd		                TCD
.384bf6	28		plp		                PLP
.384bf7	68		pla		                PLA             ; end setdp macro
.384bf8	a2 00 00	ldx #$0000	                ldx #$0000
.384bfb	e2 10		sep #$10	                SEP #$10        ; set X short
.384bfd	e2 20		sep #$20	                SEP #$20        ; set A short
.384bff	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.384c03	29 01		and #$01	                AND #FNX1_INT00_KBD
.384c05	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.384c09					IRQ_HANDLER_FETCH
.384c09	af 60 10 af	lda $af1060	                LDA @lKBD_INPT_BUF      ; Get Scan Code from KeyBoard
.384c0d	85 88		sta $0f88	                STA KEYBOARD_SC_TMP     ; Save Code Immediately
.384c0f	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the Prefix was picked up before
.384c11	29 80		and #$80	                AND #$80
.384c13	c9 80		cmp #$80	                CMP #$80
.384c15	d0 10		bne $384c27	                BNE CHK_LSHIFT          ; No: do normal scan-code checks
.384c17	a5 87		lda $0f87	PREFIX_ON       LDA KEYBOARD_SC_FLG     ; Otherwise: clear prefix
.384c19	29 7f		and #$7f	                AND #$7F
.384c1b	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.384c1d	a5 88		lda $0f88	                LDA KEYBOARD_SC_TMP     ; Get the prefixed scan-code's character
.384c1f	aa		tax		                TAX
.384c20	bf 80 1a 39	lda $391a80,x	                LDA @lScanCode_Prefix_Set1, x
.384c24	4c ca 4c	jmp $384cca	                JMP KB_WR_2_SCREEN      ; And save it
.384c27	a5 88		lda $0f88	CHK_LSHIFT      LDA KEYBOARD_SC_TMP
.384c29	c9 2a		cmp #$2a	                CMP #$2A                ; Left Shift Pressed
.384c2b	d0 03		bne $384c30	                BNE NOT_KB_SET_LSHIFT
.384c2d	82 ad 00	brl $384cdd	                BRL KB_SET_SHIFT
.384c30					NOT_KB_SET_LSHIFT
.384c30	c9 aa		cmp #$aa	                CMP #$AA                ; Left Shift Unpressed
.384c32	d0 03		bne $384c37	                BNE NOT_KB_CLR_LSHIFT
.384c34	82 af 00	brl $384ce6	                BRL KB_CLR_SHIFT
.384c37					NOT_KB_CLR_LSHIFT
.384c37	c9 36		cmp #$36	                CMP #$36                ; Right Shift Pressed
.384c39	d0 03		bne $384c3e	                BNE NOT_KB_SET_RSHIFT
.384c3b	82 9f 00	brl $384cdd	                BRL KB_SET_SHIFT
.384c3e					NOT_KB_SET_RSHIFT
.384c3e	c9 b6		cmp #$b6	                CMP #$B6                ; Right Shift Unpressed
.384c40	d0 03		bne $384c45	                BNE NOT_KB_CLR_RSHIFT
.384c42	82 a1 00	brl $384ce6	                BRL KB_CLR_SHIFT
.384c45					NOT_KB_CLR_RSHIFT
.384c45	c9 1d		cmp #$1d	                CMP #$1D                ; Left CTRL pressed
.384c47	d0 03		bne $384c4c	                BNE NOT_KB_SET_CTRL
.384c49	82 a3 00	brl $384cef	                BRL KB_SET_CTRL
.384c4c					NOT_KB_SET_CTRL
.384c4c	c9 9d		cmp #$9d	                CMP #$9D                ; Left CTRL Unpressed
.384c4e	d0 03		bne $384c53	                BNE NOT_KB_CLR_CTRL
.384c50	82 a5 00	brl $384cf8	                BRL KB_CLR_CTRL
.384c53					NOT_KB_CLR_CTRL
.384c53	c9 38		cmp #$38	                CMP #$38                ; Left ALT Pressed
.384c55	d0 03		bne $384c5a	                BNE NOT_KB_SET_ALT
.384c57	82 a7 00	brl $384d01	                BRL KB_SET_ALT
.384c5a					NOT_KB_SET_ALT
.384c5a	c9 b8		cmp #$b8	                CMP #$B8                ; Left ALT Unpressed
.384c5c	d0 03		bne $384c61	                BNE NOT_KB_CLR_ALT
.384c5e	82 a9 00	brl $384d0a	                BRL KB_CLR_ALT
.384c61	c9 e0		cmp #$e0	NOT_KB_CLR_ALT  CMP #$E0                ; Prefixed scan code
.384c63	d0 03		bne $384c68	                BNE NOT_PREFIXED
.384c65	82 ab 00	brl $384d13	                BRL KB_SET_PREFIX
.384c68	c9 45		cmp #$45	NOT_PREFIXED    CMP #$45                ; Numlock Pressed
.384c6a	d0 03		bne $384c6f	                BNE NOT_KB_SET_NUM
.384c6c	82 b6 00	brl $384d25	                BRL KB_TOG_NUMLOCK
.384c6f	c9 46		cmp #$46	NOT_KB_SET_NUM  CMP #$46                ; Scroll Lock Pressed
.384c71	d0 03		bne $384c76	                BNE NOT_KB_SET_SCR
.384c73	82 a6 00	brl $384d1c	                BRL KB_TOG_SCRLOCK
.384c76	c9 3a		cmp #$3a	NOT_KB_SET_SCR  CMP #$3A                ; Caps Lock Pressed
.384c78	d0 03		bne $384c7d	                BNE NOT_KB_CAPSLOCK
.384c7a	82 bc 00	brl $384d39	                BRL KB_TOG_CAPLOCK
.384c7d	c9 58		cmp #$58	NOT_KB_CAPSLOCK CMP #$58                ; F12 Pressed
.384c7f	d0 09		bne $384c8a	                BNE KB_UNPRESSED
.384c81	a9 60		lda #$60	                LDA #KB_CREDITS         ; Yes: flag that the CREDITS key has been pressed
.384c83	8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.384c87	82 b5 00	brl $384d3f	                BRL KB_CHECK_B_DONE
.384c8a	29 80		and #$80	KB_UNPRESSED    AND #$80                ; See if the Scan Code is press or Depressed
.384c8c	c9 80		cmp #$80	                CMP #$80                ; Depress Status - We will not do anything at this point
.384c8e	d0 03		bne $384c93	                BNE KB_NORM_SC
.384c90	82 ac 00	brl $384d3f	                BRL KB_CHECK_B_DONE
.384c93	a5 88		lda $0f88	KB_NORM_SC      LDA KEYBOARD_SC_TMP       ;
.384c95	aa		tax		                TAX
.384c96	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the SHIFT Key is being Pushed
.384c98	29 10		and #$10	                AND #$10
.384c9a	c9 10		cmp #$10	                CMP #$10
.384c9c	f0 17		beq $384cb5	                BEQ SHIFT_KEY_ON
.384c9e	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the CTRL Key is being Pushed
.384ca0	29 20		and #$20	                AND #$20
.384ca2	c9 20		cmp #$20	                CMP #$20
.384ca4	f0 16		beq $384cbc	                BEQ CTRL_KEY_ON
.384ca6	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the ALT Key is being Pushed
.384ca8	29 40		and #$40	                AND #$40
.384caa	c9 40		cmp #$40	                CMP #$40
.384cac	f0 15		beq $384cc3	                BEQ ALT_KEY_ON
.384cae	bf 00 18 39	lda $391800,x	                LDA @lScanCode_Press_Set1, x
.384cb2	82 15 00	brl $384cca	                BRL KB_WR_2_SCREEN
.384cb5	bf 80 18 39	lda $391880,x	SHIFT_KEY_ON    LDA @lScanCode_Shift_Set1, x
.384cb9	82 0e 00	brl $384cca	                BRL KB_WR_2_SCREEN
.384cbc	bf 00 19 39	lda $391900,x	CTRL_KEY_ON     LDA @lScanCode_Ctrl_Set1, x
.384cc0	82 07 00	brl $384cca	                BRL KB_WR_2_SCREEN
.384cc3	bf 80 19 39	lda $391980,x	ALT_KEY_ON      LDA @lScanCode_Alt_Set1, x
.384cc7	82 00 00	brl $384cca	                BRL KB_WR_2_SCREEN
.384cca	c9 18		cmp #$18	KB_WR_2_SCREEN  CMP #$18                ; Is it SysRq?
.384ccc	d0 03		bne $384cd1	                BNE savechar
.384cce	4c 4f 4d	jmp $384d4f	                JMP programmerKey       ; Yes: trigger the programmer key
.384cd1	48		pha		savechar        PHA
.384cd2	c2 10		rep #$10	                REP #$10        ; set X long
.384cd4	20 5b 4d	jsr $384d5b	                JSR SAVEKEY
.384cd7	e2 20		sep #$20	                SEP #$20        ; set A short
.384cd9	68		pla		                PLA
.384cda	4c 3f 4d	jmp $384d3f	                JMP KB_CHECK_B_DONE
.384cdd	a5 87		lda $0f87	KB_SET_SHIFT    LDA KEYBOARD_SC_FLG
.384cdf	09 10		ora #$10	                ORA #$10
.384ce1	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.384ce3	4c 3f 4d	jmp $384d3f	                JMP KB_CHECK_B_DONE
.384ce6	a5 87		lda $0f87	KB_CLR_SHIFT    LDA KEYBOARD_SC_FLG
.384ce8	29 ef		and #$ef	                AND #$EF
.384cea	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.384cec	4c 3f 4d	jmp $384d3f	                JMP KB_CHECK_B_DONE
.384cef	a5 87		lda $0f87	KB_SET_CTRL     LDA KEYBOARD_SC_FLG
.384cf1	09 20		ora #$20	                ORA #$20
.384cf3	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.384cf5	4c 3f 4d	jmp $384d3f	                JMP KB_CHECK_B_DONE
.384cf8	a5 87		lda $0f87	KB_CLR_CTRL     LDA KEYBOARD_SC_FLG
.384cfa	29 df		and #$df	                AND #$DF
.384cfc	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.384cfe	4c 3f 4d	jmp $384d3f	                JMP KB_CHECK_B_DONE
.384d01	a5 87		lda $0f87	KB_SET_ALT      LDA KEYBOARD_SC_FLG
.384d03	09 40		ora #$40	                ORA #$40
.384d05	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.384d07	4c 3f 4d	jmp $384d3f	                JMP KB_CHECK_B_DONE
.384d0a	a5 87		lda $0f87	KB_CLR_ALT      LDA KEYBOARD_SC_FLG
.384d0c	29 bf		and #$bf	                AND #$BF
.384d0e	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.384d10	4c 3f 4d	jmp $384d3f	                JMP KB_CHECK_B_DONE
.384d13	a5 87		lda $0f87	KB_SET_PREFIX   LDA KEYBOARD_SC_FLG
.384d15	09 80		ora #$80	                ORA #$80
.384d17	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.384d19	4c 3f 4d	jmp $384d3f	                JMP KB_CHECK_B_DONE
.384d1c	a5 89		lda $0f89	KB_TOG_SCRLOCK  LDA KEYBOARD_LOCKS
.384d1e	49 01		eor #$01	                EOR #KB_SCROLL_LOCK         ; toggle the Scroll Lock flag
.384d20	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.384d22	4c 3f 4d	jmp $384d3f	                JMP KB_CHECK_B_DONE
.384d25	a5 87		lda $0f87	KB_TOG_NUMLOCK  LDA KEYBOARD_SC_FLG         ; Check flags...
.384d27	29 60		and #$60	                AND #$60                    ; ... is control-alt pressed?
.384d29	c9 60		cmp #$60	                CMP #$60
.384d2b	d0 03		bne $384d30	                BNE KB_TOG_NUMLOC2
.384d2d	82 63 ff	brl $384c93	                BRL KB_NORM_SC              ; No: treat as a BREAK key
.384d30	a5 89		lda $0f89	KB_TOG_NUMLOC2  LDA KEYBOARD_LOCKS
.384d32	49 02		eor #$02	                EOR #KB_NUM_LOCK            ; toggle the Num Lock flag
.384d34	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.384d36	4c 3f 4d	jmp $384d3f	                JMP KB_CHECK_B_DONE
.384d39	a5 89		lda $0f89	KB_TOG_CAPLOCK  LDA KEYBOARD_LOCKS
.384d3b	49 04		eor #$04	                EOR #KB_CAPS_LOCK           ; toggle the Caps Lock flag
.384d3d	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.384d3f					KB_CHECK_B_DONE
.384d3f	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.384d43	29 01		and #$01	                AND #OUT_BUF_FULL           ; Test bit $01 (if 1, Full)
.384d45	c9 01		cmp #$01	                CMP #OUT_BUF_FULL           ; if Still Byte in the Buffer, fetch it out
.384d47	d0 03		bne $384d4c	                BNE SET_LED
.384d49	4c 09 4c	jmp $384c09	                JMP IRQ_HANDLER_FETCH
.384d4c					SET_LED
.384d4c					KB_DONE
.384d4c	c2 30		rep #$30	                REP #$30        ; set A&X long
.384d4e	60		rts		                RTS
.384d4f					programmerKey
.384d4f	c2 30		rep #$30	                REP #$30        ; set A&X long
.384d51	68		pla		                PLA                     ; Get and throw-away the return address to the interrupt handler
.384d52	2b		pld		                PLD                     ; Restore the registers that were present when the handler was invoked
.384d53	ab		plb		                PLB
.384d54	7a		ply		                PLY
.384d55	fa		plx		                PLX
.384d56	68		pla		                PLA
.384d57	5c 08 10 38	jmp $381008	                JML BREAK               ; And go to the BRK handler directly to open the monitor
.384d5b					SAVEKEY
.384d5b	e2 20		sep #$20	                SEP #$20        ; set A short
.384d5d	48		pha		                PHA                     ; Save the character
.384d5e	a5 89		lda $0f89	                LDA KEYBOARD_LOCKS      ; Check the keyboard lock flags
.384d60	29 04		and #$04	                AND #KB_CAPS_LOCK       ; Is CAPS lock on?
.384d62	f0 0d		beq $384d71	                BEQ no_caps             ; No... just use the character as-is
.384d64	68		pla		                PLA                     ; Get the character back
.384d65	c9 61		cmp #$61	                CMP #'a'                ; Is it < 'a'
.384d67	90 09		bcc $384d72	                BLT check_break         ; Yes: just use as-is
.384d69	c9 7b		cmp #$7b	                CMP #'z'+1              ; Is it > 'z'
.384d6b	b0 05		bcs $384d72	                BGE check_break         ; Yes: just us as-is
.384d6d	29 df		and #$df	                AND #%11011111          ; Conver to upper case
.384d6f	80 01		bra $384d72	                BRA check_break
.384d71	68		pla		no_caps         PLA                     ; Restore the character
.384d72	c9 00		cmp #$00	check_break     CMP #0
.384d74	f0 18		beq $384d8e	                BEQ done
.384d76	c9 03		cmp #$03	                CMP #CHAR_CTRL_C        ; Is it CTRL-C?
.384d78	f0 15		beq $384d8f	                BEQ flag_break          ; Yes: flag a break
.384d7a	a6 8d		ldx $0f8d	no_break        LDX KEY_BUFFER_WPOS     ; So the Receive Character is saved in the Buffer
.384d7c	e0 80 00	cpx #$0080	                CPX #KEY_BUFFER_SIZE    ; Make sure we haven't been overboard.
.384d7f	b0 0d		bcs $384d8e	                BCS done                ; Stop storing - An error should ensue here...
.384d81	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER,X
.384d85	e8		inx		                INX
.384d86	86 8d		stx $0f8d	                STX KEY_BUFFER_WPOS
.384d88	a9 00		lda #$00	                LDA #$00
.384d8a	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X       ; Store a EOL in the following location for good measure
.384d8e	60		rts		done            RTS
.384d8f					flag_break
.384d8f	e2 20		sep #$20	                SEP #$20        ; set A short
.384d91	a9 80		lda #$80	                LDA #KB_CTRL_C          ; Flag that an interrupt key has been pressed
.384d93	85 8a		sta $0f8a	                STA KEYFLAG             ; The interpreter should see this soon and throw a BREAK
.384d95	60		rts		                RTS
.384d96					KBD_GETC
.384d96	da		phx		                PHX
.384d97	0b		phd		                PHD
.384d98	08		php		                PHP
.384d99	48		pha		                PHA             ; begin setdp macro
.384d9a	08		php		                PHP
.384d9b	c2 20		rep #$20	                REP #$20        ; set A long
.384d9d	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.384da0	5b		tcd		                TCD
.384da1	28		plp		                PLP
.384da2	68		pla		                PLA             ; end setdp macro
.384da3	e2 20		sep #$20	                SEP #$20        ; set A short
.384da5	c2 10		rep #$10	                REP #$10        ; set X long
.384da7	58		cli		                CLI                     ; Make sure interrupts can happen
.384da8	af 8a 0f 00	lda $000f8a	get_wait        LDA @lKEYFLAG           ; Check the keyboard control flag
.384dac	29 60		and #$60	                AND #KB_CREDITS         ; Are the credits flagged?
.384dae	c9 60		cmp #$60	                CMP #KB_CREDITS
.384db0	d0 0a		bne $384dbc	                BNE check_buffer        ; No: check the key buffer
.384db2	a9 00		lda #$00	                LDA #0                  ; Yes: clear the flags
.384db4	8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.384db8	22 eb 12 39	jsl $3912eb	                JSL SHOW_CREDITS        ; Then show the credits screen and wait for a key press
.384dbc	a6 8b		ldx $0f8b	check_buffer    LDX KEY_BUFFER_RPOS     ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.384dbe	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS
.384dc0	90 02		bcc $384dc4	                BCC read_buff           ; Yes: a key is present, read it
.384dc2	80 e4		bra $384da8	                BRA get_wait            ; Otherwise, keep waiting
.384dc4	78		sei		read_buff       SEI                     ; Don't interrupt me!
.384dc5	b5 00		lda $0f00,x	                LDA KEY_BUFFER,X        ; Get the key
.384dc7	e8		inx		                INX                     ; And move to the next key
.384dc8	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS     ; Did we just read the last key?
.384dca	f0 07		beq $384dd3	                BEQ reset_indexes       ; Yes: return to 0 position
.384dcc	86 8b		stx $0f8b	                STX KEY_BUFFER_RPOS     ; Otherwise: Update the read index
.384dce	58		cli		                CLI
.384dcf	28		plp		done            PLP                     ; Restore status and interrupts
.384dd0	2b		pld		                PLD
.384dd1	fa		plx		                PLX
.384dd2	6b		rtl		                RTL
.384dd3	64 8b		stz $0f8b	reset_indexes   STZ KEY_BUFFER_RPOS     ; Reset read index to the beginning
.384dd5	64 8d		stz $0f8d	                STZ KEY_BUFFER_WPOS     ; Reset the write index to the beginning
.384dd7	80 f6		bra $384dcf	                BRA done

;******  Return to file: src/kernel.asm


;******  Processing file: src/uart.asm

=$af13f8				UART1_BASE = $AF13F8        ; Base address for UART 1 (COM1)
=$af12f8				UART2_BASE = $AF12F8        ; Base address for UART 2 (COM2)
=$00					UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00					UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01					UART_DLH = $01              ; Divisor Latch High Byte
=$01					UART_IER = UART_DLH         ; Interupt Enable Register
=$02					UART_FCR = $02              ; FIFO Control Register
=$02					UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03					UART_LCR = $03              ; Line Control Register
=$04					UART_MCR = $04              ; Modem Control REgister
=$05					UART_LSR = $05              ; Line Status Register
=$06					UART_MSR = $06              ; Modem Status Register
=$07					UART_SR = $07               ; Scratch Register
=$20					UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10					UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08					UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04					UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02					UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01					UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80					IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40					IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20					IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00					IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02					IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04					IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06					IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c					IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01					IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80					LCR_DLB = $80               ; Divisor Latch Access Bit
=$60					LCR_SBE = $60               ; Set Break Enable
=$00					LCR_PARITY_NONE = $00       ; Parity: None
=$08					LCR_PARITY_ODD = $08        ; Parity: Odd
=$18					LCR_PARITY_EVEN = $18       ; Parity: Even
=$28					LCR_PARITY_MARK = $28       ; Parity: Mark
=$38					LCR_PARITY_SPACE = $38      ; Parity: Space
=$00					LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04					LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00					LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01					LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02					LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03					LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80					LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40					LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20					LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10					LSR_BREAK_INT = $10         ; Break interrupt
=$08					LSR_ERR_FRAME = $08         ; Framing error
=$04					LSR_ERR_PARITY = $04        ; Parity error
=$02					LSR_ERR_OVERRUN = $02       ; Overrun error
=$01					LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384					UART_300 = 384              ; Code for 300 bps
=96					UART_1200 = 96              ; Code for 1200 bps
=48					UART_2400 = 48              ; Code for 2400 bps
=24					UART_4800 = 24              ; Code for 4800 bps
=12					UART_9600 = 12              ; Code for 9600 bps
=6					UART_19200 = 6              ; Code for 19200 bps
=3					UART_38400 = 3              ; Code for 28400 bps
=2					UART_57600 = 2              ; Code for 57600 bps
=1					UART_115200 = 1             ; Code for 115200 bps
.384dd9					UART_SELECT
.384dd9	08		php		            PHP
.384dda	c2 20		rep #$20	                REP #$20        ; set A long
.384ddc	c9 02 00	cmp #$0002	            CMP #2
.384ddf	f0 07		beq $384de8	            BEQ is_COM2
.384de1	c2 20		rep #$20	                REP #$20        ; set A long
.384de3	a9 f8 13	lda #$13f8	            LDA #<>UART1_BASE
.384de6	80 05		bra $384ded	            BRA setaddr
.384de8					is_COM2
.384de8	c2 20		rep #$20	                REP #$20        ; set A long
.384dea	a9 f8 12	lda #$12f8	            LDA #<>UART2_BASE
.384ded	8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.384df1	e2 20		sep #$20	                SEP #$20        ; set A short
.384df3	a9 af		lda #$af	            LDA #`UART1_BASE
.384df5	8f 02 07 00	sta $000702	            STA @lCURRUART+2
.384df9	28		plp		            PLP
.384dfa	6b		rtl		            RTL
.384dfb					UART_SETBPS
.384dfb	08		php		            PHP
.384dfc	0b		phd		            PHD
.384dfd	48		pha		                PHA             ; begin setdp macro
.384dfe	08		php		                PHP
.384dff	c2 20		rep #$20	                REP #$20        ; set A long
.384e01	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.384e04	5b		tcd		                TCD
.384e05	28		plp		                PLP
.384e06	68		pla		                PLA             ; end setdp macro
.384e07	c2 30		rep #$30	                REP #$30        ; set A&X long
.384e09	48		pha		            PHA
.384e0a	e2 20		sep #$20	                SEP #$20        ; set A short
.384e0c	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.384e0f	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.384e11	09 80		ora #$80	            ORA #LCR_DLB
.384e13	97 00		sta [$0700],y	            STA [CURRUART],Y
.384e15	c2 20		rep #$20	                REP #$20        ; set A long
.384e17	68		pla		            PLA
.384e18	a0 00 00	ldy #$0000	            LDY #UART_DLL
.384e1b	97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.384e1d	e2 20		sep #$20	                SEP #$20        ; set A short
.384e1f	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.384e22	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.384e24	49 80		eor #$80	            EOR #LCR_DLB
.384e26	97 00		sta [$0700],y	            STA [CURRUART],Y
.384e28	2b		pld		            PLD
.384e29	28		plp		            PLP
.384e2a	6b		rtl		            RTL
.384e2b					UART_SETLCR
.384e2b	08		php		            PHP
.384e2c	0b		phd		            PHD
.384e2d	48		pha		                PHA             ; begin setdp macro
.384e2e	08		php		                PHP
.384e2f	c2 20		rep #$20	                REP #$20        ; set A long
.384e31	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.384e34	5b		tcd		                TCD
.384e35	28		plp		                PLP
.384e36	68		pla		                PLA             ; end setdp macro
.384e37	e2 20		sep #$20	                SEP #$20        ; set A short
.384e39	c2 10		rep #$10	                REP #$10        ; set X long
.384e3b	29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.384e3d	a0 03 00	ldy #$0003	            LDY #UART_LCR
.384e40	97 00		sta [$0700],y	            STA [CURRUART],Y
.384e42	2b		pld		            PLD
.384e43	28		plp		            PLP
.384e44	6b		rtl		            RTL
.384e45					UART_INIT
.384e45	08		php		            PHP
.384e46	0b		phd		            PHD
.384e47	c2 30		rep #$30	                REP #$30        ; set A&X long
.384e49	48		pha		                PHA             ; begin setdp macro
.384e4a	08		php		                PHP
.384e4b	c2 20		rep #$20	                REP #$20        ; set A long
.384e4d	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.384e50	5b		tcd		                TCD
.384e51	28		plp		                PLP
.384e52	68		pla		                PLA             ; end setdp macro
.384e53	a9 01 00	lda #$0001	            LDA #UART_115200
.384e56	22 fb 4d 38	jsl $384dfb	            JSL UART_SETBPS
.384e5a	e2 20		sep #$20	                SEP #$20        ; set A short
.384e5c	a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.384e5e	22 2b 4e 38	jsl $384e2b	            JSL UART_SETLCR
.384e62	a9 e1		lda #$e1	            LDA #%11100001
.384e64	a0 02 00	ldy #$0002	            LDY #UART_FCR
.384e67	97 00		sta [$0700],y	            STA [CURRUART],Y
.384e69	2b		pld		            PLD
.384e6a	28		plp		            PLP
.384e6b	6b		rtl		            RTL
.384e6c					UART_GETC
.384e6c	08		php		            PHP
.384e6d	0b		phd		            PHD
.384e6e	c2 30		rep #$30	                REP #$30        ; set A&X long
.384e70	48		pha		                PHA             ; begin setdp macro
.384e71	08		php		                PHP
.384e72	c2 20		rep #$20	                REP #$20        ; set A long
.384e74	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.384e77	5b		tcd		                TCD
.384e78	28		plp		                PLP
.384e79	68		pla		                PLA             ; end setdp macro
.384e7a	e2 20		sep #$20	                SEP #$20        ; set A short
.384e7c	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.384e7f	b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.384e81	29 01		and #$01	            AND #LSR_DATA_AVAIL
.384e83	f0 fa		beq $384e7f	            BEQ wait_getc           ; If the flag is clear, wait
.384e85	a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.384e88	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.384e8a	2b		pld		            PLD
.384e8b	28		plp		            PLP
.384e8c	6b		rtl		            RTL
.384e8d					UART_PUTC
.384e8d	08		php		            PHP
.384e8e	0b		phd		            PHD
.384e8f	c2 30		rep #$30	                REP #$30        ; set A&X long
.384e91	48		pha		                PHA             ; begin setdp macro
.384e92	08		php		                PHP
.384e93	c2 20		rep #$20	                REP #$20        ; set A long
.384e95	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.384e98	5b		tcd		                TCD
.384e99	28		plp		                PLP
.384e9a	68		pla		                PLA             ; end setdp macro
.384e9b	e2 20		sep #$20	                SEP #$20        ; set A short
.384e9d	48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.384e9e	a0 05 00	ldy #$0005	            LDY #UART_LSR
.384ea1	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.384ea3	29 20		and #$20	            AND #LSR_XMIT_EMPTY
.384ea5	f0 fa		beq $384ea1	            BEQ wait_putc
.384ea7	68		pla		            PLA
.384ea8	a0 00 00	ldy #$0000	            LDY #UART_TRHB
.384eab	97 00		sta [$0700],y	            STA [CURRUART],Y
.384ead	2b		pld		            PLD
.384eae	28		plp		            PLP
.384eaf	6b		rtl		            RTL

;******  Return to file: src/kernel.asm


;******  Processing file: src/Joystick.asm

.384eb0					JOYSTICK_SET_NES_MODE
.384eb0	e2 20		sep #$20	                SEP #$20        ; set A short
.384eb2	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.384eb6	29 fb		and #$fb	          AND #~NES_SNES_JOY  ; 0 = NES (8 bit shift)
.384eb8	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.384ebc	6b		rtl		          RTL
.384ebd					JOYSTICK_SET_SNES_MODE
.384ebd	e2 20		sep #$20	                SEP #$20        ; set A short
.384ebf	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.384ec3	29 fb		and #$fb	          AND #~NES_SNES_JOY
.384ec5	09 04		ora #$04	          ORA #NES_SNES_JOY   ; 1 = SNES (12 Bit Shift)
.384ec7	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.384ecb	6b		rtl		          RTL
.384ecc					JOYSTICK_ENABLE_NES_SNES_PORT0
.384ecc	e2 20		sep #$20	                SEP #$20        ; set A short
.384ece	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.384ed2	29 fe		and #$fe	          AND #~NES_SNES_EN0
.384ed4	09 01		ora #$01	          ORA #NES_SNES_EN0
.384ed6	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.384eda	6b		rtl		          RTL
.384edb					JOYSTICK_ENABLE_NES_SNES_PORT1
.384edb	e2 20		sep #$20	                SEP #$20        ; set A short
.384edd	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.384ee1	29 fd		and #$fd	          AND #~NES_SNES_EN1
.384ee3	09 02		ora #$02	          ORA #NES_SNES_EN1
.384ee5	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.384ee9	6b		rtl		          RTL
.384eea					JOYSTICK_DISABLE_NES_SNES_PORT0
.384eea	e2 20		sep #$20	                SEP #$20        ; set A short
.384eec	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.384ef0	29 fe		and #$fe	          AND #~NES_SNES_EN0
.384ef2	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.384ef6	6b		rtl		          RTL
.384ef7					JOYSTICK_DISABLE_NES_SNES_PORT1
.384ef7	e2 20		sep #$20	                SEP #$20        ; set A short
.384ef9	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.384efd	29 fd		and #$fd	          AND #~NES_SNES_EN1
.384eff	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.384f03	6b		rtl		          RTL
.384f04					JOYSTICK_NES_SNES_TRIG_WITH_POLL
.384f04	e2 20		sep #$20	                SEP #$20        ; set A short
.384f06	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.384f0a	29 03		and #$03	          AND #(NES_SNES_EN0 | NES_SNES_EN1)
.384f0c	c9 00		cmp #$00	          CMP #$00
.384f0e	f0 14		beq $384f24	          BEQ END_OF_JOYSTICK_POLL
.384f10	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.384f14	09 80		ora #$80	          ORA #NES_SNES_TRIG   ; Set to 1 (Will auto Clear)
.384f16	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.384f1a					JOYSTICK_POLLING_ISNOTOVER
.384f1a	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE ;
.384f1e	29 40		and #$40	          AND #NES_SNES_DONE
.384f20	c9 40		cmp #$40	          CMP #NES_SNES_DONE
.384f22	d0 f6		bne $384f1a	          BNE JOYSTICK_POLLING_ISNOTOVER
.384f24					END_OF_JOYSTICK_POLL
.384f24	6b		rtl		          RTL

;******  Return to file: src/kernel.asm

.390400					IBOOT
.390400	18		clc		                CLC           ; clear the carry flag
.390401	fb		xce		                XCE           ; move carry to emulation flag.
.390402	78		sei		                SEI
.390403	c2 30		rep #$30	                REP #$30        ; set A&X long
.390405	a9 ff fe	lda #$feff	                LDA #STACK_END   ; initialize stack pointer
.390408	1b		tcs		                TAS
.390409	48		pha		                PHA             ; begin setdp macro
.39040a	08		php		                PHP
.39040b	c2 20		rep #$20	                REP #$20        ; set A long
.39040d	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390410	5b		tcd		                TCD
.390411	28		plp		                PLP
.390412	68		pla		                PLA             ; end setdp macro
.390413	e2 20		sep #$20	                SEP #$20        ; set A short
.390415	a2 00 00	ldx #$0000	                LDX #$0000
.390418	a9 00		lda #$00	                LDA #$00
.39041a					CLEAR_MEM_LOOP
.39041a	95 00		sta $00,x	                STA $0000, X
.39041c	e8		inx		                INX
.39041d	e0 00 01	cpx #$0100	                CPX #$0100
.390420	d0 f8		bne $39041a	                BNE CLEAR_MEM_LOOP
.390422	ea		nop		                NOP
.390423	a9 ff		lda #$ff	                LDA #$FF
.390425	8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.390429	8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.39042d	8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.390431	8f 4b 01 00	sta $00014b	                STA @lINT_EDGE_REG3
.390435	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390439	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.39043d	8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.390441	8f 4f 01 00	sta $00014f	                STA @lINT_MASK_REG3
.390445	22 0d 0f 39	jsl $390f0d	                JSL INITRTC               ; Initialize the RTC
.390449	c2 30		rep #$30	                REP #$30        ; set A&X long
.39044b	a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.39044e	85 0c		sta $0c		                STA SCREENBEGIN
.390450	85 17		sta $17		                STA CURSORPOS
.390452	a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR   ; Set the initial COLOR cursor position
.390455	85 1f		sta $1f		                STA COLORPOS
.390457	e2 20		sep #$20	                SEP #$20        ; set A short
.390459	a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.39045b	85 0e		sta $0e		                STA SCREENBEGIN+2
.39045d	85 19		sta $19		                STA CURSORPOS+2
.39045f	a9 af		lda #$af	                LDA #`CS_COLOR_MEM_PTR    ; Set the initial COLOR cursor position
.390461	85 21		sta $21		                STA COLORPOS+2
.390463	e2 20		sep #$20	                SEP #$20        ; set A short
.390465	a9 00		lda #$00	                LDA #$00
.390467	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG     ; Clear the Keyboard Flag
.39046a	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.39046c	8f 00 f1 af	sta $aff100	                STA $AFF100
.390470	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.390472	8f 00 f1 af	sta $aff100	                STA $AFF100
.390476	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390478	8f 00 f1 af	sta $aff100	                STA $AFF100
.39047c	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.39047e	8f 00 f1 af	sta $aff100	                STA $AFF100
.390482	c2 30		rep #$30	                REP #$30        ; set A&X long
.390484	a2 48 00	ldx #$0048	                LDX #72
.390487	86 0f		stx $0f		                STX COLS_VISIBLE
.390489	a0 34 00	ldy #$0034	                LDY #52
.39048c	84 13		sty $13		                STY LINES_VISIBLE
.39048e	a2 80 00	ldx #$0080	                LDX #128
.390491	86 11		stx $11		                STX COLS_PER_LINE
.390493	a0 40 00	ldy #$0040	                LDY #64
.390496	84 15		sty $15		                STY LINES_MAX
.390498	a9 ed 00	lda #$00ed	                LDA #$ED                  ; Set the default text color to light gray on dark gray
.39049b	85 1e		sta $1e		                STA CURCOLOR
.39049d	22 dc 10 38	jsl $3810dc	                JSL INITCODEC
.3904a1	22 b0 10 38	jsl $3810b0	                JSL INITSUPERIO
.3904a5	22 c4 10 38	jsl $3810c4	                JSL INITGAMMATABLE
.3904a9	22 c8 10 38	jsl $3810c8	                JSL INITALLLUT
.3904ad	22 ac 10 38	jsl $3810ac	                JSL INITCHLUT
.3904b1	22 7e 0c 39	jsl $390c7e	                JSL INITMOUSEPOINTER
.3904b5	22 bc 10 38	jsl $3810bc	                JSL INITCURSOR
.3904b9	22 cc 10 38	jsl $3810cc	                JSL INITVKYTXTMODE
.3904bd	22 53 0c 39	jsl $390c53	                JSL IINITFONTSET
.3904c1	22 41 09 39	jsl $390941	                JSL ICLRSCREEN  ; Clear Screen and Set a standard color in Color Memory
.3904c5	a9 01 00	lda #$0001	                LDA #CHAN_COM1    ; Initialize COM1
.3904c8	22 d9 4d 38	jsl $384dd9	                JSL UART_SELECT
.3904cc	22 45 4e 38	jsl $384e45	                JSL UART_INIT
.3904d0	a9 02 00	lda #$0002	                LDA #CHAN_COM2    ; Initialize COM2
.3904d3	22 d9 4d 38	jsl $384dd9	                JSL UART_SELECT
.3904d7	22 45 4e 38	jsl $384e45	                JSL UART_INIT
.3904db	a9 00 00	lda #$0000	                LDA #0
.3904de	22 38 10 38	jsl $381038	                JSL SETIN
.3904e2	22 3c 10 38	jsl $38103c	                JSL SETOUT
.3904e6	c2 20		rep #$20	                REP #$20        ; set A long
.3904e8	a2 00 00	ldx #$0000	                LDX #0
.3904eb	a0 00 00	ldy #$0000	                LDY #0
.3904ee	22 62 08 39	jsl $390862	                JSL ILOCATE
.3904f2	c2 30		rep #$30	                REP #$30        ; set A&X long
.3904f4					greet
.3904f4	48		pha		                PHA             ; begin setdbr macro
.3904f5	08		php		                PHP
.3904f6	e2 20		sep #$20	                SEP #$20        ; set A short
.3904f8	a9 39		lda #$39	                LDA #`greet_msg
.3904fa	48		pha		                PHA
.3904fb	ab		plb		                PLB
.3904fc	28		plp		                PLP
.3904fd	68		pla		                PLA             ; end setdbr macro
.3904fe	a2 47 13	ldx #$1347	                LDX #<>greet_msg
.390501	22 32 06 39	jsl $390632	                JSL IPRINT       ; print the first line
.390505	22 6c 09 39	jsl $39096c	                JSL ICOLORFLAG  ; This is to set the Color Memory for the Logo
.390509	48		pha		                PHA             ; begin setdp macro
.39050a	08		php		                PHP
.39050b	c2 20		rep #$20	                REP #$20        ; set A long
.39050d	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390510	5b		tcd		                TCD
.390511	28		plp		                PLP
.390512	68		pla		                PLA             ; end setdp macro
.390513	22 b4 10 38	jsl $3810b4	                JSL INITKEYBOARD ;
.390517	e2 20		sep #$20	                SEP #$20        ; set A short
.390519	c2 10		rep #$10	                REP #$10        ; set X long
.39051b	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.39051d	8f 00 f1 af	sta $aff100	                STA $AFF100
.390521	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.390523	8f 00 f1 af	sta $aff100	                STA $AFF100
.390527	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390529	8f 00 f1 af	sta $aff100	                STA $AFF100
.39052d	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.39052f	8f 00 f1 af	sta $aff100	                STA $AFF100
.390533	a9 83		lda #$83	                LDA #$83 ; Channel Zero - No Atteniation
.390535	8f 00 f1 af	sta $aff100	                STA $AFF100
.390539	a9 12		lda #$12	                LDA #$12 ; Channel Zero - No Atteniation
.39053b	8f 00 f1 af	sta $aff100	                STA $AFF100
.39053f	a9 90		lda #$90	                LDA #$90 ; Channel One - No Atteniation
.390541	8f 00 f1 af	sta $aff100	                STA $AFF100
.390545	a2 00 40	ldx #$4000	                LDX #16384      ; 400ms
.390548	22 de 12 39	jsl $3912de	          		 	JSL ILOOP_MS
.39054c	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.39054e	8f 00 f1 af	sta $aff100	                STA $AFF100
.390552	58		cli		                CLI                   ; Make sure no Interrupt will come and fuck up Init before this point.
.390553	e2 20		sep #$20	                SEP #$20        ; set A short
.390555	c2 10		rep #$10	                REP #$10        ; set X long
.390557	48		pha		                PHA             ; begin setdbr macro
.390558	08		php		                PHP
.390559	e2 20		sep #$20	                SEP #$20        ; set A short
.39055b	a9 39		lda #$39	                LDA #`greet_msg
.39055d	48		pha		                PHA
.39055e	ab		plb		                PLB
.39055f	28		plp		                PLP
.390560	68		pla		                PLA             ; end setdbr macro
.390561	af 0e e8 af	lda $afe80e	                LDA @lDIP_BOOTMODE    ; {HD_INSTALLED, 5'b0_0000, BOOT_MODE[1], BOOT_MODE[0]}
.390565	29 03		and #$03	                AND #%00000011        ; Look at the mode bits
.390567	c9 00		cmp #$00	                CMP #DIP_BOOT_IDE     ; DIP set for IDE?
.390569	f0 14		beq $39057f	                BEQ BOOTIDE           ; Yes: Boot from the IDE
.39056b	c9 01		cmp #$01	                CMP #DIP_BOOT_SDCARD  ; DIP set for SD card?
.39056d	f0 0b		beq $39057a	                BEQ BOOTSDC           ; Yes: try to boot from the SD card
.39056f	c9 02		cmp #$02	                CMP #DIP_BOOT_FLOPPY  ; DIP set for floppy?
.390571	f0 11		beq $390584	                BEQ BOOTFLOPPY        ; Yes: try to boot from the floppy
.390573	5c 00 00 3a	jmp $3a0000	BOOTBASIC       JML BASIC             ; Cold start of the BASIC interpreter (or its replacement)
.390577	ea		nop		CREDIT_LOCK     NOP
.390578	80 fd		bra $390577	                BRA CREDIT_LOCK
.39057a					BOOTSDC
.39057a	a2 ec 16	ldx #$16ec	                LDX #<>sdcard_notimpl ; Print a message saying SD card booting is not implemented
.39057d	80 08		bra $390587	                BRA PR_BOOT_ERROR
.39057f					BOOTIDE
.39057f	a2 19 17	ldx #$1719	                LDX #<>ide_notimpl    ; Print a message saying SD card booting is not implemented
.390582	80 03		bra $390587	                BRA PR_BOOT_ERROR
.390584					BOOTFLOPPY
.390584	a2 48 17	ldx #$1748	                LDX #<>floppy_notimpl ; Print a message saying SD card booting is not implemented
.390587	22 32 06 39	jsl $390632	PR_BOOT_ERROR   JSL IPRINT
.39058b	ea		nop		LOOP_FOREVER    NOP
.39058c	80 fd		bra $39058b	                BRA LOOP_FOREVER
.39058e					IBREAK
.39058e	48		pha		                PHA             ; begin setdp macro
.39058f	08		php		                PHP
.390590	c2 20		rep #$20	                REP #$20        ; set A long
.390592	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390595	5b		tcd		                TCD
.390596	28		plp		                PLP
.390597	68		pla		                PLA             ; end setdp macro
.390598	68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.390599	8f 48 02 00	sta $000248	                STA CPUY
.39059d	68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.39059e	8f 46 02 00	sta $000246	                STA CPUX
.3905a2	68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.3905a3	8f 44 02 00	sta $000244	                STA CPUA
.3905a7	68		pla		                PLA
.3905a8	8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.3905ac	e2 20		sep #$20	                SEP #$20        ; set A short
.3905ae	68		pla		                PLA             ; Pull Data Bank (8 bits)
.3905af	8f 4e 02 00	sta $00024e	                STA CPUDBR
.3905b3	68		pla		                PLA             ; Pull Flags (8 bits)
.3905b4	8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.3905b8	c2 20		rep #$20	                REP #$20        ; set A long
.3905ba	68		pla		                PLA             ; Pull Program Counter (16 bits)
.3905bb	8f 40 02 00	sta $000240	                STA CPUPC
.3905bf	e2 20		sep #$20	                SEP #$20        ; set A short
.3905c1	68		pla		                PLA             ; Pull Program Bank (8 bits)
.3905c2	8f 42 02 00	sta $000242	                STA CPUPBR
.3905c6	c2 20		rep #$20	                REP #$20        ; set A long
.3905c8	3b		tsc		                TSA             ; Get the stack
.3905c9	8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.3905cd	a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.3905d0	1b		tcs		                TAS
.3905d1	5c 04 00 3a	jmp $3a0004	                JML MONITOR
.3905d5					IREADY
.3905d5	48		pha		                PHA             ; begin setdbr macro
.3905d6	08		php		                PHP
.3905d7	e2 20		sep #$20	                SEP #$20        ; set A short
.3905d9	a9 39		lda #$39	                LDA #`ready_msg
.3905db	48		pha		                PHA
.3905dc	ab		plb		                PLB
.3905dd	28		plp		                PLP
.3905de	68		pla		                PLA             ; end setdbr macro
.3905df	e2 20		sep #$20	                SEP #$20        ; set A short
.3905e1	a2 7a 17	ldx #$177a	                LDX #<>ready_msg
.3905e4	22 32 06 39	jsl $390632	                JSL IPRINT
.3905e8					IREADYWAIT
.3905e8	22 02 06 39	jsl $390602	                JSL IGETCHE
.3905ec	80 fa		bra $3905e8	                BRA IREADYWAIT
.3905ee	db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.3905ef	db		stp		IRETURN         STP
.3905f0	08		php		ISETIN          PHP
.3905f1	e2 20		sep #$20	                SEP #$20        ; set A short
.3905f3	8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.3905f7	28		plp		                PLP
.3905f8	6b		rtl		                RTL
.3905f9	08		php		ISETOUT         PHP
.3905fa	e2 20		sep #$20	                SEP #$20        ; set A short
.3905fc	8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.390600	28		plp		                PLP
.390601	6b		rtl		                RTL
.390602	22 0b 06 39	jsl $39060b	IGETCHE         JSL IGETCHW
.390606	22 52 06 39	jsl $390652	                JSL IPUTC
.39060a	6b		rtl		                RTL
.39060b					IGETCHW
.39060b	08		php		                PHP
.39060c	e2 20		sep #$20	                SEP #$20        ; set A short
.39060e	af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.390612	f0 17		beq $39062b	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.390614	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390616	f0 09		beq $390621	                BEQ getc_uart       ; Yes: handle reading from the UART
.390618	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.39061a	f0 05		beq $390621	                BEQ getc_uart       ; Yes: handle reading from the UART
.39061c	a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.39061e	28		plp		                PLP
.39061f	38		sec		                SEC                 ; And return carry set
.390620	6b		rtl		                RTL
.390621	22 d9 4d 38	jsl $384dd9	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.390625	22 6c 4e 38	jsl $384e6c	                JSL UART_GETC       ; Get the charater from the COM port
.390629	80 04		bra $39062f	                BRA done
.39062b	22 96 4d 38	jsl $384d96	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.39062f	28		plp		done            PLP
.390630	18		clc		                CLC                 ; Return carry clear for valid data
.390631	6b		rtl		                RTL
.390632	22 3b 06 39	jsl $39063b	IPRINT          JSL IPUTS
.390636	22 78 07 39	jsl $390778	                JSL IPRINTCR
.39063a	6b		rtl		                RTL
.39063b	48		pha		IPUTS           PHA
.39063c	08		php		                PHP
.39063d	e2 20		sep #$20	                SEP #$20        ; set A short
.39063f	c2 10		rep #$10	                REP #$10        ; set X long
.390641	bd 00 00	lda $390000,x	iputs1          LDA $0,b,x      ; read from the string
.390644	f0 08		beq $39064e	                BEQ iputs_done
.390646	22 52 06 39	jsl $390652	iputs2          JSL IPUTC
.39064a	e8		inx		iputs3          INX
.39064b	4c 41 06	jmp $390641	                JMP iputs1
.39064e	e8		inx		iputs_done      INX
.39064f	28		plp		                PLP
.390650	68		pla		                PLA
.390651	6b		rtl		                RTL
.390652					IPUTC
.390652	da		phx		                PHX
.390653	5a		phy		                PHY
.390654	0b		phd		                PHD
.390655	8b		phb		                PHB
.390656	08		php		                PHP                 ; stash the flags (we'll be changing M)
.390657	48		pha		                PHA             ; begin setdp macro
.390658	08		php		                PHP
.390659	c2 20		rep #$20	                REP #$20        ; set A long
.39065b	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39065e	5b		tcd		                TCD
.39065f	28		plp		                PLP
.390660	68		pla		                PLA             ; end setdp macro
.390661	48		pha		                PHA             ; begin setdbr macro
.390662	08		php		                PHP
.390663	e2 20		sep #$20	                SEP #$20        ; set A short
.390665	a9 00		lda #$00	                LDA #0
.390667	48		pha		                PHA
.390668	ab		plb		                PLB
.390669	28		plp		                PLP
.39066a	68		pla		                PLA             ; end setdbr macro
.39066b	e2 20		sep #$20	                SEP #$20        ; set A short
.39066d	c2 10		rep #$10	                REP #$10        ; set X long
.39066f	48		pha		                PHA                 ; Save the character to print
.390670	af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.390674	f0 16		beq $39068c	                BEQ putc_screen     ; If it's 0: print to the screen
.390676	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390678	f0 07		beq $390681	                BEQ putc_uart       ; Yes: handle printing to the UART
.39067a	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.39067c	f0 03		beq $390681	                BEQ putc_uart       ; Yes: handle printing to the UART
.39067e	68		pla		                PLA                 ; Otherwise, just exit
.39067f	80 4f		bra $3906d0	                BRA done
.390681	22 d9 4d 38	jsl $384dd9	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.390685	68		pla		                PLA                 ; Recover the character to send
.390686	22 8d 4e 38	jsl $384e8d	                JSL UART_PUTC       ; Send the character
.39068a	80 44		bra $3906d0	                BRA done
.39068c	68		pla		putc_screen     PLA                 ; Get the character to print
.39068d	c9 0a		cmp #$0a	                CMP #CHAR_LF        ; Linefeed moves cursor down one line
.39068f	f0 61		beq $3906f2	                BEQ go_down
.390691	c9 20		cmp #$20	                CMP #$20
.390693	90 19		bcc $3906ae	                BCC check_ctrl0     ; [$00..$1F]: check for arrows
.390695	c9 7f		cmp #$7f	                CMP #$7F
.390697	f0 3d		beq $3906d6	                BEQ do_del
.390699	b0 02		bcs $39069d	                BCS check_A0        ; [$20..$7E]: print it
.39069b	80 29		bra $3906c6	                BRA printc
.39069d	c9 a0		cmp #$a0	check_A0        CMP #$A0
.39069f	90 02		bcc $3906a3	                BCC check_ctrl1
.3906a1	80 23		bra $3906c6	                BRA printc          ; [$A0..$FF]: print it
.3906a3	c9 91		cmp #$91	check_ctrl1     CMP #CHAR_DOWN      ; If the down arrow key was pressed
.3906a5	f0 4b		beq $3906f2	                BEQ go_down         ; ... move the cursor down one row
.3906a7	c9 9d		cmp #$9d	                CMP #CHAR_LEFT      ; If the left arrow key was pressed
.3906a9	f0 59		beq $390704	                BEQ go_left         ; ... move the cursor left one column
.3906ab	4c d0 06	jmp $3906d0	                JMP done
.3906ae	c9 09		cmp #$09	check_ctrl0     CMP #CHAR_TAB       ; If it's a TAB...
.3906b0	f0 58		beq $39070a	                BEQ do_TAB          ; ... move to the next TAB stop
.3906b2	c9 08		cmp #$08	                CMP #CHAR_BS        ; If it's a backspace...
.3906b4	f0 2c		beq $3906e2	                BEQ backspace       ; ... move the cursor back and replace with a space
.3906b6	c9 0d		cmp #$0d	                CMP #CHAR_CR        ; If the carriage return was pressed
.3906b8	f0 32		beq $3906ec	                BEQ do_cr           ; ... move cursor down and to the first column
.3906ba	c9 11		cmp #$11	                CMP #CHAR_UP        ; If the up arrow key was pressed
.3906bc	f0 3a		beq $3906f8	                BEQ go_up           ; ... move the cursor up one row
.3906be	c9 1d		cmp #$1d	                CMP #CHAR_RIGHT     ; If the right arrow key was pressed
.3906c0	f0 3c		beq $3906fe	                BEQ go_right        ; ... move the cursor right one column
.3906c2	c9 0f		cmp #$0f	                CMP #CHAR_INS       ; If the insert key was pressed
.3906c4	f0 16		beq $3906dc	                BEQ do_ins          ; ... insert a space
.3906c6	87 17		sta [$17]	printc          STA [CURSORPOS]     ; Save the character on the screen
.3906c8	a5 1e		lda $1e		                LDA CURCOLOR        ; Set the color based on CURCOLOR
.3906ca	87 1f		sta [$1f]	                STA [COLORPOS]
.3906cc	22 be 07 39	jsl $3907be	                JSL ICSRRIGHT       ; And advance the cursor
.3906d0	28		plp		done            PLP
.3906d1	ab		plb		                PLB
.3906d2	2b		pld		                PLD
.3906d3	7a		ply		                PLY
.3906d4	fa		plx		                PLX
.3906d5	6b		rtl		                RTL
.3906d6	22 31 07 39	jsl $390731	do_del          JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.3906da	80 f4		bra $3906d0	                BRA done
.3906dc	22 54 07 39	jsl $390754	do_ins          JSL SCRSHIFTLR      ; Shift the current line right one space from the cursor
.3906e0	80 ee		bra $3906d0	                BRA done
.3906e2	22 f1 07 39	jsl $3907f1	backspace       JSL ICSRLEFT
.3906e6	22 31 07 39	jsl $390731	                JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.3906ea	80 e4		bra $3906d0	                BRA done
.3906ec	22 78 07 39	jsl $390778	do_cr           JSL IPRINTCR        ; Move the cursor to the beginning of the next line
.3906f0	80 de		bra $3906d0	                BRA done
.3906f2	22 3d 08 39	jsl $39083d	go_down         JSL ICSRDOWN        ; Move the cursor down one row (might force a scroll)
.3906f6	80 d8		bra $3906d0	                BRA done
.3906f8	22 17 08 39	jsl $390817	go_up           JSL ICSRUP          ; Move the cursor up one line
.3906fc	80 d2		bra $3906d0	                BRA done
.3906fe	22 be 07 39	jsl $3907be	go_right        JSL ICSRRIGHT       ; Move the cursor right one column
.390702	80 cc		bra $3906d0	                BRA done
.390704	22 f1 07 39	jsl $3907f1	go_left         JSL ICSRLEFT        ; Move the cursor left one column
.390708	80 c6		bra $3906d0	                BRA done
.39070a					do_TAB
.39070a	c2 20		rep #$20	                REP #$20        ; set A long
.39070c	a5 1a		lda $1a		                LDA CURSORX         ; Get the current column
.39070e	29 f8 ff	and #$fff8	                AND #$FFF8          ; See which group of 8 it's in
.390711	18		clc		                CLC
.390712	69 08 00	adc #$0008	                ADC #$0008          ; And move it to the next one
.390715	aa		tax		                TAX
.390716	a4 1c		ldy $1c		                LDY CURSORY
.390718	e2 20		sep #$20	                SEP #$20        ; set A short
.39071a	e4 0f		cpx $0f		set_xy          CPX COLS_VISIBLE    ; Check if we're still on screen horizontally
.39071c	90 04		bcc $390722	                BCC check_row       ; Yes: check the row
.39071e	a2 00 00	ldx #$0000	                LDX #0              ; No: move to the first column...
.390721	c8		iny		                INY                 ; ... and the next row
.390722	c4 13		cpy $13		check_row       CPY LINES_VISIBLE   ; Check if we're still on the screen vertically
.390724	90 05		bcc $39072b	                BCC do_locate       ; Yes: reposition the cursor
.390726	22 ae 08 39	jsl $3908ae	                JSL ISCROLLUP       ; No: scroll the screen
.39072a	88		dey		                DEY                 ; And set the row to the last one
.39072b	22 62 08 39	jsl $390862	do_locate       JSL ILOCATE         ; Set the cursor position
.39072f	80 9f		bra $3906d0	                BRA done
.390731	da		phx		SCRSHIFTLL      PHX
.390732	5a		phy		                PHY
.390733	48		pha		                PHA
.390734	08		php		                PHP
.390735	48		pha		                PHA             ; begin setdp macro
.390736	08		php		                PHP
.390737	c2 20		rep #$20	                REP #$20        ; set A long
.390739	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39073c	5b		tcd		                TCD
.39073d	28		plp		                PLP
.39073e	68		pla		                PLA             ; end setdp macro
.39073f	c2 30		rep #$30	                REP #$30        ; set A&X long
.390741	a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.390743	a8		tay		                TAY                 ; Set it as the destination
.390744	aa		tax		                TAX
.390745	e8		inx		                INX                 ; And set the next cell as the source
.390746	38		sec		                SEC                 ; Calculate the length of the block to move
.390747	a9 7f 00	lda #$007f	                LDA #127            ; as 127 - X
.39074a	e5 1a		sbc $1a		                SBC CURSORX
.39074c	54 af af	mvn #$af,#$af	                MVN $AF, $AF        ; And move the block
.39074f	28		plp		                PLP
.390750	68		pla		                PLA
.390751	7a		ply		                PLY
.390752	fa		plx		                PLX
.390753	6b		rtl		                RTL
.390754	da		phx		SCRSHIFTLR      PHX
.390755	48		pha		                PHA
.390756	08		php		                PHP
.390757	c2 30		rep #$30	                REP #$30        ; set A&X long
.390759	a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.39075b	29 80 ff	and #$ff80	                AND #$FF80          ; Mask off the column bits
.39075e	09 7f 00	ora #$007f	                ORA #$007F          ; And compute the address of the last cell
.390761	a8		tay		                TAY                 ; And set that as the destination address
.390762	3a		dec a		                DEC A               ; Compute the address of the character to the left
.390763	aa		tax		                TAX                 ; And make it the source
.390764	38		sec		                SEC                 ; Calculate the length of the block to move
.390765	a9 7f 00	lda #$007f	                LDA #127            ; as 127 - X
.390768	e5 1a		sbc $1a		                SBC CURSORX
.39076a	44 af af	mvp #$af,#$af	                MVP $AF, $AF        ; And move the block
.39076d	e2 20		sep #$20	                SEP #$20        ; set A short
.39076f	a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.390771	87 17		sta [$17]	                STA [CURSORPOS]
.390773	28		plp		                PLP
.390774	68		pla		                PLA
.390775	fa		plx		                PLX
.390776	6b		rtl		                RTL
.390777					IPUTB
.390777	6b		rtl		                RTL
.390778					IPRINTCR
.390778	da		phx		                PHX
.390779	5a		phy		                PHY
.39077a	08		php		                PHP
.39077b	e2 20		sep #$20	                SEP #$20        ; set A short
.39077d	af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.390781	f0 1c		beq $39079f	                BEQ scr_printcr
.390783	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390785	f0 06		beq $39078d	                BEQ uart_printcr    ; Yes: handle printing to the UART
.390787	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390789	f0 02		beq $39078d	                BEQ uart_printcr    ; Yes: handle printing to the UART
.39078b	80 1c		bra $3907a9	                BRA done
.39078d	22 d9 4d 38	jsl $384dd9	uart_printcr    JSL UART_SELECT
.390791	a9 0d		lda #$0d	                LDA #CHAR_CR
.390793	22 52 06 39	jsl $390652	                JSL IPUTC
.390797	a9 0a		lda #$0a	                LDA #CHAR_LF
.390799	22 52 06 39	jsl $390652	                JSL IPUTC
.39079d	80 0a		bra $3907a9	                BRA done
.39079f	a2 00 00	ldx #$0000	scr_printcr     LDX #0
.3907a2	a4 1c		ldy $1c		                LDY CURSORY
.3907a4	c8		iny		                INY
.3907a5	22 62 08 39	jsl $390862	                JSL ILOCATE
.3907a9	28		plp		done            PLP
.3907aa	7a		ply		                PLY
.3907ab	fa		plx		                PLX
.3907ac	6b		rtl		                RTL
.3907ad	da		phx		ICSRHOME        PHX
.3907ae	5a		phy		                PHY
.3907af	08		php		                PHP
.3907b0	a2 00 00	ldx #$0000	                LDX #0
.3907b3	a0 00 00	ldy #$0000	                LDY #0
.3907b6	22 62 08 39	jsl $390862	                JSL ILOCATE
.3907ba	28		plp		                PLP
.3907bb	7a		ply		                PLY
.3907bc	fa		plx		                PLX
.3907bd	6b		rtl		                RTL
.3907be	da		phx		ICSRRIGHT       PHX
.3907bf	5a		phy		                PHY
.3907c0	48		pha		                PHA
.3907c1	0b		phd		                PHD
.3907c2	08		php		                PHP
.3907c3	c2 20		rep #$20	                REP #$20        ; set A long
.3907c5	c2 10		rep #$10	                REP #$10        ; set X long
.3907c7	48		pha		                PHA             ; begin setdp macro
.3907c8	08		php		                PHP
.3907c9	c2 20		rep #$20	                REP #$20        ; set A long
.3907cb	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3907ce	5b		tcd		                TCD
.3907cf	28		plp		                PLP
.3907d0	68		pla		                PLA             ; end setdp macro
.3907d1	a6 1a		ldx $1a		                LDX CURSORX           ; Get the new column
.3907d3	e8		inx		                INX
.3907d4	a4 1c		ldy $1c		                LDY CURSORY           ; Get the current row
.3907d6	e4 0f		cpx $0f		                CPX COLS_VISIBLE      ; Are we off screen?
.3907d8	90 0d		bcc $3907e7	                BCC icsrright_nowrap  ; No: just set the position
.3907da	a2 00 00	ldx #$0000	                LDX #0                ; Yes: move to the first column
.3907dd	c8		iny		                INY                   ; And move to the next row
.3907de	c4 13		cpy $13		                CPY LINES_VISIBLE     ; Are we still off screen?
.3907e0	90 05		bcc $3907e7	                BCC icsrright_nowrap  ; No: just set the position
.3907e2	88		dey		                DEY                   ; Yes: lock to the last row
.3907e3	22 ae 08 39	jsl $3908ae	                JSL ISCROLLUP         ; But scroll the screen up
.3907e7					icsrright_nowrap
.3907e7	22 62 08 39	jsl $390862	                JSL ILOCATE           ; Set the cursor position
.3907eb	28		plp		                PLP
.3907ec	2b		pld		                PLD
.3907ed	68		pla		                PLA
.3907ee	7a		ply		                PLY
.3907ef	fa		plx		                PLX
.3907f0	6b		rtl		                RTL
.3907f1					ICSRLEFT
.3907f1	da		phx		                PHX
.3907f2	5a		phy		                PHY
.3907f3	48		pha		                PHA
.3907f4	0b		phd		                PHD
.3907f5	08		php		                PHP
.3907f6	c2 30		rep #$30	                REP #$30        ; set A&X long
.3907f8	48		pha		                PHA             ; begin setdp macro
.3907f9	08		php		                PHP
.3907fa	c2 20		rep #$20	                REP #$20        ; set A long
.3907fc	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3907ff	5b		tcd		                TCD
.390800	28		plp		                PLP
.390801	68		pla		                PLA             ; end setdp macro
.390802	a5 1a		lda $1a		                LDA CURSORX
.390804	f0 0b		beq $390811	                BEQ icsrleft_done_already_zero ; Check that we are not already @ Zero
.390806	a6 1a		ldx $1a		                LDX CURSORX
.390808	ca		dex		                DEX
.390809	86 1a		stx $1a		                STX CURSORX
.39080b	a4 1c		ldy $1c		                LDY CURSORY
.39080d	22 62 08 39	jsl $390862	                JSL ILOCATE
.390811					icsrleft_done_already_zero
.390811	28		plp		                PLP
.390812	2b		pld		                PLD
.390813	68		pla		                PLA
.390814	7a		ply		                PLY
.390815	fa		plx		                PLX
.390816	6b		rtl		                RTL
.390817					ICSRUP
.390817	da		phx		                PHX
.390818	5a		phy		                PHY
.390819	48		pha		                PHA
.39081a	0b		phd		                PHD
.39081b	08		php		                PHP
.39081c	c2 30		rep #$30	                REP #$30        ; set A&X long
.39081e	48		pha		                PHA             ; begin setdp macro
.39081f	08		php		                PHP
.390820	c2 20		rep #$20	                REP #$20        ; set A long
.390822	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390825	5b		tcd		                TCD
.390826	28		plp		                PLP
.390827	68		pla		                PLA             ; end setdp macro
.390828	a5 1c		lda $1c		                LDA CURSORY
.39082a	f0 0b		beq $390837	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.39082c	a4 1c		ldy $1c		                LDY CURSORY
.39082e	88		dey		                DEY
.39082f	84 1c		sty $1c		                STY CURSORY
.390831	a6 1a		ldx $1a		                LDX CURSORX
.390833	22 62 08 39	jsl $390862	                JSL ILOCATE
.390837					isrup_done_already_zero
.390837	28		plp		                PLP
.390838	2b		pld		                PLD
.390839	68		pla		                PLA
.39083a	7a		ply		                PLY
.39083b	fa		plx		                PLX
.39083c	6b		rtl		                RTL
.39083d	da		phx		ICSRDOWN        PHX
.39083e	5a		phy		                PHY
.39083f	0b		phd		                PHD
.390840	c2 30		rep #$30	                REP #$30        ; set A&X long
.390842	48		pha		                PHA             ; begin setdp macro
.390843	08		php		                PHP
.390844	c2 20		rep #$20	                REP #$20        ; set A long
.390846	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390849	5b		tcd		                TCD
.39084a	28		plp		                PLP
.39084b	68		pla		                PLA             ; end setdp macro
.39084c	a6 1a		ldx $1a		                LDX CURSORX                 ; Get the current column
.39084e	a4 1c		ldy $1c		                LDY CURSORY                 ; Get the new row
.390850	c8		iny		                INY
.390851	c4 13		cpy $13		                CPY LINES_VISIBLE           ; Check to see if we're off screen
.390853	90 05		bcc $39085a	                BCC icsrdown_noscroll       ; No: go ahead and set the position
.390855	88		dey		                DEY                         ; Yes: go back to the last row
.390856	22 ae 08 39	jsl $3908ae	                JSL ISCROLLUP               ; But scroll the screen up
.39085a					icsrdown_noscroll
.39085a	22 62 08 39	jsl $390862	                JSL ILOCATE                 ; And set the cursor position
.39085e	2b		pld		                PLD
.39085f	7a		ply		                PLY
.390860	fa		plx		                PLX
.390861	6b		rtl		                RTL
.390862	48		pha		ILOCATE         PHA
.390863	0b		phd		                PHD
.390864	08		php		                PHP
.390865	48		pha		                PHA             ; begin setdp macro
.390866	08		php		                PHP
.390867	c2 20		rep #$20	                REP #$20        ; set A long
.390869	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39086c	5b		tcd		                TCD
.39086d	28		plp		                PLP
.39086e	68		pla		                PLA             ; end setdp macro
.39086f	c2 30		rep #$30	                REP #$30        ; set A&X long
.390871					ilocate_scroll
.390871	c4 13		cpy $13		                CPY LINES_VISIBLE
.390873	90 07		bcc $39087c	                BCC ilocate_scrolldone
.390875	22 ae 08 39	jsl $3908ae	                JSL ISCROLLUP
.390879	88		dey		                DEY
.39087a	80 f5		bra $390871	                BRA ilocate_scroll
.39087c					ilocate_scrolldone
.39087c	86 1a		stx $1a		                STX CURSORX
.39087e	84 1c		sty $1c		                STY CURSORY
.390880	a5 0c		lda $0c		                LDA SCREENBEGIN
.390882					ilocate_row
.390882	c0 00 00	cpy #$0000	                CPY #$0
.390885	f0 08		beq $39088f	                BEQ ilocate_right
.390887	18		clc		ilocate_down    CLC
.390888	65 11		adc $11		                ADC COLS_PER_LINE
.39088a	88		dey		                DEY
.39088b	f0 02		beq $39088f	                BEQ ilocate_right
.39088d	80 f8		bra $390887	                BRA ilocate_down
.39088f	18		clc		ilocate_right   CLC
.390890	65 1a		adc $1a		                ADC CURSORX             ; move the cursor right X columns
.390892	85 17		sta $17		                STA CURSORPOS
.390894	a4 1c		ldy $1c		                LDY CURSORY
.390896	98		tya		                TYA
.390897	8f 16 00 af	sta $af0016	                STA @lVKY_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.39089b	8a		txa		                TXA
.39089c	8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.3908a0	c2 20		rep #$20	                REP #$20        ; set A long
.3908a2	18		clc		                CLC
.3908a3	a5 17		lda $17		                LDA CURSORPOS
.3908a5	69 00 20	adc #$2000	                ADC #<>(CS_COLOR_MEM_PTR - CS_TEXT_MEM_PTR)
.3908a8	85 1f		sta $1f		                STA COLORPOS
.3908aa	28		plp		ilocate_done    PLP
.3908ab	2b		pld		                PLD
.3908ac	68		pla		                PLA
.3908ad	6b		rtl		                RTL
.3908ae					ISCROLLUP
.3908ae	48		pha		                PHA
.3908af	da		phx		                PHX
.3908b0	5a		phy		                PHY
.3908b1	8b		phb		                PHB
.3908b2	08		php		                PHP
.3908b3	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908b5	18		clc		                CLC
.3908b6	a0 00 a0	ldy #$a000	                LDY #$A000
.3908b9	a2 80 a0	ldx #$a080	                LDX #$A080
.3908bc	a9 7f 1f	lda #$1f7f	                LDA #128 * 63 - 1
.3908bf	54 af af	mvn #$af,#$af	                MVN $AF,$AF
.3908c2	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908c4	a0 00 c0	ldy #$c000	                LDY #$C000
.3908c7	a2 80 c0	ldx #$c080	                LDX #$C080
.3908ca	a9 7f 1f	lda #$1f7f	                LDA #128 * 63 - 1
.3908cd	54 af af	mvn #$af,#$af	                MVN $AF,$AF
.3908d0	28		plp		                PLP
.3908d1	ab		plb		                PLB
.3908d2	7a		ply		                PLY
.3908d3	fa		plx		                PLX
.3908d4	68		pla		                PLA
.3908d5	6b		rtl		                RTL
.3908d6	08		php		IPRINTH         PHP
.3908d7	48		pha		                PHA
.3908d8					iprinth1
.3908d8	e2 20		sep #$20	                SEP #$20        ; set A short
.3908da	bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.3908dd	4a		lsr a		                LSR
.3908de	4a		lsr a		                LSR
.3908df	4a		lsr a		                LSR
.3908e0	4a		lsr a		                LSR
.3908e1	22 30 09 39	jsl $390930	                JSL iprint_digit
.3908e5	bd 00 00	lda $0000,x	                LDA #0,b,x
.3908e8	22 30 09 39	jsl $390930	                JSL iprint_digit
.3908ec	ca		dex		                DEX
.3908ed	88		dey		                DEY
.3908ee	d0 e8		bne $3908d8	                BNE iprinth1
.3908f0	68		pla		                PLA
.3908f1	28		plp		                PLP
.3908f2	6b		rtl		                RTL
.3908f3					IPRINTAH
.3908f3	48		pha		                PHA
.3908f4	08		php		                PHP
.3908f5	8f 44 02 00	sta $000244	                STA @lCPUA            ; Save A where we can use it multiple times
.3908f9	08		php		                PHP                   ; Get the processor status into A
.3908fa	e2 20		sep #$20	                SEP #$20        ; set A short
.3908fc	c2 10		rep #$10	                REP #$10        ; set X long
.3908fe	68		pla		                PLA
.3908ff	29 20		and #$20	                AND #%00100000        ; Is M = 1?
.390901	c9 20		cmp #$20	                CMP #%00100000
.390903	f0 14		beq $390919	                BEQ eight_bit
.390905	af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [15..12]
.390909	4a		lsr a		                LSR A
.39090a	4a		lsr a		                LSR A
.39090b	4a		lsr a		                LSR A
.39090c	4a		lsr a		                LSR A
.39090d	22 30 09 39	jsl $390930	                JSL iprint_digit      ; And print it
.390911	af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [11..8]
.390915	22 30 09 39	jsl $390930	                JSL iprint_digit      ; And print it
.390919	af 44 02 00	lda $000244	eight_bit       LDA @lCPUA            ; Get nibble [7..4]
.39091d	4a		lsr a		                LSR A
.39091e	4a		lsr a		                LSR A
.39091f	4a		lsr a		                LSR A
.390920	4a		lsr a		                LSR A
.390921	22 30 09 39	jsl $390930	                JSL iprint_digit      ; And print it
.390925	af 44 02 00	lda $000244	                LDA @lCPUA            ; Get nibble [3..0]
.390929	22 30 09 39	jsl $390930	                JSL iprint_digit      ; And print it
.39092d	28		plp		                PLP
.39092e	68		pla		                PLA
.39092f	6b		rtl		                RTL
.390930	da		phx		iprint_digit    PHX
.390931	c2 20		rep #$20	                REP #$20        ; set A long
.390933	29 0f 00	and #$000f	                AND #$0F
.390936	aa		tax		                TAX
.390937	bf 8e 17 39	lda $39178e,x	                LDA hex_digits,X
.39093b	22 52 06 39	jsl $390652	                JSL IPUTC       ; Print the digit
.39093f	fa		plx		                PLX
.390940	6b		rtl		                RTL
.390941	48		pha		ICLRSCREEN	    PHA
.390942	da		phx		                PHX
.390943	08		php		                PHP
.390944	e2 20		sep #$20	                SEP #$20        ; set A short
.390946	c2 10		rep #$10	                REP #$10        ; set X long
.390948	a2 00 00	ldx #$0000	                LDX #$0000		          ; Only Use One Pointer
.39094b	a9 20		lda #$20	                LDA #$20		            ; Fill the Entire Screen with Space
.39094d	9f 00 a0 af	sta $afa000,x	iclearloop0	    STA CS_TEXT_MEM_PTR, x	;
.390951	e8		inx		                inx
.390952	e0 00 20	cpx #$2000	                cpx #$2000
.390955	d0 f6		bne $39094d	                bne iclearloop0
.390957	a2 00 00	ldx #$0000	                LDX	#$0000		          ; Only Use One Pointer
.39095a	af 1e 00 00	lda $00001e	                LDA @lCURCOLOR          ; Fill the Color Memory with the current color
.39095e	9f 00 c0 af	sta $afc000,x	iclearloop1	    STA CS_COLOR_MEM_PTR, x	;
.390962	e8		inx		                inx
.390963	e0 00 20	cpx #$2000	                cpx #$2000
.390966	d0 f6		bne $39095e	                bne iclearloop1
.390968	28		plp		                PLP
.390969	fa		plx		                PLX
.39096a	68		pla		                PLA
.39096b	6b		rtl		                RTL
.39096c	48		pha		ICOLORFLAG      PHA
.39096d	da		phx		                PHX
.39096e	08		php		                PHP
.39096f	e2 30		sep #$30	                SEP #$30        ; set A&X short
.390971	a2 00		ldx #$00	                LDX #$00
.390973	bf 79 14 39	lda $391479,x	iclearloop2	    LDA @lgreet_clr_line1,x
.390977	9f 00 c0 af	sta $afc000,x	                STA CS_COLOR_MEM_PTR,x
.39097b	bf a3 14 39	lda $3914a3,x	                LDA @lgreet_clr_line2,x
.39097f	9f 80 c0 af	sta $afc080,x	                STA CS_COLOR_MEM_PTR + $80,x
.390983	bf cd 14 39	lda $3914cd,x	                LDA @lgreet_clr_line3,x
.390987	9f 00 c1 af	sta $afc100,x	                STA CS_COLOR_MEM_PTR + $100,x
.39098b	bf f7 14 39	lda $3914f7,x	                LDA @lgreet_clr_line4,x
.39098f	9f 80 c1 af	sta $afc180,x	                STA CS_COLOR_MEM_PTR + $180,x
.390993	bf 21 15 39	lda $391521,x	                LDA @lgreet_clr_line5,x
.390997	9f 00 c2 af	sta $afc200,x	                STA CS_COLOR_MEM_PTR + $200,x
.39099b	e8		inx		                inx
.39099c	e0 2a		cpx #$2a	                cpx #42
.39099e	d0 d3		bne $390973	                bne iclearloop2
.3909a0	28		plp		                PLP
.3909a1	fa		plx		                PLX
.3909a2	68		pla		                PLA
.3909a3	6b		rtl		                RTL
.3909a4	0b		phd		IINITCHLUT		  PHD
.3909a5	08		php		                PHP
.3909a6	48		pha		                PHA
.3909a7	da		phx		                PHX
.3909a8	e2 20		sep #$20	                SEP #$20        ; set A short
.3909aa	e2 10		sep #$10	                SEP #$10        ; set X short
.3909ac	a2 00		ldx #$00					        LDX	#$00
.3909ae	bf 4b 15 39	lda $39154b,x	lutinitloop0	  LDA @lfg_color_lut,x		; get Local Data
.3909b2	9f 40 1f af	sta $af1f40,x	                STA FG_CHAR_LUT_PTR,x	; Write in LUT Memory
.3909b6	e8		inx		                inx
.3909b7	e0 40		cpx #$40	                cpx #$40
.3909b9	d0 f3		bne $3909ae	                bne lutinitloop0
.3909bb	a2 00		ldx #$00	                LDX	#$00
.3909bd	bf 8b 15 39	lda $39158b,x	lutinitloop1	  LDA @lbg_color_lut,x		; get Local Data
.3909c1	9f 80 1f af	sta $af1f80,x	                STA BG_CHAR_LUT_PTR,x	; Write in LUT Memory
.3909c5	e8		inx		                INX
.3909c6	e0 40		cpx #$40	                CPX #$40
.3909c8	d0 f3		bne $3909bd	                bne lutinitloop1
.3909ca	c2 20		rep #$20	                REP #$20        ; set A long
.3909cc	c2 10		rep #$10	                REP #$10        ; set X long
.3909ce	fa		plx		                PLX
.3909cf	68		pla		                PLA
.3909d0	28		plp		                PLP
.3909d1	2b		pld		                PLD
.3909d2	6b		rtl		                RTL
.3909d3					IINITGAMMATABLE
.3909d3	e2 20		sep #$20	                SEP #$20        ; set A short
.3909d5	c2 10		rep #$10	                REP #$10        ; set X long
.3909d7	a2 00 00	ldx #$0000	                ldx #$0000
.3909da	bf 00 1c 39	lda $391c00,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.3909de	9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.3909e2	9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.3909e6	9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.3909ea	e8		inx		                inx
.3909eb	e0 00 01	cpx #$0100	                cpx #$0100
.3909ee	d0 ea		bne $3909da	                bne initgammaloop
.3909f0	c2 30		rep #$30	                REP #$30        ; set A&X long
.3909f2	6b		rtl		                RTL
.3909f3	48		pha		IINITALLLUT     PHA
.3909f4	da		phx		                PHX
.3909f5	a2 00 00	ldx #$0000	                LDX #$0000
.3909f8	e2 20		sep #$20	                SEP #$20        ; set A short
.3909fa	a9 00		lda #$00	                LDA #$00
.3909fc	85 0a		sta $0a		                STA $0A     ; Temp Location
.3909fe					iinit_lut_loop
.3909fe	86 02		stx $02		                STX $02
.390a00	a6 0a		ldx $0a		                LDX $0A
.390a02	bf 00 1b 39	lda $391b00,x	                LDA GAMMA_2_2_Tbl, x
.390a06	49 55		eor #$55	                EOR  #$55
.390a08	a6 02		ldx $02		                LDX $02
.390a0a	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390a0e	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390a12	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390a16	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390a1a	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390a1e	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390a22	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390a26	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390a2a	e8		inx		                inx
.390a2b	86 02		stx $02		                STX $02
.390a2d	a6 0a		ldx $0a		                LDX $0A
.390a2f	bf 00 1d 39	lda $391d00,x	                LDA RANDOM_LUT_Tbl, x
.390a33	a6 02		ldx $02		                LDX $02
.390a35	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390a39	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390a3d	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390a41	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390a45	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390a49	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390a4d	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390a51	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390a55	e8		inx		                inx
.390a56	86 02		stx $02		                STX $02
.390a58	a6 0a		ldx $0a		                LDX $0A
.390a5a	bf 00 1c 39	lda $391c00,x	                LDA GAMMA_1_8_Tbl, x
.390a5e	49 aa		eor #$aa	                EOR  #$AA
.390a60	a6 02		ldx $02		                LDX $02
.390a62	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390a66	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390a6a	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390a6e	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390a72	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390a76	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390a7a	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390a7e	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390a82	e8		inx		                inx
.390a83	a9 ff		lda #$ff	                LDA #$FF
.390a85	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390a89	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390a8d	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390a91	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390a95	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390a99	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390a9d	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390aa1	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390aa5	e6 0a		inc $0a		                inc $0A
.390aa7	e8		inx		                inx
.390aa8	e0 00 04	cpx #$0400	                cpx #$0400
.390aab	f0 03		beq $390ab0	                beq iinit_lut_exit
.390aad	82 4e ff	brl $3909fe	                brl iinit_lut_loop
.390ab0					iinit_lut_exit
.390ab0	c2 30		rep #$30	                REP #$30        ; set A&X long
.390ab2	fa		plx		                PLX
.390ab3	68		pla		                PLA
.390ab4	6b		rtl		                RTL
.390ab5	48		pha		IINITVKYTXTMODE PHA
.390ab6	e2 20		sep #$20	                SEP #$20        ; set A short
.390ab8	a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En      ;Okay, this Enables the Text Mode (Video Display)
.390aba	8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.390abe	a9 20		lda #$20	                LDA #$20
.390ac0	8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.390ac4	8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.390ac8	a9 00		lda #$00	                LDA #$00
.390aca	8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.390ace	a9 01		lda #$01	                LDA #Border_Ctrl_Enable   ; Enable the Border
.390ad0	8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.390ad4	a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En
.390ad6	8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.390ada	c2 30		rep #$30	                REP #$30        ; set A&X long
.390adc	68		pla		                PLA
.390add	6b		rtl		                RTL
.390ade					IINITVKYGRPMODE
.390ade	48		pha		                PHA
.390adf	e2 20		sep #$20	                SEP #$20        ; set A short
.390ae1	a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390ae3	8f 40 01 af	sta $af0140	                STA @lBM_CONTROL_REG
.390ae7	a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390ae9	8f 41 01 af	sta $af0141	                STA @lBM_START_ADDY_L
.390aed	a9 c0		lda #$c0	                LDA #$C0
.390aef	8f 42 01 af	sta $af0142	                STA @lBM_START_ADDY_M
.390af3	a9 00		lda #$00	                LDA #$00
.390af5	8f 43 01 af	sta $af0143	                STA @lBM_START_ADDY_H ; This address is always base from
.390af9	a9 80		lda #$80	                LDA #$80
.390afb	8f 44 01 af	sta $af0144	                STA BM_X_SIZE_L
.390aff	a9 02		lda #$02	                LDA #$02
.390b01	8f 45 01 af	sta $af0145	                STA BM_X_SIZE_H         ; $0280 = 640
.390b05	a9 e0		lda #$e0	                LDA #$E0
.390b07	8f 46 01 af	sta $af0146	                STA BM_Y_SIZE_L
.390b0b	a9 01		lda #$01	                LDA #$01
.390b0d	8f 47 01 af	sta $af0147	                STA BM_Y_SIZE_H         ; $01E0 = 480
.390b11	c2 30		rep #$30	                REP #$30        ; set A&X long
.390b13	68		pla		                PLA
.390b14	6b		rtl		                RTL
.390b15					IINITTILEMODE
.390b15	6b		rtl		                RTL
.390b16	48		pha		IINITSPRITE     PHA
.390b17	e2 20		sep #$20	                SEP #$20        ; set A short
.390b19	a9 03		lda #$03	                LDA #$03    ; Enable 17 Sprites
.390b1b	8f 00 02 af	sta $af0200	                STA SP00_CONTROL_REG
.390b1f	8f 08 02 af	sta $af0208	                STA SP01_CONTROL_REG
.390b23	8f 10 02 af	sta $af0210	                STA SP02_CONTROL_REG
.390b27	8f 18 02 af	sta $af0218	                STA SP03_CONTROL_REG
.390b2b	8f 20 02 af	sta $af0220	                STA SP04_CONTROL_REG
.390b2f	8f 28 02 af	sta $af0228	                STA SP05_CONTROL_REG
.390b33	8f 30 02 af	sta $af0230	                STA SP06_CONTROL_REG
.390b37	8f 38 02 af	sta $af0238	                STA SP07_CONTROL_REG
.390b3b	8f 40 02 af	sta $af0240	                STA SP08_CONTROL_REG
.390b3f	8f 48 02 af	sta $af0248	                STA SP09_CONTROL_REG
.390b43	8f 50 02 af	sta $af0250	                STA SP10_CONTROL_REG
.390b47	8f 58 02 af	sta $af0258	                STA SP11_CONTROL_REG
.390b4b	8f 60 02 af	sta $af0260	                STA SP12_CONTROL_REG
.390b4f	8f 68 02 af	sta $af0268	                STA SP13_CONTROL_REG
.390b53	8f 70 02 af	sta $af0270	                STA SP14_CONTROL_REG
.390b57	8f 78 02 af	sta $af0278	                STA SP15_CONTROL_REG
.390b5b	8f 80 02 af	sta $af0280	                STA SP16_CONTROL_REG
.390b5f	a9 09		lda #$09	                LDA #$09
.390b61	8f 03 02 af	sta $af0203	                STA SP00_ADDY_PTR_H
.390b65	8f 0b 02 af	sta $af020b	                STA SP01_ADDY_PTR_H
.390b69	8f 13 02 af	sta $af0213	                STA SP02_ADDY_PTR_H
.390b6d	8f 1b 02 af	sta $af021b	                STA SP03_ADDY_PTR_H
.390b71	8f 23 02 af	sta $af0223	                STA SP04_ADDY_PTR_H
.390b75	8f 2b 02 af	sta $af022b	                STA SP05_ADDY_PTR_H
.390b79	8f 33 02 af	sta $af0233	                STA SP06_ADDY_PTR_H
.390b7d	8f 3b 02 af	sta $af023b	                STA SP07_ADDY_PTR_H
.390b81	8f 43 02 af	sta $af0243	                STA SP08_ADDY_PTR_H
.390b85	8f 4b 02 af	sta $af024b	                STA SP09_ADDY_PTR_H
.390b89	8f 53 02 af	sta $af0253	                STA SP10_ADDY_PTR_H
.390b8d	8f 5b 02 af	sta $af025b	                STA SP11_ADDY_PTR_H
.390b91	8f 63 02 af	sta $af0263	                STA SP12_ADDY_PTR_H
.390b95	8f 6b 02 af	sta $af026b	                STA SP13_ADDY_PTR_H
.390b99	8f 73 02 af	sta $af0273	                STA SP14_ADDY_PTR_H
.390b9d	8f 7b 02 af	sta $af027b	                STA SP15_ADDY_PTR_H
.390ba1	8f 83 02 af	sta $af0283	                STA SP16_ADDY_PTR_H
.390ba5	a9 00		lda #$00	                LDA #$00
.390ba7	8f 02 02 af	sta $af0202	                STA SP00_ADDY_PTR_M
.390bab	a9 04		lda #$04	                LDA #$04
.390bad	8f 0a 02 af	sta $af020a	                STA SP01_ADDY_PTR_M
.390bb1	a9 08		lda #$08	                LDA #$08
.390bb3	8f 12 02 af	sta $af0212	                STA SP02_ADDY_PTR_M
.390bb7	a9 0c		lda #$0c	                LDA #$0C
.390bb9	8f 1a 02 af	sta $af021a	                STA SP03_ADDY_PTR_M
.390bbd	a9 10		lda #$10	                LDA #$10
.390bbf	8f 22 02 af	sta $af0222	                STA SP04_ADDY_PTR_M
.390bc3	a9 14		lda #$14	                LDA #$14
.390bc5	8f 2a 02 af	sta $af022a	                STA SP05_ADDY_PTR_M
.390bc9	a9 18		lda #$18	                LDA #$18
.390bcb	8f 32 02 af	sta $af0232	                STA SP06_ADDY_PTR_M
.390bcf	a9 1c		lda #$1c	                LDA #$1C
.390bd1	8f 3a 02 af	sta $af023a	                STA SP07_ADDY_PTR_M
.390bd5	a9 20		lda #$20	                LDA #$20
.390bd7	8f 42 02 af	sta $af0242	                STA SP08_ADDY_PTR_M
.390bdb	a9 24		lda #$24	                LDA #$24
.390bdd	8f 4a 02 af	sta $af024a	                STA SP09_ADDY_PTR_M
.390be1	a9 28		lda #$28	                LDA #$28
.390be3	8f 52 02 af	sta $af0252	                STA SP10_ADDY_PTR_M
.390be7	a9 2c		lda #$2c	                LDA #$2C
.390be9	8f 5a 02 af	sta $af025a	                STA SP11_ADDY_PTR_M
.390bed	a9 30		lda #$30	                LDA #$30
.390bef	8f 62 02 af	sta $af0262	                STA SP12_ADDY_PTR_M
.390bf3	a9 34		lda #$34	                LDA #$34
.390bf5	8f 6a 02 af	sta $af026a	                STA SP13_ADDY_PTR_M
.390bf9	a9 38		lda #$38	                LDA #$38
.390bfb	8f 72 02 af	sta $af0272	                STA SP14_ADDY_PTR_M
.390bff	a9 3c		lda #$3c	                LDA #$3C
.390c01	8f 7a 02 af	sta $af027a	                STA SP15_ADDY_PTR_M
.390c05	a9 40		lda #$40	                LDA #$40
.390c07	8f 82 02 af	sta $af0282	                STA SP16_ADDY_PTR_M
.390c0b	a9 00		lda #$00	                LDA #$00
.390c0d	8f 01 02 af	sta $af0201	                STA SP00_ADDY_PTR_L
.390c11	8f 09 02 af	sta $af0209	                STA SP01_ADDY_PTR_L
.390c15	8f 11 02 af	sta $af0211	                STA SP02_ADDY_PTR_L
.390c19	8f 19 02 af	sta $af0219	                STA SP03_ADDY_PTR_L
.390c1d	8f 21 02 af	sta $af0221	                STA SP04_ADDY_PTR_L
.390c21	8f 29 02 af	sta $af0229	                STA SP05_ADDY_PTR_L
.390c25	8f 31 02 af	sta $af0231	                STA SP06_ADDY_PTR_L
.390c29	8f 39 02 af	sta $af0239	                STA SP07_ADDY_PTR_L
.390c2d	8f 41 02 af	sta $af0241	                STA SP08_ADDY_PTR_L
.390c31	8f 49 02 af	sta $af0249	                STA SP09_ADDY_PTR_L
.390c35	8f 51 02 af	sta $af0251	                STA SP10_ADDY_PTR_L
.390c39	8f 59 02 af	sta $af0259	                STA SP11_ADDY_PTR_L
.390c3d	8f 61 02 af	sta $af0261	                STA SP12_ADDY_PTR_L
.390c41	8f 69 02 af	sta $af0269	                STA SP13_ADDY_PTR_L
.390c45	8f 71 02 af	sta $af0271	                STA SP14_ADDY_PTR_L
.390c49	8f 79 02 af	sta $af0279	                STA SP15_ADDY_PTR_L
.390c4d	8f 81 02 af	sta $af0281	                STA SP16_ADDY_PTR_L
.390c51	68		pla		                PLA
.390c52	6b		rtl		                RTL
.390c53					IINITFONTSET
.390c53	e2 20		sep #$20	                SEP #$20        ; set A short
.390c55	c2 10		rep #$10	                REP #$10        ; set X long
.390c57	a2 00 00	ldx #$0000	                LDX #$0000
.390c5a					initFontsetbranch0
.390c5a	bf 00 f0 3f	lda $3ff000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.390c5e	9f 00 80 af	sta $af8000,x	                STA @lFONT_MEMORY_BANK0,X ; Vicky FONT RAM Bank
.390c62	e8		inx		                INX
.390c63	e0 00 08	cpx #$0800	                CPX #$0800
.390c66	d0 f2		bne $390c5a	                BNE initFontsetbranch0
.390c68	ea		nop		                NOP
.390c69	a2 00 00	ldx #$0000	                LDX #$0000
.390c6c					initFontsetbranch1
.390c6c	bf 00 f8 3f	lda $3ff800,x	                LDA @lFONT_4_BANK1,X
.390c70	9f 00 88 af	sta $af8800,x	                STA @lFONT_MEMORY_BANK1,X ; Vicky FONT RAM Bank
.390c74	e8		inx		                INX
.390c75	e0 00 08	cpx #$0800	                CPX #$0800
.390c78	d0 f2		bne $390c6c	                BNE initFontsetbranch1
.390c7a	ea		nop		                NOP
.390c7b	c2 30		rep #$30	                REP #$30        ; set A&X long
.390c7d	6b		rtl		                RTL
.390c7e					INITMOUSEPOINTER
.390c7e	e2 20		sep #$20	                SEP #$20        ; set A short
.390c80	c2 10		rep #$10	                REP #$10        ; set X long
.390c82	a2 00 00	ldx #$0000	                LDX #$0000
.390c85					FILL_MOUSE_MARKER
.390c85	bf 00 1e 39	lda $391e00,x	                LDA @lMOUSE_POINTER_PTR,X
.390c89	9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.390c8d	e8		inx		                INX
.390c8e	e0 00 01	cpx #$0100	                CPX #$0100
.390c91	d0 f2		bne $390c85	                BNE FILL_MOUSE_MARKER
.390c93	ea		nop		                nop
.390c94	a9 01		lda #$01	                LDA #$01
.390c96	8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.390c9a	c2 30		rep #$30	                REP #$30        ; set A&X long
.390c9c	6b		rtl		                RTL
.390c9d	48		pha		IINITCURSOR     PHA
.390c9e	e2 20		sep #$20	                SEP #$20        ; set A short
.390ca0	a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.390ca2	8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.390ca6	a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.390ca8	8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.390cac	c2 30		rep #$30	                REP #$30        ; set A&X long
.390cae	a9 00 00	lda #$0000	                LDA #$0000;
.390cb1	8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.390cb5	a9 06 00	lda #$0006	                LDA #$0006;
.390cb8	8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.390cbc	68		pla		                PLA
.390cbd	6b		rtl		                RTL
.390cbe	0b		phd		IINITSUPERIO	  PHD
.390cbf	08		php		                PHP
.390cc0	48		pha		                PHA
.390cc1	e2 20		sep #$20	                SEP #$20        ; set A short
.390cc3	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390cc5	8f 23 11 af	sta $af1123	                STA GP10_REG
.390cc9	af 23 11 af	lda $af1123	                LDA GP10_REG
.390ccd	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390ccf	8f 24 11 af	sta $af1124	                STA GP11_REG
.390cd3	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390cd5	8f 25 11 af	sta $af1125	                STA GP12_REG
.390cd9	a9 01		lda #$01	        				LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390cdb	8f 26 11 af	sta $af1126	        				STA GP13_REG
.390cdf	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.390ce1	8f 27 11 af	sta $af1127	        				STA GP14_REG
.390ce5	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.390ce7	8f 28 11 af	sta $af1128	        				STA GP15_REG
.390ceb	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.390ced	8f 29 11 af	sta $af1129	        				STA GP16_REG
.390cf1	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.390cf3	8f 2a 11 af	sta $af112a	        				STA GP17_REG
.390cf7	a9 00		lda #$00	        				LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.390cf9	8f 2b 11 af	sta $af112b	        				STA GP20_REG
.390cfd	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390cff	8f 2f 11 af	sta $af112f					        STA GP24_REG
.390d03	a9 05		lda #$05					        LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.390d05	8f 30 11 af	sta $af1130					        STA GP25_REG
.390d09	a9 84		lda #$84				        	LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.390d0b	8f 31 11 af	sta $af1131					        STA GP26_REG
.390d0f	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.390d11	8f 33 11 af	sta $af1133					        STA GP30_REG
.390d15	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.390d17	8f 34 11 af	sta $af1134					        STA GP31_REG
.390d1b	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.390d1d	8f 35 11 af	sta $af1135					        STA GP32_REG
.390d21	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.390d23	8f 36 11 af	sta $af1136					        STA GP33_REG
.390d27	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.390d29	8f 37 11 af	sta $af1137					        STA GP34_REG
.390d2d	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.390d2f	8f 38 11 af	sta $af1138					        STA GP35_REG
.390d33	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.390d35	8f 39 11 af	sta $af1139					        STA GP36_REG
.390d39	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.390d3b	8f 3a 11 af	sta $af113a					        STA GP37_REG
.390d3f	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390d41	8f 3d 11 af	sta $af113d					        STA GP42_REG
.390d45	a9 01		lda #$01				          LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.390d47	8f 3e 11 af	sta $af113e					        STA GP43_REG
.390d4b	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.390d4d	8f 3f 11 af	sta $af113f					        STA GP50_REG
.390d51	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.390d53	8f 40 11 af	sta $af1140					        STA GP51_REG
.390d57	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.390d59	8f 41 11 af	sta $af1141					        STA GP52_REG
.390d5d	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.390d5f	8f 42 11 af	sta $af1142					        STA GP53_REG
.390d63	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.390d65	8f 43 11 af	sta $af1143					        STA GP54_REG
.390d69	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.390d6b	8f 44 11 af	sta $af1144					        STA GP55_REG
.390d6f	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.390d71	8f 45 11 af	sta $af1145					        STA GP56_REG
.390d75	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.390d77	8f 46 11 af	sta $af1146					        STA GP57_REG
.390d7b	a9 84		lda #$84					        LDA #$84		;(C256 - LED1) - Open Drain - Output
.390d7d	8f 47 11 af	sta $af1147					        STA GP60_REG
.390d81	a9 84		lda #$84					        LDA #$84		;(C256 - LED2) - Open Drain - Output
.390d83	8f 48 11 af	sta $af1148					        STA GP61_REG
.390d87	a9 00		lda #$00				        	LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.390d89	8f 4b 11 af	sta $af114b					        STA GP1_REG
.390d8d	a9 01		lda #$01					        LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.390d8f	8f 4c 11 af	sta $af114c					        STA GP2_REG
.390d93	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.390d95	8f 4d 11 af	sta $af114d					        STA GP3_REG
.390d99	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.390d9b	8f 4e 11 af	sta $af114e					        STA GP4_REG
.390d9f	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.390da1	8f 4f 11 af	sta $af114f					        STA GP5_REG
.390da5	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.390da7	8f 50 11 af	sta $af1150					        STA GP6_REG
.390dab	a9 01		lda #$01					        LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.390dad	8f 5d 11 af	sta $af115d					        STA LED1_REG
.390db1	a9 02		lda #$02					        LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.390db3	8f 5e 11 af	sta $af115e					        STA LED2_REG
.390db7	c2 20		rep #$20	                REP #$20        ; set A long
.390db9	68		pla		                PLA
.390dba	28		plp						        PLP
.390dbb	2b		pld					        	PLD
.390dbc	6b		rtl		                RTL
.390dbd	0b		phd		IINITKEYBOARD	  PHD
.390dbe	08		php						        PHP
.390dbf	48		pha						        PHA
.390dc0	da		phx						        PHX
.390dc1	e2 20		sep #$20	                SEP #$20        ; set A short
.390dc3	c2 10		rep #$10	                REP #$10        ; set X long
.390dc5	18		clc		                CLC
.390dc6	20 76 0e	jsr $390e76	                JSR Poll_Inbuf ;
.390dc9	a9 aa		lda #$aa					        LDA #$AA			;Send self test command
.390dcb	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.390dcf	20 81 0e	jsr $390e81	                JSR Poll_Outbuf ;
.390dd2	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Check self test result
.390dd6	c9 55		cmp #$55					        CMP #$55
.390dd8	f0 03		beq $390ddd					        BEQ	passAAtest
.390dda	82 89 00	brl $390e66	                BRL initkb_loop_out
.390ddd					passAAtest
.390ddd	a9 ab		lda #$ab					        LDA #$AB			;Send test Interface command
.390ddf	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.390de3	20 81 0e	jsr $390e81	                JSR Poll_Outbuf ;
.390de6	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Display Interface test results
.390dea	c9 00		cmp #$00					        CMP #$00			;Should be 00
.390dec	f0 03		beq $390df1					        BEQ	passABtest
.390dee	82 75 00	brl $390e66	                BRL initkb_loop_out
.390df1					passABtest
.390df1	a9 60		lda #$60	                LDA #$60            ; Send Command 0x60 so to Enable Interrupt
.390df3	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390df7	20 76 0e	jsr $390e76	                JSR Poll_Inbuf ;
.390dfa	a9 69		lda #$69	                LDA #%01101001      ; Enable Interrupt
.390dfc	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390e00	20 76 0e	jsr $390e76	                JSR Poll_Inbuf ;
.390e03	a9 ff		lda #$ff	                LDA #$FF      ; Send Keyboard Reset command
.390e05	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390e09	a2 ff ff	ldx #$ffff	                LDX #$FFFF
.390e0c	ca		dex		DLY_LOOP1       DEX
.390e0d	ea		nop		                NOP
.390e0e	ea		nop		                NOP
.390e0f	ea		nop		                NOP
.390e10	ea		nop		                NOP
.390e11	ea		nop		                NOP
.390e12	ea		nop		                NOP
.390e13	ea		nop		                NOP
.390e14	ea		nop		                NOP
.390e15	e0 00 00	cpx #$0000	                CPX #$0000
.390e18	d0 f2		bne $390e0c	                BNE DLY_LOOP1
.390e1a	20 81 0e	jsr $390e81	                JSR Poll_Outbuf ;
.390e1d	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF   ; Read Output Buffer
.390e21					DO_CMD_F4_AGAIN
.390e21	20 76 0e	jsr $390e76	                JSR Poll_Inbuf ;
.390e24	a9 f4		lda #$f4					        LDA #$F4			; Enable the Keyboard
.390e26	8f 60 10 af	sta $af1060					        STA KBD_DATA_BUF
.390e2a	20 81 0e	jsr $390e81	                JSR Poll_Outbuf ;
.390e2d	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.390e31	c9 fa		cmp #$fa	                CMP #$FA
.390e33	d0 ec		bne $390e21	                BNE DO_CMD_F4_AGAIN
.390e35	20 8c 0e	jsr $390e8c	                JSR INIT_MOUSE
.390e38	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.390e3c	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.390e3e	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.390e42	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1  ; Read the Pending Register &
.390e46	29 01		and #$01	                AND #FNX1_INT00_KBD
.390e48	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1  ; Writing it back will clear the Active Bit
.390e4c	af 4d 01 00	lda $00014d	                LDA @lINT_MASK_REG1
.390e50	29 fe		and #$fe	                AND #~FNX1_INT00_KBD
.390e52	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.390e56	af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0
.390e5a	29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.390e5c	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390e60	a2 47 16	ldx #$1647	                LDX #<>Success_kb_init
.390e63	38		sec		                SEC
.390e64	b0 03		bcs $390e69	                BCS InitSuccess
.390e66	a2 59 16	ldx #$1659	initkb_loop_out LDX #<>Failed_kb_init
.390e69	22 32 06 39	jsl $390632	InitSuccess     JSL IPRINT       ; print Message
.390e6d	c2 20		rep #$20	                REP #$20        ; set A long
.390e6f	c2 10		rep #$10	                REP #$10        ; set X long
.390e71	fa		plx		                PLX
.390e72	68		pla		                PLA
.390e73	28		plp						        PLP
.390e74	2b		pld						        PLD
.390e75	6b		rtl		                RTL
.390e76					Poll_Inbuf
.390e76	af 64 10 af	lda $af1064	                LDA STATUS_PORT		; Load Status Byte
.390e7a	29 02		and #$02					        AND	#<INPT_BUF_FULL	; Test bit $02 (if 0, Empty)
.390e7c	c9 02		cmp #$02					        CMP #<INPT_BUF_FULL
.390e7e	f0 f6		beq $390e76					        BEQ Poll_Inbuf
.390e80	60		rts		                RTS
.390e81					Poll_Outbuf
.390e81	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.390e85	29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.390e87	c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.390e89	d0 f6		bne $390e81	                BNE Poll_Outbuf
.390e8b	60		rts		                RTS
.390e8c					INIT_MOUSE
.390e8c	20 76 0e	jsr $390e76	                JSR Poll_Inbuf
.390e8f	a9 a8		lda #$a8	                LDA #$A8          ; Enable the second PS2 Channel
.390e91	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390e95					DO_CMD_A9_AGAIN
.390e95	20 76 0e	jsr $390e76	                JSR Poll_Inbuf
.390e98	a9 a9		lda #$a9	                LDA #$A9          ; Tests second PS2 Channel
.390e9a	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390e9e	20 81 0e	jsr $390e81	                JSR Poll_Outbuf ;
.390ea1	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.390ea5	c9 00		cmp #$00	                CMP #$00
.390ea7	d0 ec		bne $390e95	                BNE DO_CMD_A9_AGAIN
.390ea9	20 76 0e	jsr $390e76	                JSR Poll_Inbuf
.390eac	a9 20		lda #$20	                LDA #$20
.390eae	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390eb2	20 81 0e	jsr $390e81	                JSR Poll_Outbuf ;
.390eb5	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF
.390eb9	09 02		ora #$02	                ORA #$02
.390ebb	48		pha		                PHA
.390ebc	20 76 0e	jsr $390e76	                JSR Poll_Inbuf
.390ebf	a9 60		lda #$60	                LDA #$60
.390ec1	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390ec5	20 76 0e	jsr $390e76	                JSR Poll_Inbuf ;
.390ec8	68		pla		                PLA
.390ec9	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390ecd	a9 f6		lda #$f6	                LDA #$F6        ;Tell the mouse to use default settings
.390ecf	20 f2 0e	jsr $390ef2	                JSR MOUSE_WRITE
.390ed2	20 05 0f	jsr $390f05	                JSR MOUSE_READ
.390ed5	a9 e8		lda #$e8	                LDA #$E8
.390ed7	20 f2 0e	jsr $390ef2	                JSR MOUSE_WRITE
.390eda	20 05 0f	jsr $390f05	                JSR MOUSE_READ
.390edd	a9 00		lda #$00	                LDA #$00
.390edf	20 f2 0e	jsr $390ef2	                JSR MOUSE_WRITE
.390ee2	20 05 0f	jsr $390f05	                JSR MOUSE_READ
.390ee5	a9 f4		lda #$f4	                LDA #$F4        ; Enable the Mouse
.390ee7	20 f2 0e	jsr $390ef2	                JSR MOUSE_WRITE
.390eea	20 05 0f	jsr $390f05	                JSR MOUSE_READ
.390eed	a9 00		lda #$00	                LDA #$00
.390eef	85 e0		sta $e0		                STA MOUSE_PTR
.390ef1	60		rts		                RTS
.390ef2					MOUSE_WRITE
.390ef2	48		pha		                PHA
.390ef3	20 76 0e	jsr $390e76	                JSR Poll_Inbuf
.390ef6	a9 d4		lda #$d4	                LDA #$D4
.390ef8	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390efc	20 76 0e	jsr $390e76	                JSR Poll_Inbuf
.390eff	68		pla		                PLA
.390f00	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390f04	60		rts		                RTS
.390f05					MOUSE_READ
.390f05	20 81 0e	jsr $390e81	                JSR Poll_Outbuf ;
.390f08	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.390f0c	60		rts		                RTS
.390f0d	48		pha		INITRTC         PHA
.390f0e	08		php		                PHP
.390f0f	e2 20		sep #$20	                SEP #$20        ; set A short
.390f11	a9 00		lda #$00	                LDA #0
.390f13	8f 0b 08 af	sta $af080b	                STA @l RTC_RATES    ; Set watch dog timer and periodic interrupt rates to 0
.390f17	8f 0c 08 af	sta $af080c	                STA @l RTC_ENABLE   ; Disable all the alarms and interrupts
.390f1b	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL      ; Make sure the RTC will continue to tick in battery mode
.390f1f	09 04		ora #$04	                ORA #%00000100
.390f21	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.390f25	28		plp		                PLP
.390f26	68		pla		                PLA
.390f27	6b		rtl		                RTL
.390f28					ITESTSID
.390f28	a9 0f		lda #$0f	                LDA #$0F
.390f2a	8f 18 e4 af	sta $afe418	                STA SID0_MODE_VOL
.390f2e	a9 be		lda #$be	                LDA #$BE
.390f30	8f 05 e4 af	sta $afe405	                STA SID0_V1_ATCK_DECY
.390f34	a9 f8		lda #$f8	                LDA #$F8
.390f36	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.390f3a	a9 11		lda #$11	                LDA #$11
.390f3c	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.390f40	a9 25		lda #$25	                LDA #$25
.390f42	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.390f46	a9 11		lda #$11	                LDA #$11
.390f48	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.390f4c	a9 08		lda #$08	                LDA #$08
.390f4e	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.390f52	a9 00		lda #$00	                LDA #$00
.390f54	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.390f58	a9 c6		lda #$c6	                LDA #$C6
.390f5a	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.390f5e	a9 08		lda #$08	                LDA #$08
.390f60	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.390f64	a9 00		lda #$00	                LDA #$00
.390f66	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI
.390f6a	a9 08		lda #$08	                LDA #$08
.390f6c	8f 0c e4 af	sta $afe40c	                STA SID0_V2_ATCK_DECY
.390f70	a9 c6		lda #$c6	                LDA #$C6
.390f72	8f 0d e4 af	sta $afe40d	                STA SID0_V2_SSTN_RLSE
.390f76	a9 08		lda #$08	                LDA #$08
.390f78	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.390f7c	a9 00		lda #$00	                LDA #$00
.390f7e	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI
.390f82	a9 08		lda #$08	                LDA #$08
.390f84	8f 13 e4 af	sta $afe413	                STA SID0_V3_ATCK_DECY
.390f88	a9 c6		lda #$c6	                LDA #$C6
.390f8a	8f 14 e4 af	sta $afe414	                STA SID0_V3_SSTN_RLSE
.390f8e	a9 36		lda #$36	                LDA #$36              ;Left Side (Rev A of Board)
.390f90	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.390f94	a9 01		lda #$01	                LDA #$01
.390f96	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI   ;G1
.390f9a	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.390f9c	8f 02 e4 af	sta $afe402	                STA SID0_V1_PW_LO
.390fa0	a9 08		lda #$08	                LDA #$08
.390fa2	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.390fa6	a9 08		lda #$08	                LDA #$08
.390fa8	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Reset
.390fac	a9 0c		lda #$0c	                LDA #$0C
.390fae	8f 07 e4 af	sta $afe407	                STA SID0_V2_FREQ_LO
.390fb2	a9 04		lda #$04	                LDA #$04
.390fb4	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI   ;B1
.390fb8	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.390fba	8f 09 e4 af	sta $afe409	                STA SID0_V2_PW_LO
.390fbe	a9 08		lda #$08	                LDA #$08
.390fc0	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.390fc4	a9 08		lda #$08	                LDA #$08
.390fc6	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Reset
.390fca	a9 00		lda #$00	                LDA #$00
.390fcc	8f 0e e4 af	sta $afe40e	                STA SID0_V3_FREQ_LO
.390fd0	a9 08		lda #$08	                LDA #$08
.390fd2	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI   ;D
.390fd6	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.390fd8	8f 10 e4 af	sta $afe410	                STA SID0_V3_PW_LO
.390fdc	a9 08		lda #$08	                LDA #$08
.390fde	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.390fe2	a9 08		lda #$08	                LDA #$08
.390fe4	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Reset
.390fe8	a9 10		lda #$10	                LDA #$10
.390fea	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Triangle
.390fee	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Triangle
.390ff2	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Triangle
.390ff6	6b		rtl		                RTL
.390ff7	48		pha		IINITCODEC      PHA
.390ff8	c2 20		rep #$20	                REP #$20        ; set A long
.390ffa	a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.390ffd	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391001	a9 01 00	lda #$0001	                LDA #$0001
.391004	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391008	20 87 10	jsr $391087	                JSR CODEC_TRF_FINISHED
.39100b	a9 0f 2a	lda #$2a0f	                LDA #%0010101000001111       ;R21 - Enable All the Analog In
.39100e	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391012	a9 01 00	lda #$0001	                LDA #$0001
.391015	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391019	20 87 10	jsr $391087	                JSR CODEC_TRF_FINISHED
.39101c	a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.39101f	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391023	a9 01 00	lda #$0001	                LDA #$0001
.391026	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39102a	20 87 10	jsr $391087	                JSR CODEC_TRF_FINISHED
.39102d	a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.391030	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391034	a9 01 00	lda #$0001	                LDA #$0001
.391037	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39103b	20 87 10	jsr $391087	                JSR CODEC_TRF_FINISHED
.39103e	a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.391041	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391045	a9 01 00	lda #$0001	                LDA #$0001
.391048	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39104c	20 87 10	jsr $391087	                JSR CODEC_TRF_FINISHED
.39104f	a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.391052	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391056	a9 01 00	lda #$0001	                LDA #$0001
.391059	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39105d	20 87 10	jsr $391087	                JSR CODEC_TRF_FINISHED
.391060	a9 d5 19	lda #$19d5	                LDA #%0001100111010101      ;R12 - Master Mode Control
.391063	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391067	a9 01 00	lda #$0001	                LDA #$0001
.39106a	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39106e	20 87 10	jsr $391087	                JSR CODEC_TRF_FINISHED
.391071	68		pla		                PLA
.391072	6b		rtl		                RTL
.391073					IRESETCODEC
.391073	c2 20		rep #$20	                REP #$20        ; set A long
.391075	a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.391078	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39107c	a9 01 00	lda #$0001	                LDA #$0001
.39107f	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391083	20 87 10	jsr $391087	                JSR CODEC_TRF_FINISHED
.391086	6b		rtl		                RTL
.391087					CODEC_TRF_FINISHED
.391087	e2 20		sep #$20	                SEP #$20        ; set A short
.391089	af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.39108d	29 01		and #$01	                AND #$01
.39108f	c9 01		cmp #$01	                CMP #$01
.391091	f0 f6		beq $391089	                BEQ CODEC_LOOP
.391093	c2 20		rep #$20	                REP #$20        ; set A long
.391095	60		rts		                RTS
.391096					IBM_FILL_SCREEN
.391096	c2 30		rep #$30	                REP #$30        ; set A&X long
.391098	a9 00 00	lda #$0000	                LDA #$0000
.39109b	a2 00 00	ldx #$0000	                LDX #$0000
.39109e					BM_FILL_SCREEN_LOOPY
.39109e	a0 00 00	ldy #$0000	                LDY #$0000
.3910a1	e2 20		sep #$20	                SEP #$20        ; set A short
.3910a3					BM_FILL_SCREEN_LOOPX
.3910a3	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.3910a5	c8		iny		                INY
.3910a6	c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.3910a8	d0 f9		bne $3910a3	                BNE BM_FILL_SCREEN_LOOPX
.3910aa	20 b5 10	jsr $3910b5	                JSR BM_FILL_COMPUTE_Y_DST
.3910ad	e8		inx		                INX
.3910ae	e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.3910b0	d0 ec		bne $39109e	                BNE BM_FILL_SCREEN_LOOPY
.3910b2	c2 30		rep #$30	                REP #$30        ; set A&X long
.3910b4	6b		rtl		                RTL
.3910b5					BM_FILL_COMPUTE_Y_DST
.3910b5	c2 20		rep #$20	                REP #$20        ; set A long
.3910b7	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3910b9	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3910bd	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.3910bf	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3910c3	a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.3910c6	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.3910ca	a9 00 00	lda #$0000	                LDA #$0000
.3910cd	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3910d1	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3910d5	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.3910d7	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3910db	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.3910dd	a9 00 00	lda #$0000	                LDA #$0000
.3910e0	60		rts		                RTS
.3910e1					IBMP_PARSER
.3910e1	c2 30		rep #$30	                REP #$30        ; set A&X long
.3910e3	a0 00 00	ldy #$0000	                LDY #$0000
.3910e6	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.3910e8	c9 42 4d	cmp #$4d42	                CMP #$4D42
.3910eb	f0 03		beq $3910f0	                BEQ IBMP_PARSER_CONT
.3910ed	82 04 01	brl $3911f4	                BRL BMP_PARSER_END_WITH_ERROR
.3910f0					IBMP_PARSER_CONT
.3910f0	a0 02 00	ldy #$0002	                LDY #$0002
.3910f3	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.3910f5	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.3910f9	a0 04 00	ldy #$0004	                LDY #$0004
.3910fc	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.3910fe	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.391102	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.391105	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.391109	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.39110d	18		clc		                CLC
.39110e	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391112	85 50		sta $50		                STA BMP_FILE_SIZE
.391114	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391118	85 52		sta $52		                STA BMP_FILE_SIZE+2
.39111a	a0 12 00	ldy #$0012	                LDY #$0012
.39111d	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.39111f	85 40		sta $40		                STA BMP_X_SIZE
.391121	a0 16 00	ldy #$0016	                LDY #$0016
.391124	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391126	85 42		sta $42		                STA BMP_Y_SIZE
.391128	a0 2e 00	ldy #$002e	                LDY #$002E
.39112b	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.39112d	0a		asl a		                ASL A; Multiply by 2
.39112e	0a		asl a		                ASL A; Multiply by 2
.39112f	85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.391131	e0 00 00	cpx #$0000	                CPX #$0000
.391134	d0 05		bne $39113b	                BNE BMP_LUT1_PICK
.391136	20 fc 11	jsr $3911fc	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.391139	80 08		bra $391143	                BRA DONE_TRANSFER_LUT;
.39113b					  BMP_LUT1_PICK
.39113b	e0 01 00	cpx #$0001	                CPX #$0001
.39113e	d0 03		bne $391143	                BNE BMP_LUT2_PICK
.391140	20 2c 12	jsr $39122c	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.391143					  BMP_LUT2_PICK
.391143					  DONE_TRANSFER_LUT
.391143	a5 56		lda $56		                LDA BMP_POSITION_Y
.391145	8f 00 01 00	sta $000100	                STA @lUNSIGNED_MULT_A_LO
.391149	a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.39114b	8f 02 01 00	sta $000102	                STA @lUNSIGNED_MULT_B_LO
.39114f	af 04 01 00	lda $000104	                LDA @lUNSIGNED_MULT_AL_LO
.391153	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.391157	af 06 01 00	lda $000106	                LDA @lUNSIGNED_MULT_AL_LO+2
.39115b	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.39115f	a5 54		lda $54		                LDA BMP_POSITION_X
.391161	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.391165	a9 00 00	lda #$0000	                LDA #$0000
.391168	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.39116c	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.391170	85 f0		sta $f0		                STA USER_TEMP
.391172	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.391176	85 f2		sta $f2		                STA USER_TEMP+2
.391178	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.39117a	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.39117e	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.391180	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.391184	a5 f0		lda $f0		                LDA USER_TEMP
.391186	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.39118a	a5 f2		lda $f2		                LDA USER_TEMP+2
.39118c	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.391190	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.391194	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.391196	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.39119a	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.39119c	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.39119e	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3911a2	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.3911a4	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3911a8	a5 50		lda $50		                LDA BMP_FILE_SIZE
.3911aa	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.3911ae	a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.3911b0	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3911b4	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3911b8	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.3911ba	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3911be	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.3911c0	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3911c2	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3911c6	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.3911c8	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3911cc	18		clc		                CLC
.3911cd	a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.3911cf	49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.3911d2	69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.3911d5	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.3911d9	a9 ff ff	lda #$ffff	                LDA #$FFFF
.3911dc	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.3911e0	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3911e4	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.3911e6	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3911ea	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.3911ec	20 5c 12	jsr $39125c	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.3911ef	a2 95 16	ldx #$1695	                LDX #<>bmp_parser_msg0
.3911f2	80 03		bra $3911f7	                BRA BMP_PARSER_END_NO_ERROR
.3911f4					BMP_PARSER_END_WITH_ERROR
.3911f4	a2 81 16	ldx #$1681	                LDX #<>bmp_parser_err0
.3911f7					BMP_PARSER_END_NO_ERROR
.3911f7	22 32 06 39	jsl $390632	                JSL IPRINT       ; print the first line
.3911fb	6b		rtl		                RTL
.3911fc					BMP_PARSER_UPDATE_LUT0
.3911fc	38		sec		                SEC
.3911fd	a0 7a 00	ldy #$007a	                LDY #$007A
.391200	a2 00 00	ldx #$0000	                LDX #$0000
.391203	e2 20		sep #$20	                SEP #$20        ; set A short
.391205					BMP_PARSER_UPDATE_LOOP
.391205	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.391207	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.39120b	c8		iny		                INY
.39120c	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.39120e	9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.391212	c8		iny		                INY
.391213	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.391215	9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.391219	c8		iny		                INY
.39121a	a9 80		lda #$80	                LDA #$80
.39121c	9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.391220	c8		iny		                INY ; For the Alpha Value, nobody cares
.391221	e8		inx		                INX
.391222	e8		inx		                INX
.391223	e8		inx		                INX
.391224	e8		inx		                INX
.391225	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.391227	d0 dc		bne $391205	                BNE BMP_PARSER_UPDATE_LOOP
.391229	c2 20		rep #$20	                REP #$20        ; set A long
.39122b	60		rts		                RTS
.39122c					BMP_PARSER_UPDATE_LUT1
.39122c	38		sec		                SEC
.39122d	a0 36 00	ldy #$0036	                LDY #$0036
.391230	a2 00 00	ldx #$0000	                LDX #$0000
.391233	e2 20		sep #$20	                SEP #$20        ; set A short
.391235					PALETTE_LUT1_LOOP
.391235	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.391237	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.39123b	c8		iny		                INY
.39123c	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.39123e	9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.391242	c8		iny		                INY
.391243	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.391245	9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.391249	c8		iny		                INY
.39124a	a9 80		lda #$80	                LDA #$80
.39124c	9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.391250	c8		iny		                INY ; For the Alpha Value, nobody cares
.391251	e8		inx		                INX
.391252	e8		inx		                INX
.391253	e8		inx		                INX
.391254	e8		inx		                INX
.391255	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.391257	d0 dc		bne $391235	                BNE PALETTE_LUT1_LOOP
.391259	c2 20		rep #$20	                REP #$20        ; set A long
.39125b	60		rts		                RTS
.39125c					BMP_PARSER_DMA_SHIT_OUT
.39125c	a2 00 00	ldx #$0000	                LDX #$0000
.39125f					BMP_PARSER_LOOPY
.39125f	a0 00 00	ldy #$0000	                LDY #$0000
.391262	e2 20		sep #$20	                SEP #$20        ; set A short
.391264					BMP_PARSER_LOOPX
.391264	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.391266	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.391268	c8		iny		                INY
.391269	c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.39126b	d0 f7		bne $391264	                BNE BMP_PARSER_LOOPX
.39126d	20 79 12	jsr $391279	                JSR BMP_PARSER_COMPUTE_Y_SRC
.391270	20 94 12	jsr $391294	                JSR BMP_PARSER_COMPUTE_Y_DST
.391273	e8		inx		                INX
.391274	e4 42		cpx $42		                CPX BMP_Y_SIZE
.391276	d0 e7		bne $39125f	                BNE BMP_PARSER_LOOPY
.391278	60		rts		                RTS
.391279					BMP_PARSER_COMPUTE_Y_SRC
.391279	c2 20		rep #$20	                REP #$20        ; set A long
.39127b	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.39127d	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.391281	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.391283	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.391287	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.39128b	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.39128d	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391291	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.391293	60		rts		                RTS
.391294					BMP_PARSER_COMPUTE_Y_DST
.391294	c2 20		rep #$20	                REP #$20        ; set A long
.391296	18		clc		                CLC
.391297	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.391299	65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.39129b	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.39129d	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.39129f	69 00 00	adc #$0000	                ADC #$0000
.3912a2	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.3912a4	60		rts		                RTS
.3912a5	ea		nop		ILOOP           NOP
.3912a6	ea		nop		                NOP
.3912a7	ea		nop		                NOP
.3912a8	ea		nop		                NOP
.3912a9	ea		nop		                NOP
.3912aa	ea		nop		                NOP
.3912ab	ea		nop		                NOP
.3912ac	ea		nop		                NOP
.3912ad	ea		nop		                NOP
.3912ae	ea		nop		                NOP
.3912af	6b		rtl		                RTL
.3912b0	22 a5 12 39	jsl $3912a5	ILOOP_1         JSL ILOOP
.3912b4	22 a5 12 39	jsl $3912a5	                JSL ILOOP
.3912b8	22 a5 12 39	jsl $3912a5	                JSL ILOOP
.3912bc	22 a5 12 39	jsl $3912a5	                JSL ILOOP
.3912c0	22 a5 12 39	jsl $3912a5	                JSL ILOOP
.3912c4	22 a5 12 39	jsl $3912a5	                JSL ILOOP
.3912c8	22 a5 12 39	jsl $3912a5	                JSL ILOOP
.3912cc	22 a5 12 39	jsl $3912a5	                JSL ILOOP
.3912d0	22 a5 12 39	jsl $3912a5	                JSL ILOOP
.3912d4	22 a5 12 39	jsl $3912a5	                JSL ILOOP
.3912d8	6b		rtl		                RTL
.3912d9	22 b0 12 39	jsl $3912b0	ILOOP_1MS       JSL ILOOP_1
.3912dd	6b		rtl		                RTL
.3912de	e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.3912e1	f0 07		beq $3912ea	                BEQ LOOP_MS_END
.3912e3	22 d9 12 39	jsl $3912d9	                JSL ILOOP_1MS
.3912e7	ca		dex		                DEX
.3912e8	80 f4		bra $3912de	                BRA ILOOP_MS
.3912ea	6b		rtl		LOOP_MS_END     RTL
.3912eb					SHOW_CREDITS
.3912eb	48		pha		                PHA
.3912ec	da		phx		                PHX
.3912ed	5a		phy		                PHY
.3912ee	08		php		                PHP
.3912ef	e2 20		sep #$20	                SEP #$20        ; set A short
.3912f1	c2 10		rep #$10	                REP #$10        ; set X long
.3912f3	af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Disable the cursor
.3912f7	29 fe		and #$fe	                AND #~Vky_Cursor_Enable
.3912f9	8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.3912fd	a2 00 00	ldx #$0000	                LDX #0
.391300	bf 00 00 3b	lda $3b0000,x	credit_loop     LDA @lCREDITS_TEXT,X            ; Copy a byte of text
.391304	9f 00 a0 af	sta $afa000,x	                STA @lCS_TEXT_MEM_PTR,X
.391308	bf 00 20 3b	lda $3b2000,x	                LDA @lCREDITS_COLOR,X           ; Copy a byte of color
.39130c	9f 00 c0 af	sta $afc000,x	                STA @lCS_COLOR_MEM_PTR,X
.391310	e8		inx		                INX
.391311	e0 00 20	cpx #$2000	                CPX #128 * 64
.391314	d0 ea		bne $391300	                BNE credit_loop
.391316	22 0b 06 39	jsl $39060b	                JSL IGETCHW                     ; Wait for a keypress
.39131a	22 41 09 39	jsl $390941	                JSL ICLRSCREEN                  ; Then clear the screen and return
.39131e	22 ad 07 39	jsl $3907ad	                JSL ICSRHOME                    ; Move cursor to the home position
.391322	af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Enable the cursor
.391326	09 01		ora #$01	                ORA #Vky_Cursor_Enable
.391328	8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.39132c	28		plp		                PLP
.39132d	7a		ply		                PLY
.39132e	fa		plx		                PLX
.39132f	68		pla		                PLA
.391330	6b		rtl		                RTL
.391331	00		brk #		IRESTORE        BRK ; Warm boot routine
.391332	00		brk #		ISCINIT         BRK ;
.391333	00		brk #		IIOINIT         BRK ;
.391334	00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.391335	00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.391336	00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.391337	00		brk #		ICLOSE          BRK ; Close a channel
.391338	00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.391339	00		brk #		IGETCH          BRK ; Get a character from the input channel. A=0 and Carry=1 if no data is wating
.39133a	00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.39133b	00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.39133c	00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.39133d	00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.39133e	00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.39133f	00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.391340	00		brk #		IPRINTF         BRK ; Print a float value
.391341	00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.391342	00		brk #		IPRINTAI        BRK ; Prints integer value in A
.391343	00		brk #		IPUSHKEY        BRK ;
.391344	00		brk #		IPUSHKEYS       BRK ;
.391345	00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.391346	00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.
.391347					KERNEL_DATA
>391347	20 20 20 20 0b 0c 0b 0c		greet_msg       .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " FFFFFFF MMMMMMMM XX    XXX " ,$0D
>39134f	0b 0c 0b 0c 0b 0c 20 46 46 46 46 46 46 46 20 4d
>39135f	4d 4d 4d 4d 4d 4d 4d 20 58 58 20 20 20 20 58 58
>39136f	58 20 0d
>391372	20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM   XX XXX   ",$0D
>39137a	0c 0b 0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d
>39138a	20 4d 4d 20 4d 4d 20 20 20 58 58 20 58 58 58 20
>39139a	20 20 0d
>39139d	20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FFFFF   MM MM MM    XXX      ",$0D
>3913a5	0b 0c 0b 0c 20 46 46 46 46 46 20 20 20 4d 4d 20
>3913b5	4d 4d 20 4d 4d 20 20 20 20 58 58 58 20 20 20 20
>3913c5	20 20 0d
>3913c8	20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM  XXX  XX     ",$0D
>3913d0	0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d
>3913e0	4d 20 4d 4d 20 20 58 58 58 20 20 58 58 20 20 20
>3913f0	20 20 0d
>3913f3	0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM XXX     XX    ",$0D
>3913fb	0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d 4d
>39140b	20 4d 4d 20 58 58 58 20 20 20 20 20 58 58 20 20
>39141b	20 20 0d
>39141e	0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX FMX -- 3,670,016 Bytes Free", $0D
>391426	45 4e 49 58 20 46 4d 58 20 2d 2d 20 33 2c 36 37
>391436	30 2c 30 31 36 20 42 79 74 65 73 20 46 72 65 65
>391446	0d
>391447	77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com - Kernel Date: "
>39144f	66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 20 4b 65 72
>39145f	6e 65 6c 20 44 61 74 65 3a 20

;******  Processing file: src/version.asm

>391469	41 70 72 69 6c 20 32 32		.text "April 22, 2020"
>391471	2c 20 32 30 32 30

;******  Return to file: src/kernel.asm

>391477	0d 00				                .text $0D,$00
.391479					old_pc_style_stat
>391479	1d 1d 1d 1d 1d 1d 8d 8d		greet_clr_line1 .text $1D, $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>391481	4d 4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd
>391491	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3914a1	fd fd
>3914a3	1d 1d 1d 1d 1d 8d 8d 4d		greet_clr_line2 .text $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>3914ab	4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd
>3914bb	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3914cb	fd fd
>3914cd	1d 1d 1d 1d 8d 8d 4d 4d		greet_clr_line3 .text $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>3914d5	2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd
>3914e5	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3914f5	fd fd
>3914f7	1d 1d 1d 8d 8d 4d 4d 2d		greet_clr_line4 .text $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>3914ff	2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd
>39150f	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>39151f	fd fd
>391521	1d 1d 8d 8d 4d 4d 2d 2d		greet_clr_line5 .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>391529	5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>391539	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>391549	fd fd
>39154b	00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>39154f	00 00 80 ff			                .text $00, $00, $80, $FF
>391553	00 80 00 ff			                .text $00, $80, $00, $FF
>391557	80 00 00 ff			                .text $80, $00, $00, $FF
>39155b	00 80 80 ff			                .text $00, $80, $80, $FF
>39155f	80 80 00 ff			                .text $80, $80, $00, $FF
>391563	80 00 80 ff			                .text $80, $00, $80, $FF
>391567	80 80 80 ff			                .text $80, $80, $80, $FF
>39156b	00 45 ff ff			                .text $00, $45, $FF, $FF
>39156f	13 45 8b ff			                .text $13, $45, $8B, $FF
>391573	00 00 20 ff			                .text $00, $00, $20, $FF
>391577	00 20 00 ff			                .text $00, $20, $00, $FF
>39157b	20 00 00 ff			                .text $20, $00, $00, $FF
>39157f	20 20 20 ff			                .text $20, $20, $20, $FF
>391583	40 40 40 ff			                .text $40, $40, $40, $FF
>391587	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>39158b	00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>39158f	00 00 80 ff			                .text $00, $00, $80, $FF
>391593	00 80 00 ff			                .text $00, $80, $00, $FF
>391597	80 00 00 ff			                .text $80, $00, $00, $FF
>39159b	00 20 20 ff			                .text $00, $20, $20, $FF
>39159f	20 20 00 ff			                .text $20, $20, $00, $FF
>3915a3	20 00 20 ff			                .text $20, $00, $20, $FF
>3915a7	20 20 20 ff			                .text $20, $20, $20, $FF
>3915ab	1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>3915af	13 45 8b ff			                .text $13, $45, $8B, $FF
>3915b3	00 00 20 ff			                .text $00, $00, $20, $FF
>3915b7	00 20 00 ff			                .text $00, $20, $00, $FF
>3915bb	40 00 00 ff			                .text $40, $00, $00, $FF
>3915bf	10 10 10 ff			                .text $10, $10, $10, $FF
>3915c3	40 40 40 ff			                .text $40, $40, $40, $FF
>3915c7	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>3915cb	43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>3915d3	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>3915e3	00
>3915e4	43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>3915ec	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>3915fc	00
>3915fd	43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>391605	20 45 78 65 63 75 74 65 64 2e 0d 00
>391611	43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>391619	20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>391629	43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>391631	20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>391641	64 2e 2e 2e 0d 00
>391647	4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>39164f	20 50 72 65 73 65 6e 74 0d 00
>391659	4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>391661	61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>391671	46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>391681	4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>391689	54 55 52 45 20 46 4f 55 4e 44 2e 00
>391695	42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>39169d	45 44 2e 00
>3916a1	45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>3916a9	47 20 42 4d 50 20 50 41 52 53 45 52 00
>3916b6	49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>3916be	50 72 65 73 65 6e 74 3a 00
>3916c7	42 6f 6f 74 20 44 49 50		boot_invalid    .text "Boot DIP switch settings are invalid", $00
>3916cf	20 73 77 69 74 63 68 20 73 65 74 74 69 6e 67 73
>3916df	20 61 72 65 20 69 6e 76 61 6c 69 64 00
>3916ec	42 6f 6f 74 69 6e 67 20		sdcard_notimpl  .text "Booting from SD card is not yet implemented.", $00
>3916f4	66 72 6f 6d 20 53 44 20 63 61 72 64 20 69 73 20
>391704	6e 6f 74 20 79 65 74 20 69 6d 70 6c 65 6d 65 6e
>391714	74 65 64 2e 00
>391719	42 6f 6f 74 69 6e 67 20		ide_notimpl     .text "Booting from IDE drive is not yet implemented.", $00
>391721	66 72 6f 6d 20 49 44 45 20 64 72 69 76 65 20 69
>391731	73 20 6e 6f 74 20 79 65 74 20 69 6d 70 6c 65 6d
>391741	65 6e 74 65 64 2e 00
>391748	42 6f 6f 74 69 6e 67 20		floppy_notimpl  .text "Booting from floppy drive is not yet implemented.", $00
>391750	66 72 6f 6d 20 66 6c 6f 70 70 79 20 64 72 69 76
>391760	65 20 69 73 20 6e 6f 74 20 79 65 74 20 69 6d 70
>391770	6c 65 6d 65 6e 74 65 64 2e 00
>39177a	0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>391782	41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>39178a	52 4f 52 00
>39178e	30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>391796	38 39 41 42 43 44 45 46 00
>39179f					.align 256
>391800	00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2B, $5C, $08, $09    ; $00
>391808	37 38 39 30 2b 5c 08 09
>391810	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $E5, $7E, $0D, $00, $61, $73    ; $10
>391818	6f 70 e5 7e 0d 00 61 73
>391820	64 66 67 68 6a 6b 6c f8		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $F8, $E6, $7C, $00, $27, $7A, $78, $63, $76    ; $20
>391828	e6 7c 00 27 7a 78 63 76
>391830	62 6e 6d 2c 2e 2d 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2D, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>391838	00 20 00 00 00 00 00 00
>391840	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>391848	11 00 00 9d 00 1d 00 00
>391850	91 00 00 00 00 00 3c 00		                      .text $91, $00, $00, $00, $00, $00, $3C, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>391858	00 00 00 00 00 00 00 00
>391860	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>391868	00 00 00 00 00 00 00 00
>391870	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>391878	00 00 00 00 00 00 00 00
>391880	00 00 21 22 23 24 25 26		ScanCode_Shift_Set1   .text $00, $00, $21, $22, $23, $24, $25, $26, $2F, $28, $29, $3D, $3F, $5C, $08, $09    ; $00
>391888	2f 28 29 3d 3f 5c 08 09
>391890	51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $C5, $5E, $0D, $00, $41, $53    ; $10
>391898	4f 50 c5 5e 0d 00 41 53
>3918a0	44 46 47 48 4a 4b 4c d8		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $D8, $C6, $40, $00, $2A, $5A, $58, $43, $56    ; $20
>3918a8	c6 40 00 2a 5a 58 43 56
>3918b0	42 4e 4d 3b 3a 5f 00 00		                      .text $42, $4E, $4D, $3B, $3A, $5F, $00, $00, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3918b8	00 20 00 00 00 00 00 00
>3918c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3918c8	00 00 00 00 00 00 00 00
>3918d0	00 00 00 00 00 00 3e 00		                      .text $00, $00, $00, $00, $00, $00, $3E, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3918d8	00 00 00 00 00 00 00 00
>3918e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3918e8	00 00 00 00 00 00 00 00
>3918f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3918f8	00 00 00 00 00 00 00 00
>391900	00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>391908	37 38 39 30 2d 3d 08 09
>391910	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>391918	6f 70 5b 5d 0d 00 61 73
>391920	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $03, $76    ; $20
>391928	27 60 00 5c 7a 78 03 76
>391930	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>391938	00 20 00 00 00 00 00 00
>391940	00 00 00 00 00 18 00 00		                      .text $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>391948	00 00 00 00 00 00 00 00
>391950	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>391958	00 00 00 00 00 00 00 00
>391960	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>391968	00 00 00 00 00 00 00 00
>391970	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>391978	00 00 00 00 00 00 00 00
>391980	00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>391988	37 38 39 30 2d 3d 08 09
>391990	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>391998	6f 70 5b 5d 0d 00 61 73
>3919a0	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>3919a8	27 60 00 5c 7a 78 63 76
>3919b0	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3919b8	00 20 00 00 00 00 00 00
>3919c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3919c8	00 00 00 00 00 00 00 00
>3919d0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3919d8	00 00 00 00 00 00 00 00
>3919e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3919e8	00 00 00 00 00 00 00 00
>3919f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3919f8	00 00 00 00 00 00 00 00
>391a00	00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>391a08	37 38 39 30 2d 3d 08 09
>391a10	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>391a18	6f 70 5b 5d 0d 00 61 73
>391a20	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>391a28	27 60 00 5c 7a 78 63 76
>391a30	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>391a38	00 20 00 00 00 00 00 00
>391a40	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>391a48	00 00 00 00 00 00 00 00
>391a50	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>391a58	00 00 00 00 00 00 00 00
>391a60	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>391a68	00 00 00 00 00 00 00 00
>391a70	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>391a78	00 00 00 00 00 00 00 00
>391a80	00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>391a88	00 00 00 00 00 00 00 00
>391a90	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>391a98	00 00 00 00 00 00 00 00
>391aa0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>391aa8	00 00 00 00 00 00 00 00
>391ab0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>391ab8	00 00 00 00 00 00 00 00
>391ac0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>391ac8	11 00 00 9d 00 1d 00 00
>391ad0	91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>391ad8	00 00 00 00 00 00 00 00
>391ae0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>391ae8	00 00 00 00 00 00 00 00
>391af0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>391af8	00 00 00 00 00 00 00 00
>391b00					.align 256
>391b00	00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>391b08	34 37 3a 3d 3f 41 44 46
>391b10	48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>391b18	57 58 5a 5b 5d 5e 60 61
>391b20	63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>391b28	6d 6f 70 71 72 73 75 76
>391b30	77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>391b38	80 81 82 83 84 85 86 87
>391b40	88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>391b48	8f 90 91 92 93 93 94 95
>391b50	96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>391b58	9d 9e 9e 9f a0 a1 a2 a2
>391b60	a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>391b68	a9 aa ab ab ac ad ae ae
>391b70	af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>391b78	b5 b5 b6 b7 b7 b8 b9 b9
>391b80	ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>391b88	bf c0 c0 c1 c2 c2 c3 c4
>391b90	c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>391b98	c9 ca ca cb cb cc cd cd
>391ba0	ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>391ba8	d2 d3 d4 d4 d5 d5 d6 d6
>391bb0	d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>391bb8	db dc dc dd de de df df
>391bc0	e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>391bc8	e4 e4 e5 e5 e6 e6 e7 e7
>391bd0	e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>391bd8	ec ec ed ed ee ee ef ef
>391be0	f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>391be8	f4 f4 f5 f5 f6 f6 f7 f7
>391bf0	f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>391bf8	fb fc fc fd fd fe fe ff
>391c00					.align 256
>391c00	00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>391c08	25 27 2a 2c 2e 30 32 34
>391c10	36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>391c18	44 46 47 49 4a 4c 4d 4f
>391c20	50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>391c28	5b 5c 5d 5e 60 61 62 63
>391c30	64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>391c38	6d 6e 70 71 72 73 74 75
>391c40	76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>391c48	7e 7f 80 81 82 83 84 84
>391c50	85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>391c58	8d 8e 8e 8f 90 91 92 93
>391c60	94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>391c68	9a 9b 9c 9d 9e 9f 9f a0
>391c70	a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>391c78	a7 a8 a9 aa aa ab ac ad
>391c80	ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>391c88	b3 b4 b5 b6 b6 b7 b8 b8
>391c90	b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>391c98	bf bf c0 c1 c2 c2 c3 c4
>391ca0	c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>391ca8	ca ca cb cc cc cd ce ce
>391cb0	cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>391cb8	d4 d5 d6 d6 d7 d7 d8 d9
>391cc0	d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>391cc8	de df e0 e0 e1 e1 e2 e3
>391cd0	e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>391cd8	e8 e9 e9 ea ea eb ec ec
>391ce0	ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>391ce8	f1 f2 f3 f3 f4 f4 f5 f5
>391cf0	f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>391cf8	fb fb fc fc fd fd fe ff
>391d00					.align 256
>391d00	1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>391d08	83 dd ce 39 cd c5 3b 15
>391d10	22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>391d18	87 12 31 65 89 27 88 42
>391d20	b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>391d28	94 ce 56 ec fe da 58 c9
>391d30	c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>391d38	d0 10 2c b2 4b ea 32 61
>391d40	da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>391d48	a1 e6 ca 2d b3 ce b0 79
>391d50	44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>391d58	5f e3 fb bd 15 2e be f5
>391d60	e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>391d68	8d 8f 2c 80 0a 5e 99 36
>391d70	ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>391d78	13 52 44 2f e3 ef 44 a2
>391d80	86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>391d88	be 23 02 58 0a 52 5e b4
>391d90	9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>391d98	d5 cf 3e df c4 9e da bb
>391da0	9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>391da8	77 7d b1 3b 4a 68 35 6e
>391db0	ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>391db8	b5 8f 44 63 55 6f e1 50
>391dc0	f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>391dc8	57 74 b9 bd 05 14 50 eb
>391dd0	a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>391dd8	44 bc ec db 22 58 fc be
>391de0	5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>391de8	24 aa 82 11 5c 9f 43 4d
>391df0	8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>391df8	3e 3d 66 7e 0a 1c 6b 74
>391e00					.align 16
>391e00	00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>391e08	01 01 01 00 00 00 00 00
>391e10	01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>391e18	ff ff ff 01 00 00 00 00
>391e20	01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>391e28	01 55 ff ff 01 00 00 00
>391e30	01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>391e38	ff ff ff ff 01 00 00 00
>391e40	00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>391e48	ff ff 01 ff ff 01 00 00
>391e50	00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>391e58	01 ff ff 01 ff 01 00 00
>391e60	00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>391e68	ff 01 ff ff ff 01 00 00
>391e70	00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>391e78	ff ff ff ff ff 01 01 00
>391e80	00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>391e88	ff ff ff ff 01 ff ff 01
>391e90	00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>391e98	ff ff ff ff ff ff ff 01
>391ea0	00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>391ea8	55 55 01 ff ff 55 01 00
>391eb0	00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>391eb8	01 01 55 ff 55 01 00 00
>391ec0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>391ec8	01 55 55 55 01 00 00 00
>391ed0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>391ed8	01 55 55 01 00 00 00 00
>391ee0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>391ee8	00 01 01 00 00 00 00 00
>391ef0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>391ef8	00 00 00 00 00 00 00 00
.3ff000					FONT_4_BANK0
>3ff000	00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>3ff008	7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>3ff018	00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>3ff028	00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>3ff038	00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>3ff048	00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>3ff058	01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>3ff068	04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>3ff078	00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>3ff088	00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>3ff098	66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>3ff0a8	7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>3ff0b8	18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>3ff0c8	18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>3ff0d8	00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>3ff0e8	00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>3ff0f8	00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>3ff108	30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>3ff118	6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>3ff128	f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>3ff138	0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>3ff148	10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>3ff158	00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>3ff168	00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>3ff178	02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>3ff188	18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>3ff198	7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>3ff1a8	fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>3ff1b8	fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>3ff1c8	7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>3ff1d8	00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>3ff1e8	00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>3ff1f8	7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>3ff208	7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>3ff218	7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>3ff228	fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>3ff238	7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>3ff248	3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>3ff258	c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>3ff268	c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>3ff278	7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>3ff288	7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>3ff298	7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>3ff2a8	c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>3ff2b8	c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>3ff2c8	66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>3ff2d8	1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>3ff2e8	70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>3ff2f8	00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>3ff308	00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>3ff318	00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>3ff328	00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>3ff338	00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>3ff348	18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>3ff358	c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>3ff368	00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>3ff378	00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>3ff388	00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>3ff398	00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>3ff3a8	00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>3ff3b8	00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>3ff3c8	00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>3ff3d8	0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>3ff3e8	e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>3ff3f8	00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>3ff408	66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>3ff418	18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>3ff428	38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>3ff438	00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>3ff448	66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>3ff458	66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>3ff468	38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>3ff478	18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>3ff488	00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>3ff498	18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>3ff4a8	38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>3ff4b8	38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>3ff4c8	66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>3ff4d8	18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>3ff4e8	66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>3ff4f8	00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>3ff508	1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>3ff518	0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>3ff528	66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>3ff538	7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>3ff548	00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>3ff558	c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>3ff568	30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>3ff578	00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>3ff588	aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>3ff598	18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>3ff5a8	18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>3ff5b8	00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>3ff5c8	36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>3ff5d8	00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>3ff5e8	36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>3ff5f8	00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>3ff608	18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>3ff618	18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>3ff628	18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>3ff638	36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>3ff648	00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>3ff658	00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>3ff668	00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>3ff678	18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>3ff688	00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>3ff698	36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>3ff6a8	00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>3ff6b8	36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>3ff6c8	18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>3ff6d8	ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>3ff6e8	f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>3ff6f8	ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>3ff708	1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>3ff718	00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>3ff728	00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>3ff738	00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>3ff748	00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>3ff758	1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>3ff768	00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>3ff778	00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>3ff788	18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>3ff798	1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>3ff7a8	18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>3ff7b8	00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>3ff7c8	00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>3ff7d8	0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>3ff7e8	f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>3ff7f8	00 00 00 00 00 00 00 00
.3ff800					FONT_4_BANK1
>3ff800	00 00 00 00 00 00 00 00		.binary "FONT/CBM-ASCII_8x8.bin", 0, 2048
>3ff808	7c 82 aa 82 ba 92 82 7c 7c fe d6 fe c6 ee fe 7c
>3ff818	ff fd fb f5 eb d5 ab ff ff e1 fd 85 85 87 87 ff
>3ff828	ff bd db e7 e7 db bd ff ff 81 81 bd bd bd 81 ff
>3ff838	ff ff ff ff ff 81 81 ff 00 08 10 20 10 08 00 00
>3ff848	00 24 14 0c 14 24 00 00 00 8e 88 8c 88 e8 00 00
>3ff858	00 00 00 00 00 00 00 00 00 ee 88 cc 88 88 00 00
>3ff868	00 00 04 14 3c 10 00 00 00 30 4c 4c 30 00 00 00
>3ff878	00 38 28 38 28 00 00 00 ff 81 bd bd bd bd 81 ff
>3ff888	ff 55 aa 55 aa 55 aa ff ab d5 ab d5 ab d5 ab d5
>3ff898	ff 81 81 81 81 81 81 ff ff f9 e1 81 81 e1 f9 ff
>3ff8a8	ff 9f 87 81 81 87 9f ff ff e7 e7 c3 c3 81 81 ff
>3ff8b8	ff 81 81 c3 c3 e7 e7 ff 00 26 54 04 04 04 06 00
>3ff8c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 3 times (48 bytes)...
>3ff908	10 10 10 10 00 10 00 00 24 24 24 00 00 00 00 00
>3ff918	24 7e 24 24 7e 24 00 00 10 3c 50 38 14 78 10 00
>3ff928	62 64 08 10 20 4c 8c 00 30 48 48 30 58 4c 4c 38
>3ff938	10 10 10 00 00 00 00 00 08 10 20 20 20 20 10 08
>3ff948	10 08 04 04 04 04 08 10 00 24 18 7e 18 24 00 00
>3ff958	00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>3ff968	00 00 00 3c 00 00 00 00 00 00 00 00 18 18 00 00
>3ff978	04 04 08 08 10 10 20 20 3c 46 4a 52 62 42 3c 00
>3ff988	10 30 10 10 10 10 38 00 38 44 04 18 20 40 7c 00
>3ff998	38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>3ff9a8	7c 40 78 04 04 44 38 00 38 44 40 78 44 44 38 00
>3ff9b8	7c 44 04 08 08 10 10 00 38 44 44 38 44 44 38 00
>3ff9c8	38 44 44 3c 04 44 38 00 00 00 18 00 00 18 00 00
>3ff9d8	00 00 18 00 00 18 18 30 00 08 10 20 10 08 00 00
>3ff9e8	00 00 3c 00 3c 00 00 00 00 10 08 04 08 10 00 00
>3ff9f8	38 44 04 08 10 00 10 00 38 44 4c 4c 40 44 38 00
>3ffa08	10 28 44 7c 44 44 00 00 78 44 78 44 44 78 00 00
>3ffa18	38 44 40 40 44 38 00 00 78 44 44 44 44 78 00 00
>3ffa28	7c 40 78 40 40 7c 00 00 7c 40 78 40 40 40 00 00
>3ffa38	38 44 40 4c 44 38 00 00 44 44 7c 44 44 44 00 00
>3ffa48	38 10 10 10 10 38 00 00 1c 08 08 08 48 30 00 00
>3ffa58	24 28 30 30 28 24 00 00 20 20 20 20 20 3c 00 00
>3ffa68	44 6c 7c 54 44 44 00 00 44 64 54 4c 44 44 00 00
>3ffa78	38 44 44 44 44 38 00 00 78 44 44 78 40 40 00 00
>3ffa88	38 44 44 44 44 38 0c 00 78 44 44 78 48 44 00 00
>3ffa98	3c 40 38 04 04 78 00 00 7c 10 10 10 10 10 00 00
>3ffaa8	44 44 44 44 44 38 00 00 44 44 44 44 28 10 00 00
>3ffab8	82 82 82 92 92 6c 00 00 42 24 18 18 24 42 00 00
>3ffac8	44 44 28 10 10 10 00 00 7c 08 10 20 40 7c 00 00
>3ffad8	38 20 20 20 20 20 38 00 20 20 10 10 08 08 04 04
>3ffae8	38 08 08 08 08 08 38 00 00 10 28 44 00 00 00 00
>3ffaf8	00 00 00 00 00 00 00 7e 40 20 10 00 00 00 00 00
>3ffb08	00 38 04 3c 64 3c 00 00 40 40 78 44 44 78 00 00
>3ffb18	00 00 38 40 40 38 00 00 04 04 3c 44 44 3c 00 00
>3ffb28	00 38 44 7c 40 3c 00 00 0c 10 3c 10 10 10 00 00
>3ffb38	00 00 3c 44 44 3c 04 78 40 40 78 44 44 44 00 00
>3ffb48	10 00 30 10 10 38 00 00 08 00 08 08 08 08 08 30
>3ffb58	20 20 24 38 28 24 00 00 30 10 10 10 10 10 00 00
>3ffb68	00 00 68 54 54 44 00 00 00 00 38 24 24 24 00 00
>3ffb78	00 00 38 44 44 38 00 00 00 00 78 44 44 78 40 40
>3ffb88	00 00 3c 44 44 3c 04 04 00 00 78 44 40 40 00 00
>3ffb98	00 00 1c 30 0c 38 00 00 00 10 7c 10 10 10 0c 00
>3ffba8	00 00 44 44 44 3c 00 00 00 00 42 42 24 18 00 00
>3ffbb8	00 00 82 82 92 6c 00 00 00 00 24 18 18 24 00 00
>3ffbc8	00 00 24 24 24 1c 04 38 00 00 7c 18 30 7c 00 00
>3ffbd8	0c 10 10 30 30 10 10 0c 18 18 18 00 18 18 18 00
>3ffbe8	30 08 08 0c 0c 08 08 30 00 00 32 7e 4c 00 00 00
>3ffbf8	00 00 10 28 38 00 00 00 00 00 3c 3c 3c 3c 00 00
>3ffc08	00 00 3c 24 24 3c 00 00 00 00 18 3c 3c 18 00 00
>3ffc18	00 00 18 24 24 18 00 00 18 24 24 18 00 00 00 00
>3ffc28	00 3c 42 42 66 24 66 00 00 18 00 18 0c 06 66 3c
>3ffc38	0c 12 30 7c 30 62 fc 00 1c 20 70 20 70 20 1c 00
>3ffc48	02 06 0c d8 f0 e0 c0 00 18 18 ff 00 00 ff 00 00
>3ffc58	00 00 ff 00 00 ff 18 18 24 24 24 e7 e7 24 24 24
>3ffc68	18 18 ff 00 00 ff 18 18 24 24 24 27 27 24 24 24
>3ffc78	24 24 24 e4 e4 24 24 24 00 00 00 ff ff ff ff ff
>3ffc88	00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>3ffc98	ff ff ff ff ff ff ff 00 ff ff ff ff ff ff 00 00
>3ffca8	ff ff ff ff ff 00 00 00 ff ff ff ff 00 00 00 00
>3ffcb8	f8 f8 f8 f8 f8 f8 f8 f8 fc fc fc fc fc fc fc fc
>3ffcc8	fe fe fe fe fe fe fe fe 7f 7f 7f 7f 7f 7f 7f 7f
>3ffcd8	3f 3f 3f 3f 3f 3f 3f 3f 1f 1f 1f 1f 1f 1f 1f 1f
>3ffce8	0f 0f 0f 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00
>3ffcf8	00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff
>3ffd08	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>3ffd18	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>3ffd28	80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>3ffd38	01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>3ffd48	ff fe fc f8 f0 e0 c0 80 03 03 03 03 03 03 03 03
>3ffd58	18 18 18 1f 1f 18 18 18 00 00 00 00 0f 0f 0f 0f
>3ffd68	18 18 18 1f 1f 00 00 00 00 00 00 f8 f8 18 18 18
>3ffd78	00 00 00 00 00 00 ff ff 00 00 00 1f 1f 18 18 18
>3ffd88	18 18 18 ff ff 00 00 00 00 00 00 ff ff 18 18 18
>3ffd98	18 18 18 f8 f8 18 18 18 c0 c0 c0 c0 c0 c0 c0 c0
>3ffda8	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>3ffdb8	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>3ffdc8	00 00 00 00 00 ff ff ff 03 03 03 03 03 03 ff ff
>3ffdd8	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>3ffde8	18 18 18 f8 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>3ffdf8	f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 ff ff 00 00 00
>3ffe08	08 1c 3e 7f 7f 1c 3e 00 18 18 18 18 18 18 18 18
>3ffe18	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00
>3ffe28	00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00 00
>3ffe38	30 30 30 30 30 30 30 30 0c 0c 0c 0c 0c 0c 0c 0c
>3ffe48	00 00 00 e0 f0 38 18 18 18 18 1c 0f 07 00 00 00
>3ffe58	18 18 38 f0 e0 00 00 00 c0 c0 c0 c0 c0 c0 ff ff
>3ffe68	c0 e0 70 38 1c 0e 07 03 03 07 0e 1c 38 70 e0 c0
>3ffe78	ff ff c0 c0 c0 c0 c0 c0 ff ff 03 03 03 03 03 03
>3ffe88	00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 ff ff 00
>3ffe98	36 7f 7f 7f 3e 1c 08 00 60 60 60 60 60 60 60 60
>3ffea8	00 00 00 07 0f 1c 18 18 c3 e7 7e 3c 3c 7e e7 c3
>3ffeb8	00 3c 7e 66 66 7e 3c 00 18 18 66 66 18 18 3c 00
>3ffec8	06 06 06 06 06 06 06 06 08 1c 3e 7f 3e 1c 08 00
>3ffed8	18 18 18 ff ff 18 18 18 c0 c0 30 30 c0 c0 30 30
>3ffee8	18 18 18 18 18 18 18 18 00 00 03 3e 76 36 36 00
>3ffef8	ff 7f 3f 1f 0f 07 03 01 24 24 24 24 24 24 24 24
>3fff08	00 00 ff 00 00 ff 00 00 00 00 3f 20 20 27 24 24
>3fff18	00 00 ff 00 00 e7 24 24 00 00 fc 04 04 e4 24 24
>3fff28	24 24 27 20 20 3f 00 00 24 24 e7 00 00 ff 00 00
>3fff38	24 24 e4 04 04 fc 00 00 24 24 27 20 20 27 24 24
>3fff48	24 24 e4 04 04 e4 24 24 24 24 e7 00 00 e7 24 24
>3fff58	0f 0f 0f 0f f0 f0 f0 f0 01 03 07 0f 1f 3f 7f ff
>3fff68	80 c0 e0 f0 f8 fc fe ff 33 99 cc 66 33 99 cc 66
>3fff78	cc 99 33 66 cc 99 33 66 f0 f0 f0 f0 ff ff ff ff
>3fff88	0f 0f 0f 0f ff ff ff ff ff ff ff ff f0 f0 f0 f0
>3fff98	ff ff ff ff 0f 0f 0f 0f 05 0a 05 0a 00 00 00 00
>3fffa8	00 00 00 00 0a 05 0a 05 a0 50 a0 50 00 00 00 00
>3fffb8	00 00 00 00 a0 50 a0 50 0a 05 0a 05 0a 05 0a 05
>3fffc8	aa 55 aa 55 00 00 00 00 00 18 3c 7e 18 18 18 18
>3fffd8	00 10 30 7f 7f 30 10 00 00 08 0c fe fe 0c 08 00
>3fffe8	18 18 18 18 7e 3c 18 00 00 00 36 49 36 00 00 00
>3ffff8	00 00 00 00 00 00 00 00
>3a0000	5c 42 60 3a 5c 54 46 3a		.binary "binaries/basic816.bin"
>3a0008	5c 3b 1f 3a 5c 40 01 3a 5c 58 00 3a 5c d6 00 3a
>3a0018	5c 53 02 3a 5c e4 00 3a 5c ff 00 3a 5c 06 01 3a
>3a0028	0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 85 b5
>3a0038	c2 20 a5 a6 d0 06 e2 20 a5 a8 f0 11 c2 10 a4 ab
>3a0048	c4 a9 f0 09 e2 20 a5 b5 97 a6 c8 84 ab 28 2b 60
>3a0058	08 c2 10 e2 20 a9 01 20 1c 00 a2 00 00 a9 00 9f
>3a0068	00 4c 00 e8 e0 00 01 d0 f6 a2 00 00 20 14 00 c9
>3a0078	0d d0 03 4c cf 00 c9 9d d0 08 e0 00 00 f0 ed ca
>3a0088	80 39 c9 1d d0 0e bf 00 4c 00 f0 e0 e0 4f 00 f0
>3a0098	db e8 80 27 c9 08 d0 1a e0 00 00 f0 cf da bf 01
>3a00a8	4c 00 9f 00 4c 00 f0 06 e8 e0 ff 00 d0 f0 fa ca
>3a00b8	80 0e c9 20 90 b6 9f 00 4c 00 e8 20 18 00 80 ac
>3a00c8	a9 08 20 18 00 80 a5 a9 00 20 1c 00 28 60 22 4c
>3a00d8	10 00 60 20 14 00 48 20 18 00 68 60 08 e2 20 c9
>3a00e8	00 f0 08 af 10 00 af 09 01 80 06 af 10 00 af 29
>3a00f8	fe 8f 10 00 af 28 60 08 22 84 10 00 28 60 48 da
>3a0108	5a 0b 08 e2 20 c2 10 a2 00 00 a9 20 9f 00 a0 af
>3a0118	af 1e 00 00 9f 00 c0 af e8 e0 00 20 d0 ec 08 c2
>3a0128	20 48 a9 00 00 5b 68 28 a2 00 00 a0 00 00 22 84
>3a0138	10 00 28 2b 7a fa 68 60 da 5a 0b 08 08 c2 20 48
>3a0148	a9 00 08 5b 68 28 c2 30 af 0c 00 00 85 08 e2 20
>3a0158	af 0e 00 00 c2 20 29 ff 00 85 0a a9 80 00 8f 08
>3a0168	01 00 af 1c 00 00 3a 8f 0a 01 00 18 a5 08 6f 0c
>3a0178	01 00 85 08 a5 0a 69 00 00 85 0a e2 20 a0 00 00
>3a0188	a2 00 00 b7 08 9f 00 4f 00 e8 c8 c0 80 00 d0 f3
>3a0198	ca bf 00 4f 00 c9 20 d0 09 a9 00 9f 00 4f 00 ca
>3a01a8	10 ef 28 2b 7a fa 60 e2 20 a9 48 8f 0f 00 00 a9
>3a01b8	34 8f 13 00 00 a9 20 8f 08 00 af 8f 09 00 af a2
>3a01c8	00 00 a9 00 9f 10 f0 3a e8 e0 12 00 d0 f6 a9 80
>3a01d8	8f b4 08 00 e2 20 a9 00 8f 89 0f 00 60 08 e2 20
>3a01e8	48 48 a9 00 22 3c 10 00 68 22 18 10 00 af 89 0f
>3a01f8	00 29 01 d0 f8 68 28 60 08 e2 20 48 48 a9 01 22
>3a0208	3c 10 00 68 22 18 10 00 af 89 0f 00 29 01 d0 f8
>3a0218	68 28 60 08 c2 20 48 e2 20 a9 0d 20 18 00 c2 20
>3a0228	68 28 60 08 22 78 10 00 28 60 08 0b 08 c2 20 48
>3a0238	a9 00 08 5b 68 28 e2 20 a5 b6 1a 85 b6 cf 13 00
>3a0248	00 90 05 20 14 00 64 b6 2b 28 60 08 e2 20 c2 10
>3a0258	da 5a 8f b5 08 00 af b4 08 00 29 20 f0 07 af b5
>3a0268	08 00 20 28 00 af b4 08 00 29 80 f0 07 af b5 08
>3a0278	00 20 e5 01 af b4 08 00 29 40 f0 14 af b5 08 00
>3a0288	20 00 02 af b5 08 00 c9 0d d0 05 a9 0a 20 00 02
>3a0298	7a fa 28 60 08 e2 20 bd 00 00 f0 06 20 18 00 e8
>3a02a8	80 f5 28 60 08 c2 20 48 48 4a 4a 4a 4a 4a 4a 4a
>3a02b8	4a 20 c6 02 68 29 ff 00 20 c6 02 68 28 60 08 c2
>3a02c8	20 48 e2 20 48 4a 4a 4a 4a 20 dd 02 68 20 dd 02
>3a02d8	c2 20 68 28 60 08 c2 30 da 29 0f 00 aa bf 00 d0
>3a02e8	3a 20 18 00 fa 28 60 08 e2 20 c9 5b b0 04 c9 41
>3a02f8	b0 0b c9 7b b0 04 c9 61 b0 03 28 18 60 28 38 60
>3a0308	08 e2 20 c9 3a b0 04 c9 30 b0 03 28 18 60 28 38
>3a0318	60 08 e2 20 c9 3a b0 04 c9 30 b0 13 c9 67 b0 04
>3a0328	c9 61 b0 0b c9 47 b0 04 c9 41 b0 03 28 18 60 28
>3a0338	38 60 08 e2 20 c9 3a b0 04 c9 30 b0 12 c9 67 b0
>3a0348	04 c9 61 b0 0f c9 47 b0 04 c9 41 b0 09 28 60 38
>3a0358	e9 30 80 f9 29 df 38 e9 37 80 f2 08 e2 20 c9 7b
>3a0368	b0 06 c9 61 90 02 29 df 28 60 08 e2 20 c2 10 bd
>3a0378	00 00 f0 09 20 63 03 9d 00 00 e8 80 f2 28 60 08
>3a0388	0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20 48 06 23
>3a0398	26 25 a5 23 85 0c a5 25 85 0e 06 0c 26 0e 06 0c
>3a03a8	26 0e 18 a5 23 65 0c 85 23 a5 25 65 0e 85 25 68
>3a03b8	2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a03c8	20 a5 23 8f 12 01 00 a9 0a 00 8f 10 01 00 af 14
>3a03d8	01 00 85 23 64 25 af 16 01 00 85 29 64 2b e2 20
>3a03e8	a9 00 85 27 85 2d 2b 28 60 08 0b 08 c2 20 48 a9
>3a03f8	00 08 5b 68 28 c2 20 a5 23 8f 12 01 00 a9 64 00
>3a0408	8f 10 01 00 af 14 01 00 85 23 64 25 af 16 01 00
>3a0418	85 29 64 2b e2 20 a9 00 85 27 85 2d 2b 28 60 08
>3a0428	c2 20 a5 23 d0 08 a5 25 d0 04 28 e2 02 60 28 c2
>3a0438	02 60 08 e2 20 a5 27 c9 00 d0 02 28 60 08 c2 20
>3a0448	48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 dc
>3a0458	d4 08 08 e2 20 a5 27 c9 02 d0 02 28 60 08 c2 20
>3a0468	48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 dc
>3a0478	d4 08 08 e2 20 a5 27 c9 00 d0 08 c2 20 a5 25 d0
>3a0488	17 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a0498	04 8f d3 08 00 dc d4 08 08 c2 20 48 a9 00 08 5b
>3a04a8	68 28 e2 20 a9 09 8f d3 08 00 dc d4 08 08 e2 20
>3a04b8	a5 27 c9 00 d0 0e a5 26 d0 1f a5 25 d0 1b a5 24
>3a04c8	d0 17 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a04d8	a9 04 8f d3 08 00 dc d4 08 08 c2 20 48 a9 00 08
>3a04e8	5b 68 28 e2 20 a9 09 8f d3 08 00 dc d4 08 08 0b
>3a04f8	08 c2 20 48 a9 00 08 5b 68 28 c2 30 64 23 64 25
>3a0508	e2 20 64 27 a7 00 c9 26 f0 3a e2 20 a7 00 20 08
>3a0518	03 90 6c 20 87 03 38 e9 30 c2 20 29 ff 00 18 65
>3a0528	23 85 23 a5 25 69 00 00 85 25 20 dc 19 80 db 08
>3a0538	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>3a0548	00 dc d4 08 20 dc 19 a7 00 c9 48 f0 04 c9 68 d0
>3a0558	de 20 dc 19 e2 20 a7 00 20 19 03 90 22 20 3a 03
>3a0568	c2 20 06 23 26 25 06 23 26 25 06 23 26 25 06 23
>3a0578	26 25 29 ff 00 18 65 23 85 23 20 dc 19 80 d5 2b
>3a0588	28 60 08 c2 30 38 a5 04 e5 1a a8 e2 20 b7 1a f0
>3a0598	10 c9 20 f0 06 c9 09 f0 02 28 60 88 c0 ff ff d0
>3a05a8	ec a9 00 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a05b8	c2 30 a5 1a 85 00 e2 20 a5 1c 85 02 20 fd 19 a7
>3a05c8	00 20 08 03 90 0c 20 f6 04 c2 20 a5 23 85 d7 20
>3a05d8	fd 19 c2 20 a5 00 85 1a e2 20 a5 02 85 1c 20 fa
>3a05e8	05 e2 20 20 6b 06 c9 00 f0 05 20 ea 07 80 f4 2b
>3a05f8	28 60 08 c2 20 a5 1a 85 00 a5 1c 85 02 a2 00 00
>3a0608	e2 20 a0 00 00 e0 00 00 f0 0d b7 00 f0 53 c9 3a
>3a0618	f0 04 c9 20 d0 33 c8 b7 00 f0 46 c9 52 f0 10 c9
>3a0628	72 d0 26 b7 00 f0 3a c9 52 f0 04 c9 72 d0 1a c8
>3a0638	b7 00 f0 2d c9 45 f0 04 c9 65 d0 0d c8 b7 00 f0
>3a0648	20 c9 4d f0 0a c9 6d f0 06 e8 20 dc 19 80 b3 a7
>3a0658	00 c9 3a d0 03 20 dc 19 a9 03 85 1e a9 8e 20 ea
>3a0668	07 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a0678	20 a9 7f 85 1e c2 10 20 9f 07 a5 1e d0 03 4c 0e
>3a0688	07 c2 20 a5 1a 85 00 e2 20 a5 1c 85 02 c2 20 64
>3a0698	04 64 06 e2 30 a0 00 b7 00 f0 da c9 8e f0 d6 c8
>3a06a8	c4 1e 90 f3 c2 10 a7 00 c9 22 d0 05 20 26 07 80
>3a06b8	28 a5 1e c9 01 f0 19 c2 20 a5 00 c5 1a d0 08 e2
>3a06c8	20 a5 02 c5 1c f0 09 e2 20 a7 04 20 e5 39 b0 09
>3a06d8	e2 20 20 36 07 c9 00 d0 11 c2 20 a5 00 85 04 e2
>3a06e8	20 a5 02 85 06 20 dc 19 80 a9 c9 81 d0 18 20 8a
>3a06f8	05 c9 00 f0 14 89 80 10 0b 20 8b 08 c9 30 f0 04
>3a0708	a9 af 80 02 a9 81 2b 28 60 08 c2 20 48 a9 00 08
>3a0718	5b 68 28 e2 20 a9 02 8f d3 08 00 dc d4 08 08 e2
>3a0728	20 20 dc 19 a7 00 f0 04 c9 22 d0 f5 28 60 08 0b
>3a0738	c2 30 da 5a 08 c2 20 48 a9 00 08 5b 68 28 a9 b5
>3a0748	08 85 08 e2 20 a9 3a 85 0a a2 80 00 e2 20 a0 01
>3a0758	00 b7 08 f0 26 c5 1e d0 29 c2 30 a0 02 00 b7 08
>3a0768	85 0c e2 20 a9 3a 85 0e e2 10 a0 00 b7 00 20 63
>3a0778	03 d7 0c d0 0d c8 c4 1e 90 f2 8a c2 10 7a fa 2b
>3a0788	28 60 c2 30 18 a5 08 69 08 00 85 08 e2 20 a5 0a
>3a0798	69 00 85 0a e8 80 b5 08 0b 8b 08 c2 20 48 a9 00
>3a07a8	08 5b 68 28 c2 30 a9 b5 08 85 08 a9 3a 00 85 0a
>3a07b8	64 0c e2 20 a0 01 00 b7 08 f0 1d c5 1e b0 06 c5
>3a07c8	0c 90 02 85 0c c2 20 18 a5 08 69 08 00 85 08 a5
>3a07d8	0a 69 00 00 85 0a 80 da e2 20 a5 0c 85 1e ab 2b
>3a07e8	28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a07f8	87 00 c2 20 18 a5 00 69 01 00 85 08 a5 02 69 00
>3a0808	00 85 0a e2 10 a4 1e 88 e2 20 b7 08 87 08 f0 13
>3a0818	c2 20 18 a5 08 69 01 00 85 08 a5 0a 69 00 00 85
>3a0828	0a 80 e5 2b 28 60 08 c2 30 29 7f 00 0a 0a 0a 18
>3a0838	69 b5 08 aa 28 60 08 8b 0b 08 c2 20 48 a9 00 08
>3a0848	5b 68 28 08 e2 20 48 a9 3a 48 ab 68 28 e2 20 c2
>3a0858	10 20 2e 08 bd 00 00 c2 20 29 0f 00 2b ab 28 60
>3a0868	08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>3a0878	48 a9 3a 48 ab 68 28 c2 30 20 2e 08 bd 04 00 2b
>3a0888	ab 28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a0898	08 e2 20 48 a9 3a 48 ab 68 28 e2 20 c2 10 20 2e
>3a08a8	08 bd 00 00 c2 20 29 f0 00 2b ab 28 60 03 01 10
>3a08b8	d0 c4 1f 00 00 03 01 12 d0 f9 1f 00 00 02 01 14
>3a08c8	d0 07 20 00 00 02 01 16 d0 20 20 00 00 02 03 18
>3a08d8	d0 33 20 00 00 00 01 1c d0 00 00 00 00 04 01 1e
>3a08e8	d0 75 20 00 00 04 01 20 d0 ab 20 00 00 04 01 22
>3a08f8	d0 90 20 00 00 05 03 24 d0 64 20 00 00 06 03 28
>3a0908	d0 46 20 00 00 07 02 2c d0 55 20 00 00 ff 01 2f
>3a0918	d0 00 00 00 00 40 01 31 d0 00 00 00 00 20 03 33
>3a0928	d0 3c 2d 00 00 20 05 37 d0 d3 30 00 00 20 03 3d
>3a0938	d0 32 30 00 00 20 04 41 d0 e6 2f 00 00 20 03 46
>3a0948	d0 dd 2f 00 00 20 02 4a d0 89 2f 00 00 50 04 4d
>3a0958	d0 00 00 00 00 50 04 52 d0 00 00 00 00 20 05 57
>3a0968	d0 ea 2e 00 00 20 06 5d d0 4f 2f 00 00 20 03 64
>3a0978	d0 53 2d 00 00 50 02 68 d0 00 00 00 00 50 04 6b
>3a0988	d0 00 00 00 00 20 04 70 d0 33 2e 00 00 20 02 75
>3a0998	d0 4d 2d 00 00 20 04 78 d0 50 2d 00 00 50 05 7d
>3a09a8	d0 00 00 00 00 50 05 83 d0 00 00 00 00 20 04 89
>3a09b8	d0 4a 2d 00 00 20 03 8e d0 28 30 00 00 20 04 92
>3a09c8	d0 27 2d 00 00 20 04 97 d0 cb 2c 00 00 20 05 9c
>3a09d8	d0 75 2c 00 00 20 05 a2 d0 16 2c 00 00 20 03 a8
>3a09e8	d0 12 2c 00 00 20 04 ac d0 07 2b 00 00 20 04 b1
>3a09f8	d0 05 2c 00 00 20 07 b6 d0 09 2c 00 00 20 03 be
>3a0a08	d0 6e 2a 00 00 20 04 c2 d0 db 29 00 00 04 02 c7
>3a0a18	d0 fe 20 00 00 04 02 ca d0 e1 20 00 00 04 02 cd
>3a0a28	d0 c6 20 00 00 30 01 d0 d0 63 32 00 00 30 03 d2
>3a0a38	d0 0f 36 00 00 30 04 d6 d0 55 36 00 00 30 05 db
>3a0a48	d0 d2 36 00 00 30 05 e1 d0 8e 36 00 00 30 04 e7
>3a0a58	d0 07 37 00 00 30 03 ec d0 52 37 00 00 30 03 f0
>3a0a68	d0 8d 37 00 00 30 03 f4 d0 02 38 00 00 30 03 f8
>3a0a78	d0 77 38 00 00 30 03 fc d0 a7 38 00 00 30 04 00
>3a0a88	d1 88 35 00 00 30 03 05 d1 27 35 00 00 30 04 09
>3a0a98	d1 e0 34 00 00 30 03 0e d1 94 34 00 00 30 05 12
>3a0aa8	d1 e9 33 00 00 30 06 18 d1 26 33 00 00 30 04 1f
>3a0ab8	d1 85 32 00 00 10 03 24 d1 2b 39 00 00 10 03 28
>3a0ac8	d1 f6 38 00 00 10 04 2c d1 0d 43 00 00 10 04 31
>3a0ad8	d1 42 39 00 00 10 03 36 d1 c5 40 00 00 20 05 3a
>3a0ae8	d1 55 42 00 00 20 04 40 d1 b2 42 00 00 20 05 45
>3a0af8	d1 b4 43 00 00 20 03 4b d1 b3 44 00 00 10 04 4f
>3a0b08	d1 30 44 00 00 20 06 54 d1 19 45 00 00 10 07 5b
>3a0b18	d1 f3 38 00 00 20 03 63 d1 71 29 00 00 20 05 67
>3a0b28	d1 b7 28 00 00 20 09 6d d1 80 22 00 00 20 09 77
>3a0b38	d1 1b 22 00 00 20 0a 81 d1 49 22 00 00 20 07 8c
>3a0b48	d1 88 21 00 00 30 08 94 d1 8e 31 00 00 20 07 9d
>3a0b58	d1 1d 21 00 00 30 08 a5 d1 fb 31 00 00 20 08 ae
>3a0b68	d1 97 23 00 00 20 08 b7 d1 fd 22 00 00 20 06 c0
>3a0b78	d1 d8 23 00 00 20 09 c7 d1 96 24 00 00 20 04 d1
>3a0b88	d1 29 26 00 00 20 04 d6 d1 6f 26 00 00 20 04 db
>3a0b98	d1 d5 26 00 00 20 06 e0 d1 71 27 00 00 20 08 e7
>3a0ba8	d1 f4 27 00 00 20 0a f0 d1 28 28 00 00 00 00 00
>3a0bb8	00 00 00 00 00 08 0b 08 c2 20 48 a9 00 08 5b 68
>3a0bc8	28 c2 30 a9 ff ff 85 ba e2 20 a9 34 85 bc c2 20
>3a0bd8	64 b7 64 bd e2 20 64 b9 64 bf 2b 28 60 5a 08 e2
>3a0be8	20 85 ea c2 10 86 8f c2 20 a5 0e 48 a5 0c 48 a5
>3a0bf8	12 48 a5 10 48 20 95 0c b0 03 20 19 0c 20 21 0e
>3a0c08	c2 20 68 85 10 68 85 12 68 85 0c 68 85 0e 28 7a
>3a0c18	60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a6
>3a0c28	8f ca 86 0c e8 c2 30 38 a5 ba e5 0c 85 c0 e2 20
>3a0c38	a5 bc e9 00 85 c2 20 21 0e e2 20 a5 ea a0 00 00
>3a0c48	97 c3 a9 00 a0 01 00 97 c3 a0 02 00 97 c3 c2 20
>3a0c58	a9 00 00 97 c3 c2 20 18 a5 ba 69 01 00 a0 05 00
>3a0c68	97 c3 e2 20 c8 c8 a5 bc 69 00 97 c3 c2 20 a5 c0
>3a0c78	85 b7 e2 20 a5 c2 85 b9 c2 20 38 a5 c3 e9 01 00
>3a0c88	85 ba e2 20 a5 c5 e9 00 85 bc 2b 28 60 08 0b 08
>3a0c98	c2 20 48 a9 00 08 5b 68 28 c2 30 c2 20 a5 bd 85
>3a0ca8	c9 e2 20 a5 bf 85 cb a5 c9 d0 17 e2 20 a5 cb d0
>3a0cb8	11 c2 20 a9 00 00 85 cf e2 20 a9 00 85 d1 2b 28
>3a0cc8	18 60 c2 20 a0 05 00 b7 c9 85 cc e2 20 c8 c8 b7
>3a0cd8	c9 85 ce c2 20 18 a5 c9 65 8f 85 0c e2 20 a5 cb
>3a0ce8	69 00 85 0e c2 20 18 a5 0c 69 08 00 85 0c e2 20
>3a0cf8	a5 0e 69 00 85 0e c2 20 a5 0c c5 cc d0 28 e2 20
>3a0d08	a5 0e c5 ce d0 20 c2 20 a5 cf d0 5d e2 20 a5 d1
>3a0d18	d0 57 c2 20 a0 02 00 b7 c9 85 bd e2 20 c8 c8 b7
>3a0d28	c9 85 bf 4c d2 0d c2 20 a5 0c 69 08 00 85 10 e2
>3a0d38	20 a5 0e 69 00 85 12 e2 20 a5 c6 c5 10 b0 3e 90
>3a0d48	08 c2 20 a5 c6 c5 10 b0 34 c2 20 a5 c9 85 cf e2
>3a0d58	20 a5 cb 85 d1 c2 20 a0 02 00 b7 cf 85 c9 e2 20
>3a0d68	c8 c8 b7 cf 85 cb 4c af 0c c2 20 a0 02 00 b7 c9
>3a0d78	97 cf e2 20 c8 c8 b7 c9 97 cf 4c d2 0d c2 20 a0
>3a0d88	05 00 b7 c9 97 0c e2 20 c8 c8 b7 c9 97 0c c2 20
>3a0d98	a0 02 00 b7 c9 97 0c e2 20 c8 c8 b7 c9 97 0c c2
>3a0da8	20 a5 cf d0 14 e2 20 a5 cf d0 0e c2 20 a5 0c 85
>3a0db8	bd e2 20 a5 0e 85 bf 80 11 c2 20 a0 02 00 a5 0c
>3a0dc8	97 cf e2 20 c8 c8 a5 0e 97 cf c2 20 a5 c9 85 c3
>3a0dd8	e2 20 a5 cb 85 c5 c2 20 a5 c3 85 b7 e2 20 a5 c5
>3a0de8	85 b9 c2 20 a0 05 00 a5 0c 97 c3 e2 20 c8 c8 a5
>3a0df8	0e 97 c3 c2 20 a0 02 00 a9 00 00 97 c3 e2 20 c8
>3a0e08	c8 97 c3 e2 20 a5 ea e2 20 a0 00 00 97 c3 a0 01
>3a0e18	00 a9 00 97 c3 2b 28 38 60 08 c2 20 38 a5 c0 e9
>3a0e28	08 00 85 c3 e2 20 a5 c2 e9 00 85 c5 28 60 08 e2
>3a0e38	20 a5 c5 f0 04 c9 35 b0 12 c2 20 a5 c3 f0 0c e2
>3a0e48	20 a0 01 00 b7 c3 1a 97 c3 28 60 00 ea 08 e2 20
>3a0e58	a5 c5 f0 04 c9 35 b0 17 c2 20 a5 c3 f0 11 e2 20
>3a0e68	a0 01 00 b7 c3 3a 97 c3 d0 03 20 79 0e 28 60 00
>3a0e78	ea 08 c2 20 a5 bd d0 21 e2 20 a5 bf d0 1b a5 c5
>3a0e88	85 bf c2 20 a5 c3 85 bd a9 00 00 a0 02 00 97 c3
>3a0e98	c8 c8 e2 20 97 c3 4c 60 0f e2 20 a5 bf c5 c5 90
>3a0ea8	28 c2 20 a5 bd c5 c3 90 20 c2 20 a5 bd a0 02 00
>3a0eb8	97 c3 e2 20 c8 c8 a5 bf 97 c3 c2 20 a5 c3 85 bd
>3a0ec8	e2 20 a5 c5 85 bf 4c 60 0f c2 20 a5 bd 85 08 e2
>3a0ed8	20 a5 bf 85 0a e2 20 a0 04 00 b7 08 c5 c8 90 32
>3a0ee8	d0 0b c2 20 a0 02 00 b7 08 c5 c6 90 25 c2 20 a0
>3a0ef8	02 00 b7 08 97 c3 e2 20 c8 c8 b7 08 97 c3 c2 20
>3a0f08	a5 c3 a0 02 00 97 08 e2 20 a5 c5 c8 c8 97 08 4c
>3a0f18	60 0f c2 20 a0 02 00 b7 08 d0 08 e2 20 c8 c8 b7
>3a0f28	08 f0 19 c2 20 a0 02 00 b7 08 85 0c e2 20 c8 c8
>3a0f38	b7 08 85 0a c2 20 a5 0c 85 08 80 99 c2 20 a5 c3
>3a0f48	a0 02 00 97 08 e2 20 c8 c8 a5 c5 97 08 a9 00 97
>3a0f58	c3 c2 20 a0 02 00 97 c3 20 65 0f 28 60 08 c2 20
>3a0f68	a5 bd 85 c3 e2 20 a5 bf 85 c5 c2 20 a5 c3 d0 09
>3a0f78	e2 20 a5 c5 d0 03 4c 08 10 c2 20 a0 02 00 b7 c3
>3a0f88	85 0c e2 20 c8 c8 b7 c3 85 0e c2 20 a0 05 00 b7
>3a0f98	c3 85 10 e2 20 c8 c8 b7 c3 85 12 c2 20 a5 0c c5
>3a0fa8	10 d0 08 e2 20 a5 0e c5 12 f0 1f c2 20 a0 02 00
>3a0fb8	b7 c3 85 0c e2 20 c8 c8 b7 c3 85 0e c2 20 a5 0c
>3a0fc8	85 c3 e2 20 a5 0e 85 c5 80 a0 c2 20 a0 02 00 b7
>3a0fd8	c3 85 0c e2 20 c8 c8 b7 c3 85 0e c2 20 a0 02 00
>3a0fe8	b7 0c 97 c3 e2 20 c8 c8 b7 0c 97 c3 c2 20 a0 05
>3a0ff8	00 b7 0c 97 c3 e2 20 c8 c8 b7 0c 97 c3 4c 81 0f
>3a1008	28 60 08 c2 10 e2 20 64 16 a5 e2 1a 1a 85 17 e2
>3a1018	20 a5 e3 85 18 c5 bc 90 1f f0 08 c2 20 a5 16 c5
>3a1028	ba 90 15 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a1038	03 8f d3 08 00 dc d4 08 28 60 c9 00 d0 05 c0 01
>3a1048	00 f0 05 09 30 97 16 c8 60 08 c2 30 64 0c a5 25
>3a1058	10 1a 18 a5 23 49 ff ff 69 01 00 85 23 a5 25 49
>3a1068	ff ff 69 00 00 85 25 a9 ff ff 85 0c 64 10 64 12
>3a1078	64 14 a2 1f 00 f8 06 23 26 25 a5 10 65 10 85 10
>3a1088	a5 12 65 12 85 12 a5 14 65 14 85 14 ca 10 e7 d8
>3a1098	e2 20 20 0a 10 a0 00 00 a5 0c f0 04 a9 2d 80 02
>3a10a8	a9 20 97 16 c8 a2 05 00 b5 10 29 f0 4a 4a 4a 4a
>3a10b8	20 42 10 b5 10 29 0f 20 42 10 ca 10 eb c0 01 00
>3a10c8	d0 0c a9 20 87 16 a0 01 00 a9 30 97 16 c8 a9 00
>3a10d8	97 16 28 60 00 ea 08 e2 20 c2 10 a0 00 00 bd 00
>3a10e8	00 f0 04 e8 c8 80 f7 28 60 08 0b 8b 08 c2 20 48
>3a10f8	a9 00 08 5b 68 28 e2 20 c2 10 08 c2 20 48 e2 20
>3a1108	a5 25 48 ab c2 20 68 28 a6 23 20 de 10 84 0c 08
>3a1118	c2 20 48 e2 20 a5 2b 48 ab c2 20 68 28 a6 29 20
>3a1128	de 10 c2 20 98 38 65 0c aa e2 20 a9 02 20 e5 0b
>3a1138	c2 20 a5 b7 85 08 e2 20 a5 b9 85 0a a0 00 00 08
>3a1148	c2 20 48 e2 20 a5 25 48 ab c2 20 68 28 a6 23 bd
>3a1158	00 00 f0 06 97 08 e8 c8 80 f5 e2 20 08 c2 20 48
>3a1168	e2 20 a5 2b 48 ab c2 20 68 28 a6 29 bd 00 00 97
>3a1178	08 f0 04 e8 c8 80 f5 c2 20 a5 08 85 23 e2 20 a5
>3a1188	0a 85 25 a9 02 85 27 ab 2b 28 60 08 0b 8b 08 c2
>3a1198	20 48 a9 00 08 5b 68 28 c2 30 08 c2 20 48 e2 20
>3a11a8	a5 25 48 ab c2 20 68 28 a6 23 20 de 10 98 aa e8
>3a11b8	e2 20 a9 02 20 e5 0b c2 20 a5 c0 85 08 e2 20 a5
>3a11c8	c2 85 0a a0 00 00 b7 23 97 08 f0 03 c8 80 f7 a5
>3a11d8	08 85 23 a5 09 85 24 a5 0a 85 25 a9 00 85 26 ab
>3a11e8	2b 28 60 08 e2 20 c2 10 a0 00 00 b7 23 f0 05 c8
>3a11f8	80 f9 84 92 c2 30 c4 29 90 13 f0 11 a5 8f 30 0d
>3a1208	f0 0b c4 8f b0 12 a5 29 d0 0e 4c 6c 12 20 0a 10
>3a1218	e2 20 a9 00 87 16 80 39 20 0a 10 c2 30 18 a5 23
>3a1228	65 29 85 23 a5 25 69 00 00 85 25 a0 00 00 e2 20
>3a1238	a7 23 97 16 f0 1b c2 20 18 a5 23 69 01 00 85 23
>3a1248	a5 25 69 00 00 85 25 c8 c4 8f d0 e2 a9 00 00 97
>3a1258	16 c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85
>3a1268	27 20 93 11 28 60 48 5a 0b 08 08 c2 20 48 a9 00
>3a1278	08 5b 68 28 c2 30 a9 00 00 85 00 85 1a a9 01 00
>3a1288	85 02 85 1c ad 8a 0f 30 20 a0 02 00 b7 1a f0 0f
>3a1298	c5 55 90 10 c5 59 f0 02 b0 05 20 c6 12 80 e5 28
>3a12a8	2b 7a 68 60 20 a5 1a 80 db 08 c2 20 48 a9 00 08
>3a12b8	5b 68 28 e2 20 a9 01 8f d3 08 00 dc d4 08 08 c2
>3a12c8	30 85 23 64 25 20 51 10 a5 16 1a 85 23 a5 18 85
>3a12d8	25 20 3e 31 18 a5 1a 69 04 00 85 00 a5 1c 69 00
>3a12e8	00 85 02 e2 20 a9 20 20 18 00 c2 20 20 05 13 90
>3a12f8	fb e2 20 a9 0d 20 18 00 20 a5 1a 28 60 08 0b 8b
>3a1308	08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00
>3a1318	48 ab 68 28 e2 20 c2 10 a7 00 f0 3a 30 05 20 18
>3a1328	00 80 29 c2 20 29 7f 00 0a 0a 0a 18 69 b5 08 85
>3a1338	08 a9 3a 00 69 00 00 85 0a 08 e2 20 48 a9 3a 48
>3a1348	ab 68 28 a0 02 00 b7 08 aa 20 9c 02 c2 20 20 dc
>3a1358	19 ab 2b 28 18 60 ab 2b 28 38 60 08 c2 20 a9 ff
>3a1368	6f 85 1f a9 ff 7f 85 21 a9 ff ff 85 23 85 25 85
>3a1378	29 85 2b e2 20 85 27 85 2d 28 60 08 0b 8b 08 c2
>3a1388	20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab
>3a1398	68 28 c2 30 5a a4 1f bd 00 00 99 00 00 bd 02 00
>3a13a8	99 02 00 e2 20 bd 04 00 99 04 00 c2 20 38 98 e9
>3a13b8	05 00 85 1f 7a ab 2b 28 60 08 0b 8b 08 c2 20 48
>3a13c8	a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28
>3a13d8	c2 30 5a 18 a5 1f 69 05 00 85 1f a8 b9 00 00 9d
>3a13e8	00 00 b9 02 00 9d 02 00 e2 20 b9 04 00 9d 04 00
>3a13f8	bd 00 00 7a ab 2b 28 60 08 0b 8b 08 c2 20 48 a9
>3a1408	00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 e2
>3a1418	20 c2 10 5a a4 21 99 00 00 88 84 21 7a ab 2b 28
>3a1428	60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>3a1438	20 48 a9 00 48 ab 68 28 e2 20 c2 10 5a a4 21 c8
>3a1448	84 21 b9 00 00 c2 20 29 ff 00 7a ab 2b 28 60 08
>3a1458	e2 20 a9 01 20 00 14 28 60 5a 08 8b 08 e2 20 48
>3a1468	a9 00 48 ab 68 28 e2 20 a4 21 b9 01 00 c9 01 d0
>3a1478	08 c2 20 e6 21 ab 28 7a 60 08 c2 20 48 a9 00 08
>3a1488	5b 68 28 e2 20 a9 02 8f d3 08 00 dc d4 08 08 0b
>3a1498	8b c2 20 48 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>3a14a8	20 48 a9 00 48 ab 68 28 e2 20 c2 10 a4 21 c0 ff
>3a14b8	7f f0 11 20 3e 08 85 0c b9 01 00 20 3e 08 c5 0c
>3a14c8	f0 02 90 08 c2 20 68 ab 2b 28 18 60 c2 20 68 ab
>3a14d8	2b 28 38 60 4c f6 04 08 e2 20 a9 00 8f 00 4d 00
>3a14e8	a2 01 00 20 61 16 20 7a 04 c2 20 a5 23 9f 00 4d
>3a14f8	00 e2 20 af 00 4d 00 1a 30 34 8f 00 4d 00 e8 e8
>3a1508	20 fd 19 e2 20 a7 00 c9 8d f0 09 c9 2c d0 0a 20
>3a1518	dc 19 80 cf 20 dc 19 28 60 08 c2 20 48 a9 00 08
>3a1528	5b 68 28 e2 20 a9 02 8f d3 08 00 dc d4 08 08 c2
>3a1538	20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00
>3a1548	dc d4 08 08 20 45 3c 90 23 e2 20 a5 ea 29 80 d0
>3a1558	06 20 b9 3a 4c 72 15 e2 20 a9 8c 20 d5 1a 20 57
>3a1568	14 20 df 14 20 04 3f 20 61 14 28 60 08 c2 20 48
>3a1578	a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 dc d4
>3a1588	08 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2
>3a1598	10 20 dc 19 a0 00 00 b7 00 f0 24 c9 22 f0 03 c8
>3a15a8	80 f5 84 0c e2 20 a9 02 a6 0c e8 20 e5 0b a0 00
>3a15b8	00 c4 0c f0 1f a7 00 97 c0 c8 20 dc 19 80 f2 08
>3a15c8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>3a15d8	00 dc d4 08 a9 00 97 c0 c2 20 a5 c0 85 23 e2 20
>3a15e8	a5 c2 85 25 a9 02 85 27 20 dc 19 2b 28 60 08 e2
>3a15f8	20 a7 00 c2 20 29 ff 00 20 68 08 85 2f 20 57 14
>3a1608	08 e2 20 48 a9 00 48 ab 68 28 20 1a 16 20 61 14
>3a1618	28 60 20 dc 19 6c 2f 08 08 0b 8b c2 20 48 08 c2
>3a1628	20 48 a9 00 08 5b 68 28 c2 30 a2 29 08 20 c1 13
>3a1638	a2 23 08 20 c1 13 20 29 14 20 68 08 85 2f 08 e2
>3a1648	20 48 a9 00 48 ab 68 28 20 5e 16 a2 23 08 20 83
>3a1658	13 68 ab 2b 28 60 6c 2f 08 08 08 c2 20 48 a9 00
>3a1668	08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 10
>3a1678	da e2 20 a7 00 d0 03 4c 24 17 30 33 c9 20 d0 03
>3a1688	4c 1e 17 c9 3a b0 04 c9 30 b0 56 c9 26 f0 52 c9
>3a1698	22 d0 03 4c 37 17 c9 5b b0 07 c9 41 90 03 4c 43
>3a16a8	17 c9 7b b0 07 c9 61 90 03 4c 43 17 4c 24 17 c9
>3a16b8	8c f0 40 c9 8d f0 41 20 8b 08 c9 30 d0 0c 20 f6
>3a16c8	15 a2 23 08 20 83 13 4c 79 16 c9 00 d0 4e a7 00
>3a16d8	a6 21 e0 ff 7f f0 05 20 96 14 b0 12 20 00 14 80
>3a16e8	35 c2 20 20 dc 14 a2 23 08 20 83 13 80 83 20 20
>3a16f8	16 80 dd 20 00 14 80 1e e2 20 a4 21 c0 ff 7f f0
>3a1708	46 a4 21 b9 01 00 c9 01 f0 3d c9 8c f0 05 20 20
>3a1718	16 80 ee 20 29 14 20 dc 19 4c 79 16 a6 21 e0 ff
>3a1728	7f b0 24 bd 01 00 c9 01 f0 1d 20 20 16 80 ed 20
>3a1738	89 15 a2 23 08 20 83 13 4c 79 16 20 4b 15 a2 23
>3a1748	08 20 83 13 4c 79 16 a2 23 08 20 c1 13 fa 28 60
>3a1758	08 0b 8b 08 e2 20 48 a9 00 48 ab 68 28 08 c2 20
>3a1768	48 a9 00 08 5b 68 28 c2 30 a9 fd 5f 85 33 ab 2b
>3a1778	28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>3a1788	92 33 c6 33 c6 33 2b 28 60 08 c2 30 29 ff 00 20
>3a1798	7a 17 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a17a8	c2 30 e6 33 e6 33 b2 33 2b 28 60 e2 20 c2 10 20
>3a17b8	1b 02 af d3 08 00 0a c2 20 29 ff 00 a8 08 e2 20
>3a17c8	48 a9 3a 48 ab 68 28 be 05 18 20 9c 02 c2 20 a5
>3a17d8	d7 f0 27 a2 31 18 20 9c 02 08 e2 20 48 a9 00 48
>3a17e8	ab 68 28 c2 20 af d7 08 00 8f 23 08 00 a9 00 00
>3a17f8	8f 25 08 00 20 5e 31 20 1b 02 4c 83 1f 35 18 38
>3a1808	18 3e 18 4b 18 59 18 67 18 7a 18 90 18 a0 18 af
>3a1818	18 bc 18 cd 18 dc 18 e9 18 f7 18 06 19 17 19 30
>3a1828	19 44 19 58 19 6e 19 82 19 20 61 74 00 4f 4b 00
>3a1838	42 72 65 61 6b 00 53 79 6e 74 61 78 20 65 72 72
>3a1848	6f 72 00 4f 75 74 20 6f 66 20 6d 65 6d 6f 72 79
>3a1858	00 54 79 70 65 20 6d 69 73 6d 61 74 63 68 00 56
>3a1868	61 72 69 61 62 6c 65 20 6e 6f 74 20 66 6f 75 6e
>3a1878	64 00 4c 69 6e 65 20 6e 75 6d 62 65 72 20 6e 6f
>3a1888	74 20 66 6f 75 6e 64 00 53 74 61 63 6b 20 75 6e
>3a1898	64 65 72 66 6c 6f 77 00 53 74 61 63 6b 20 6f 76
>3a18a8	65 72 66 6c 6f 77 00 4f 75 74 20 6f 66 20 72 61
>3a18b8	6e 67 65 00 49 6c 6c 65 67 61 6c 20 61 72 67 75
>3a18c8	6d 65 6e 74 00 46 69 6c 65 20 6e 6f 74 20 66 6f
>3a18d8	75 6e 64 00 4e 6f 74 20 61 20 6e 75 6d 62 65 72
>3a18e8	00 4d 61 74 68 20 6f 76 65 72 66 6c 6f 77 00 4d
>3a18f8	61 74 68 20 75 6e 64 65 72 66 6c 6f 77 00 44 69
>3a1908	76 69 73 69 6f 6e 20 62 79 20 7a 65 72 6f 00 55
>3a1918	6e 61 62 6c 65 20 74 6f 20 72 65 61 64 20 64 69
>3a1928	72 65 63 74 6f 72 79 00 55 6e 61 62 6c 65 20 74
>3a1938	6f 20 6c 6f 61 64 20 66 69 6c 65 00 55 6e 61 62
>3a1948	6c 65 20 74 6f 20 73 61 76 65 20 66 69 6c 65 00
>3a1958	55 6e 61 62 6c 65 20 74 6f 20 64 65 6c 65 74 65
>3a1968	20 66 69 6c 65 00 43 6f 75 6c 64 20 6e 6f 74 20
>3a1978	66 69 6e 64 20 66 69 6c 65 00 43 6f 75 6c 64 20
>3a1988	6e 6f 74 20 75 70 64 61 74 65 20 64 69 72 65 63
>3a1998	74 6f 72 79 00 08 0b 08 c2 20 48 a9 00 08 5b 68
>3a19a8	28 e2 20 a9 00 85 d2 2b 28 60 0b 08 08 c2 20 48
>3a19b8	a9 00 08 5b 68 28 08 c2 20 a9 b3 17 8f d4 08 00
>3a19c8	e2 20 a9 3a 8f d6 08 00 28 20 28 30 20 09 2c 64
>3a19d8	31 28 2b 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a19e8	c2 20 18 a5 00 69 01 00 85 00 e2 20 a5 02 69 00
>3a19f8	85 02 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68
>3a1a08	28 e2 20 a7 00 f0 0f c9 20 f0 06 c9 09 f0 02 80
>3a1a18	05 20 dc 19 80 ed 2b 28 60 08 e2 20 a7 00 f0 09
>3a1a28	c9 3a f0 05 20 dc 19 80 f3 28 60 08 e2 20 64 36
>3a1a38	a7 00 f0 19 c5 37 f0 2c c9 98 f0 1e c9 9c f0 1a
>3a1a48	c9 9b f0 1a c9 9d f0 16 20 dc 19 80 e3 20 a5 1a
>3a1a58	c2 20 a5 d7 f0 1d e2 20 80 d6 e6 36 80 ea c6 36
>3a1a68	30 26 80 e4 a5 35 30 06 a5 36 f0 02 80 da 20 dc
>3a1a78	19 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a1a88	02 8f d3 08 00 dc d4 08 08 c2 20 48 a9 00 08 5b
>3a1a98	68 28 e2 20 a9 02 8f d3 08 00 dc d4 08 08 c2 30
>3a1aa8	a0 00 00 b7 1a 85 0c 18 a5 1a 65 0c 85 1a a5 1c
>3a1ab8	69 00 00 85 1c a0 02 00 b7 1a 85 d7 18 a5 1a 69
>3a1ac8	04 00 85 00 a5 1c 69 00 00 85 02 28 60 08 e2 20
>3a1ad8	48 20 fd 19 68 e2 20 c7 00 d0 08 20 dc 19 20 fd
>3a1ae8	19 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a1af8	02 8f d3 08 00 dc d4 08 08 e2 20 20 fd 19 e2 20
>3a1b08	a7 00 f0 10 c9 3a f0 0c c5 37 f0 05 20 dc 19 80
>3a1b18	ef 28 38 60 28 18 60 5a 08 e2 20 a0 00 00 b7 00
>3a1b28	f0 0d c9 3a f0 07 c9 20 d0 05 c8 80 f1 a9 00 28
>3a1b38	7a 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 20
>3a1b48	63 13 e2 20 a9 00 85 dc ad 8a 0f 30 41 a7 00 c9
>3a1b58	3a d0 03 20 dc 19 20 fd 19 a7 00 d0 03 4c d6 1b
>3a1b68	20 ef 02 b0 3e a7 00 10 10 20 8b 08 85 0c c9 20
>3a1b78	d0 03 4c c4 1b a5 d2 f0 3d 08 c2 20 48 a9 00 08
>3a1b88	5b 68 28 e2 20 a9 02 8f d3 08 00 dc d4 08 08 c2
>3a1b98	20 48 a9 00 08 5b 68 28 e2 20 a9 01 8f d3 08 00
>3a1ba8	dc d4 08 20 32 30 4c d6 1b 08 e2 20 48 a9 00 48
>3a1bb8	ab 68 28 6c 2f 08 a5 0c c9 10 d0 bd a7 00 20 68
>3a1bc8	08 c2 20 85 2f 20 63 13 20 dc 19 20 b1 1b ab 2b
>3a1bd8	28 60 08 58 20 9d 19 20 58 17 e2 20 9c 8a 0f c2
>3a1be8	20 a5 1a 85 00 a5 1c 85 02 4c 18 1c 08 c2 20 a0
>3a1bf8	02 00 b7 1a 85 d7 e2 20 a5 dc c9 03 f0 12 c2 20
>3a1c08	18 a5 1a 69 04 00 85 00 e2 20 a5 1c 69 00 85 02
>3a1c18	c2 20 20 3a 1b e2 20 a5 dc c9 03 f0 f3 c9 00 d0
>3a1c28	27 e2 20 20 fd 19 a7 00 f0 1e c9 3a f0 15 08 c2
>3a1c38	20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>3a1c48	dc d4 08 20 dc 19 80 c8 28 60 08 58 e2 20 a9 80
>3a1c58	85 d2 9c 8a 0f 20 58 17 c2 30 64 31 a0 02 00 b7
>3a1c68	1a f0 29 20 f4 1b e2 20 a5 dc c9 01 f0 1e c9 02
>3a1c78	f0 ea c9 03 f0 e6 c2 20 a0 00 00 18 a5 1a 77 1a
>3a1c88	85 1a e2 20 a5 1c 69 00 85 1c 80 d0 e2 20 a9 00
>3a1c98	85 d2 28 60 08 c2 30 c2 20 a9 00 00 85 08 a9 01
>3a1ca8	00 85 0a c2 20 a0 02 00 b7 08 f0 31 c5 23 f0 1e
>3a1cb8	b0 2b c2 20 a0 00 00 18 a5 08 77 08 85 0c e2 20
>3a1cc8	a5 0a 69 00 85 0a c2 20 a5 0c 85 08 80 d7 c2 20
>3a1cd8	a5 08 85 1a e2 20 a5 0a 85 1c 28 38 60 28 18 60
>3a1ce8	08 e2 20 a7 0c 87 08 c2 20 a5 0c c5 00 d0 08 e2
>3a1cf8	20 a5 0e c5 02 f0 26 c2 20 18 a5 0c 69 01 00 85
>3a1d08	0c e2 20 a5 0e 69 00 85 0e c2 20 18 a5 08 69 01
>3a1d18	00 85 08 e2 20 a5 0a 69 00 85 0a 80 c4 28 60 08
>3a1d28	e2 20 a7 0c 87 08 c2 20 a5 0c c5 00 d0 06 a5 0e
>3a1d38	c5 02 f0 26 c2 20 38 a5 0c e9 01 00 85 0c e2 20
>3a1d48	a5 0e e9 00 85 0e c2 20 38 a5 08 e9 01 00 85 08
>3a1d58	e2 20 a5 0a e9 00 85 0a 80 c6 28 60 08 a0 00 00
>3a1d68	c2 20 18 a5 08 77 08 85 0c e2 20 a5 0a 69 00 85
>3a1d78	0e c2 20 18 a5 d9 69 04 00 85 00 e2 20 a5 db 69
>3a1d88	00 85 02 a0 00 00 c2 20 38 a5 d9 f7 08 85 d9 e2
>3a1d98	20 a5 db e9 00 85 db 20 e8 1c 20 28 30 28 60 08
>3a1da8	08 c2 20 48 a9 00 08 5b 68 28 c2 30 a0 02 00 97
>3a1db8	d9 18 a5 d9 69 04 00 85 08 e2 20 a5 db 69 00 85
>3a1dc8	0a e2 20 a0 00 00 b7 1a 97 08 f0 03 c8 80 f7 c2
>3a1dd8	20 98 18 69 05 00 85 0c c2 20 a0 00 00 a5 0c 97
>3a1de8	d9 c2 20 18 a5 d9 65 0c 85 0c e2 20 a5 db 69 00
>3a1df8	85 db c2 20 a5 0c 85 d9 c2 20 a0 00 00 a9 00 00
>3a1e08	97 d9 c8 c0 05 00 d0 f8 20 28 30 28 60 0b 08 08
>3a1e18	c2 20 48 a9 00 08 5b 68 28 c2 30 a9 00 00 85 08
>3a1e28	a9 01 00 85 0a a0 02 00 b7 08 f0 1d c5 d7 f0 25
>3a1e38	b0 1d a0 00 00 18 a5 08 77 08 85 0c a5 0a 69 00
>3a1e48	00 85 0a a5 0c 85 08 80 dc a9 00 00 28 2b 60 a9
>3a1e58	01 00 28 2b 60 a9 02 00 28 2b 60 08 c2 30 a9 05
>3a1e68	00 85 10 a0 00 00 e2 20 b7 1a f0 07 c2 20 e6 10
>3a1e78	c8 80 f3 c2 20 a5 08 85 00 a5 0a 85 02 18 a5 d9
>3a1e88	69 04 00 85 0c a5 db 69 00 00 85 0e 18 a5 d9 65
>3a1e98	10 85 d9 a5 db 69 00 00 85 db 18 a5 d9 69 04 00
>3a1ea8	85 08 a5 db 69 00 00 85 0a 20 27 1d c2 20 a5 10
>3a1eb8	a0 00 00 97 00 a5 d7 a0 02 00 97 00 18 a5 00 69
>3a1ec8	04 00 85 00 a5 02 69 00 00 85 02 a0 00 00 e2 20
>3a1ed8	b7 1a 97 00 f0 03 c8 80 f7 20 28 30 28 60 08 c2
>3a1ee8	30 85 d7 20 15 1e c9 00 00 f0 2c c9 01 00 f0 22
>3a1ef8	c2 20 a5 08 48 a5 0a 48 20 64 1d 68 85 0a 68 85
>3a1f08	08 a5 1a 85 00 a5 1c 85 02 20 fd 19 e2 20 a7 00
>3a1f18	f0 0a 20 63 1e 80 05 a5 d7 20 a7 1d 28 60 8b 08
>3a1f28	08 e2 20 48 a9 3a 48 ab 68 28 a2 fb d1 20 9c 02
>3a1f38	28 ab 60 08 e2 30 a9 01 20 1c 00 20 db 00 f0 06
>3a1f48	c9 0d f0 02 80 f5 28 60 0b 08 08 c2 20 48 a9 00
>3a1f58	08 5b 68 28 c2 30 64 d7 a9 00 4f 85 1a a9 00 00
>3a1f68	85 1c 20 ac 05 c2 20 a5 d7 d0 05 20 da 1b 80 07
>3a1f78	20 e6 1e 28 2b 38 60 28 2b 18 60 c2 30 a2 ff fe
>3a1f88	9a 20 26 1f 20 08 00 20 0c 00 a9 00 00 20 1c 00
>3a1f98	20 50 1f b0 ef 80 ea e2 20 a5 27 c5 2d d0 06 c2
>3a1fa8	20 29 ff 00 60 c2 20 08 c2 20 48 a9 00 08 5b 68
>3a1fb8	28 e2 20 a9 04 8f d3 08 00 dc d4 08 20 9f 1f c2
>3a1fc8	20 c9 00 00 f0 1d c9 02 00 d0 03 4c f1 10 08 c2
>3a1fd8	20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>3a1fe8	dc d4 08 18 a5 23 65 29 85 23 a5 25 65 2b 85 25
>3a1ff8	60 38 a5 23 e5 29 85 23 a5 25 e5 2b 85 25 60 a5
>3a2008	23 8f 08 01 00 a5 29 8f 0a 01 00 af 0c 01 00 85
>3a2018	23 af 0e 01 00 85 25 60 a5 23 8f 12 01 00 a5 29
>3a2028	8f 10 01 00 af 14 01 00 85 23 60 a5 23 8f 12 01
>3a2038	00 a5 29 8f 10 01 00 af 16 01 00 85 23 60 c2 20
>3a2048	a5 23 25 29 85 23 a5 25 25 2b 85 25 60 c2 20 a5
>3a2058	23 05 29 85 23 a5 25 05 2b 85 25 60 c2 20 a5 23
>3a2068	49 ff ff 85 23 a5 25 49 ff ff 85 25 60 c2 20 a5
>3a2078	25 c5 2b 90 0b a5 23 c5 29 90 05 64 23 64 25 60
>3a2088	a9 ff ff 85 23 85 25 60 c2 20 a5 2b c5 25 90 0b
>3a2098	a5 29 c5 23 90 05 64 23 64 25 60 a9 ff ff 85 23
>3a20a8	85 25 60 c2 20 a5 2b c5 25 d0 0e a5 29 c5 23 d0
>3a20b8	08 a9 ff ff 85 23 85 25 60 64 23 64 25 60 c2 20
>3a20c8	a5 2b c5 25 d0 0e a5 29 c5 23 d0 08 a9 ff ff 85
>3a20d8	23 85 25 60 64 23 64 25 60 c2 20 a5 25 c5 2b 90
>3a20e8	10 d0 06 a5 23 c5 29 90 08 a9 ff ff 85 23 85 25
>3a20f8	60 64 23 64 25 60 c2 20 a5 25 c5 2b 90 0f f0 05
>3a2108	64 23 64 25 60 a5 23 c5 29 f0 02 b0 f3 a9 ff ff
>3a2118	85 23 85 25 60 08 e2 20 20 61 16 20 b5 04 20 bb
>3a2128	03 a5 23 0a 0a 0a 0a 05 29 48 a9 2c 20 d5 1a 20
>3a2138	61 16 20 b5 04 20 bb 03 a5 23 0a 0a 0a 0a 05 29
>3a2148	48 a9 2c 20 d5 1a 20 61 16 20 b5 04 20 bb 03 a5
>3a2158	23 0a 0a 0a 0a 05 29 48 af 0e 08 af 09 0c 8f 0e
>3a2168	08 af 68 8f 00 08 af 68 8f 02 08 af 68 8f 04 08
>3a2178	af af 0e 08 af 29 f7 8f 0e 08 af 20 21 1a 28 60
>3a2188	08 e2 20 20 61 16 20 b5 04 20 bb 03 a5 23 0a 0a
>3a2198	0a 0a 05 29 48 a9 2c 20 d5 1a 20 61 16 20 b5 04
>3a21a8	20 bb 03 a5 23 0a 0a 0a 0a 05 29 48 a9 2c 20 d5
>3a21b8	1a 20 61 16 20 3a 04 20 f1 03 c2 20 a5 23 85 92
>3a21c8	a5 29 85 23 20 bb 03 e2 20 a5 23 0a 0a 0a 0a 05
>3a21d8	29 48 c2 20 a5 92 85 23 20 bb 03 e2 20 a5 23 0a
>3a21e8	0a 0a 0a 05 29 48 af 0e 08 af 09 0c 8f 0e 08 af
>3a21f8	68 8f 0f 08 af 68 8f 0a 08 af 68 8f 09 08 af 68
>3a2208	8f 06 08 af af 0e 08 af 29 f7 8f 0e 08 af 20 21
>3a2218	1a 28 60 08 20 61 16 20 b5 04 e2 20 a5 23 29 0f
>3a2228	0a 0a 0a 0a 8f 55 08 00 a9 2c 20 d5 1a 20 61 16
>3a2238	20 b5 04 a5 23 29 0f 0f 55 08 00 8f 1e 00 00 28
>3a2248	60 08 e2 20 20 61 16 20 b5 04 a5 23 48 a9 2c 20
>3a2258	d5 1a 20 61 16 20 b5 04 a5 23 48 a9 2c 20 d5 1a
>3a2268	20 61 16 20 b5 04 a5 23 8f 08 00 af 68 8f 09 00
>3a2278	af 68 8f 0a 00 af 28 60 08 e2 20 20 61 16 20 3a
>3a2288	04 a5 23 f0 1e a9 01 8f 04 00 af a9 20 8f 08 00
>3a2298	af 8f 09 00 af a9 48 8f 0f 00 00 a9 34 8f 13 00
>3a22a8	00 80 12 a9 00 8f 04 00 af a9 50 8f 0f 00 00 a9
>3a22b8	3c 8f 13 00 00 a9 2c 85 37 20 00 1b 90 35 20 dc
>3a22c8	19 20 61 16 20 b5 04 a5 23 48 a9 2c 20 d5 1a 20
>3a22d8	61 16 20 b5 04 a5 23 48 a9 2c 20 d5 1a 20 61 16
>3a22e8	20 b5 04 a5 23 8f 05 00 af 68 8f 06 00 af 68 8f
>3a22f8	07 00 af 28 60 08 c2 20 20 61 16 20 b5 04 a9 af
>3a2308	00 85 a0 a5 23 c9 0a 00 b0 5c 0a aa bf 83 23 3a
>3a2318	85 9e a9 2c 00 20 d5 1a 20 61 16 20 b5 04 a5 23
>3a2328	0a 0a 18 65 9e 85 9e a9 2c 00 20 d5 1a 20 61 16
>3a2338	20 b5 04 a0 02 00 a5 23 e2 20 97 9e a9 2c 20 d5
>3a2348	1a 20 61 16 20 b5 04 a0 01 00 a5 23 e2 20 97 9e
>3a2358	a9 2c 20 d5 1a 20 61 16 20 b5 04 a0 00 00 a5 23
>3a2368	e2 20 97 9e 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a2378	e2 20 a9 0a 8f d3 08 00 dc d4 08 00 20 00 24 00
>3a2388	28 00 2c 00 30 00 34 00 38 00 3c 40 1f 80 1f 08
>3a2398	20 61 16 20 b5 04 a5 23 8f 00 00 af c2 20 a9 80
>3a23a8	02 8f 08 f0 3a a9 e0 01 8f 0a f0 3a af 08 f0 3a
>3a23b8	8f 08 01 00 af 0a f0 3a 8f 0a 01 00 af 0c 01 00
>3a23c8	8f 0c f0 3a e2 20 af 0e 01 00 8f 0e f0 3a 28 60
>3a23d8	08 c2 20 20 61 16 20 b5 04 c2 20 a5 23 85 55 a9
>3a23e8	2c 00 20 d5 1a 20 61 16 20 b5 04 e2 20 a5 55 d0
>3a23f8	05 a5 23 0a 80 04 a5 23 38 2a 8f 40 01 af c2 20
>3a2408	a9 2c 00 85 37 20 00 1b b0 18 c2 20 08 c2 20 a9
>3a2418	00 00 85 23 a9 b0 00 85 25 e2 20 a9 00 85 27 28
>3a2428	80 08 c2 20 20 dc 19 20 61 16 e2 20 38 a5 25 8f
>3a2438	02 f0 3a e9 b0 30 42 8f 43 01 af 8f 06 f0 3a a5
>3a2448	23 8f 00 f0 3a 8f 41 01 af 8f 04 f0 3a a5 24 8f
>3a2458	42 01 af 8f 05 f0 3a 8f 01 f0 3a a9 00 8f 07 f0
>3a2468	3a 8f 03 f0 3a c2 20 af 08 f0 3a 8f 44 01 af af
>3a2478	0a f0 3a 8f 46 01 af 28 60 08 c2 20 48 a9 00 08
>3a2488	5b 68 28 e2 20 a9 0a 8f d3 08 00 dc d4 08 08 c2
>3a2498	20 af 04 f0 3a 8f 05 04 af af 0c f0 3a 8f 08 04
>3a24a8	af e2 20 af 06 f0 3a 8f 07 04 af af 0e f0 3a 8f
>3a24b8	0a 04 af a9 00 8f 01 04 af a9 85 8f 00 04 af af
>3a24c8	01 04 af 30 fa a9 00 8f 00 04 af 28 60 08 c2 20
>3a24d8	a5 5d 8f 08 01 00 af 08 f0 3a 8f 0a 01 00 18 af
>3a24e8	0c 01 00 65 59 85 0c af 0e 01 00 69 00 00 85 0e
>3a24f8	18 a5 0c 6f 00 f0 3a 85 9e a5 0e 6f 02 f0 3a 85
>3a2508	a0 e2 20 a5 55 87 9e 28 60 c2 20 a9 01 00 85 dd
>3a2518	38 a5 61 e5 59 85 69 10 0b 49 ff ff 1a 85 69 a9
>3a2528	ff ff 85 dd a9 01 00 85 df 38 a5 65 e5 5d 85 6d
>3a2538	10 0b 49 ff ff 1a 85 6d a9 ff ff 85 df a5 6d c5
>3a2548	69 b0 04 a5 69 80 06 a5 6d 49 ff ff 1a 48 0a 68
>3a2558	6a 85 71 20 d5 24 a5 59 c5 61 d0 06 a5 5d c5 65
>3a2568	f0 36 a5 71 85 75 a5 69 49 ff ff 1a c5 75 10 10
>3a2578	f0 0e 38 a5 71 e5 6d 85 71 18 a5 59 65 dd 85 59
>3a2588	a5 75 c5 6d 10 cd f0 cb 18 a5 71 65 69 85 71 18
>3a2598	a5 5d 65 df 85 5d 80 bb 60 08 a9 00 00 8f 00 04
>3a25a8	af c2 20 a5 5d 8f 08 01 00 af 08 f0 3a 8f 0a 01
>3a25b8	00 18 af 0c 01 00 65 59 85 0c e2 20 af 0e 01 00
>3a25c8	69 00 85 0e c2 20 18 af 04 f0 3a 65 0c 8f 05 04
>3a25d8	af e2 20 af 06 f0 3a 65 0e 8f 07 04 af c2 20 38
>3a25e8	a5 61 e5 59 85 0c 8f 08 04 af 38 af 08 f0 3a 8f
>3a25f8	0e 04 af 38 a5 65 e5 5d 8f 0a 04 af a9 01 00 8f
>3a2608	0c 04 af e2 20 af 55 08 00 8f 01 04 af a9 87 8f
>3a2618	00 04 af af 01 04 af 30 fa a9 00 8f 00 04 af 28
>3a2628	60 08 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>3a2638	a9 00 48 ab 68 28 c2 30 20 61 16 20 3a 04 a5 23
>3a2648	85 55 a9 2c 00 20 d5 1a 20 61 16 20 3a 04 a5 23
>3a2658	85 59 a9 2c 00 20 d5 1a 20 61 16 20 b5 04 a5 23
>3a2668	85 5d 20 d5 24 28 60 08 08 c2 20 48 a9 00 08 5b
>3a2678	68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 20 61
>3a2688	16 20 3a 04 a5 23 85 59 a9 2c 00 20 d5 1a 20 61
>3a2698	16 20 3a 04 a5 23 85 5d a9 2c 00 20 d5 1a 20 61
>3a26a8	16 20 3a 04 a5 23 85 61 a9 2c 00 20 d5 1a 20 61
>3a26b8	16 20 3a 04 a5 23 85 65 a9 2c 00 20 d5 1a 20 61
>3a26c8	16 20 b5 04 a5 23 85 55 20 11 25 28 60 08 08 c2
>3a26d8	20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab
>3a26e8	68 28 c2 30 20 61 16 20 3a 04 a5 23 85 59 a9 2c
>3a26f8	00 20 d5 1a 20 61 16 20 3a 04 a5 23 85 5d a9 2c
>3a2708	00 20 d5 1a 20 61 16 20 3a 04 a5 23 85 61 a9 2c
>3a2718	00 20 d5 1a 20 61 16 20 3a 04 a5 23 85 65 a9 2c
>3a2728	00 20 d5 1a 20 61 16 20 b5 04 a5 23 85 55 20 a1
>3a2738	25 28 60 08 e2 20 a5 23 c9 12 b0 18 0a 0a 0a 18
>3a2748	69 00 85 9e a9 02 69 00 85 9f a9 af 69 00 85 a0
>3a2758	64 a1 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2768	a9 09 8f d3 08 00 dc d4 08 08 e2 20 20 61 16 20
>3a2778	b5 04 20 3b 27 a5 23 8f 0e f0 3a a9 2c 20 d5 1a
>3a2788	20 61 16 20 b5 04 a5 23 c9 08 b0 4b 48 a9 2c 20
>3a2798	d5 1a 20 61 16 20 3a 04 c2 20 38 a5 23 e9 00 00
>3a27a8	85 23 a5 25 e9 b0 00 85 25 30 2c c2 20 a5 23 a0
>3a27b8	01 00 97 9e e2 20 a5 25 c8 c8 97 9e af 0e f0 3a
>3a27c8	aa bf 10 f0 3a 29 f1 85 0c 68 0a 29 0e 05 0c 87
>3a27d8	9e 9f 10 f0 3a 28 60 08 c2 20 48 a9 00 08 5b 68
>3a27e8	28 e2 20 a9 09 8f d3 08 00 dc d4 08 08 c2 20 20
>3a27f8	61 16 20 b5 04 20 3b 27 a9 2c 00 20 d5 1a 20 61
>3a2808	16 20 3a 04 a5 23 a0 04 00 97 9e a9 2c 00 20 d5
>3a2818	1a 20 61 16 20 3a 04 a5 23 a0 06 00 97 9e 28 60
>3a2828	08 c2 20 20 61 16 20 b5 04 20 3b 27 a5 23 8f 0e
>3a2838	f0 3a a9 2c 00 20 d5 1a 20 61 16 20 3a 04 a5 23
>3a2848	48 a9 2c 00 85 37 20 00 1b b0 1c af 0e f0 3a aa
>3a2858	bf 10 f0 3a 29 fe 00 85 0c 68 29 01 00 05 0c 9f
>3a2868	10 f0 3a 87 9e 80 31 e2 20 20 dc 19 20 61 16 20
>3a2878	b5 04 a5 23 c9 08 b0 22 0a 0a 0a 0a 85 0c 68 29
>3a2888	01 05 0c 85 0c af 0e f0 3a aa bf 10 f0 3a 29 8e
>3a2898	05 0c 87 9e 9f 10 f0 3a 28 60 08 c2 20 48 a9 00
>3a28a8	08 5b 68 28 e2 20 a9 09 8f d3 08 00 dc d4 08 08
>3a28b8	20 fd 19 e2 20 a7 00 d0 03 4c 4b 29 c9 3a d0 03
>3a28c8	4c 4b 29 c9 22 d0 0b 20 89 15 20 3e 31 a9 3b 20
>3a28d8	d5 1a 20 ef 02 90 37 20 45 3c 90 32 a9 3f 20 18
>3a28e8	00 a9 20 20 18 00 20 10 00 e2 20 a5 ea c9 02 f0
>3a28f8	32 c9 00 f0 51 c9 01 f0 4c 08 c2 20 48 a9 00 08
>3a2908	5b 68 28 e2 20 a9 04 8f d3 08 00 dc d4 08 08 c2
>3a2918	20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>3a2928	dc d4 08 c2 20 a9 00 4c 85 23 a9 00 00 85 25 e2
>3a2938	20 a9 02 85 27 20 93 11 c2 20 20 e2 3b a9 0d 00
>3a2948	20 18 00 28 60 ea c2 20 a5 00 85 40 a5 02 85 42
>3a2958	a9 00 4c 85 00 a9 00 00 85 02 20 f6 04 c2 20 a5
>3a2968	40 85 00 a5 42 85 02 80 cf 08 20 fd 19 e2 20 a7
>3a2978	00 f0 49 c9 3a f0 45 20 ef 02 90 42 20 45 3c 90
>3a2988	3d 20 14 00 e2 20 8f 00 4e 00 a9 00 8f 01 4e 00
>3a2998	c2 20 a9 00 4e 85 23 a9 00 00 85 25 e2 20 a9 02
>3a29a8	85 27 20 93 11 20 e2 3b 20 fd 19 a7 00 f0 0d c9
>3a29b8	3a f0 09 c9 2c d0 07 20 dc 19 80 ae 28 60 08 c2
>3a29c8	20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>3a29d8	dc d4 08 08 20 61 16 20 3a 04 e2 20 a9 5c 85 a2
>3a29e8	c2 20 a5 23 85 a3 e2 20 a5 25 85 a5 e2 20 a9 2c
>3a29f8	85 37 20 00 1b 90 41 20 dc 19 20 61 16 20 7a 04
>3a2a08	c2 20 a5 23 85 55 e2 20 a9 2c 85 37 20 00 1b 90
>3a2a18	27 20 dc 19 20 61 16 20 7a 04 c2 20 a5 23 85 59
>3a2a28	e2 20 a9 2c 85 37 20 00 1b 90 0d 20 dc 19 20 61
>3a2a38	16 20 7a 04 c2 20 a4 23 a6 59 a5 55 48 da 5a 0b
>3a2a48	8b 08 22 a2 08 00 28 ab 2b 7a fa 68 20 21 1a 28
>3a2a58	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a2a68	d3 08 00 dc d4 08 08 e2 20 20 fd 19 20 45 3c 90
>3a2a78	64 a9 8c 20 d5 1a a9 01 20 00 14 a2 01 00 a9 00
>3a2a88	8f 00 4d 00 20 61 16 20 7a 04 c2 20 a5 23 9f 00
>3a2a98	4d 00 e2 20 af 00 4d 00 1a 8f 00 4d 00 30 4b e8
>3a2aa8	e8 20 fd 19 a7 00 c9 2c f0 25 c9 8d d0 27 20 dc
>3a2ab8	19 20 f3 3c c2 20 a5 c0 85 23 e2 20 a5 c2 85 25
>3a2ac8	64 26 a5 ea 09 80 85 ea 85 27 20 e2 3b 28 60 20
>3a2ad8	dc 19 4c 8c 2a 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2ae8	20 a9 02 8f d3 08 00 dc d4 08 08 c2 20 48 a9 00
>3a2af8	08 5b 68 28 e2 20 a9 0a 8f d3 08 00 dc d4 08 08
>3a2b08	20 fd 19 e2 20 a7 00 f0 28 c9 3a f0 24 20 ef 02
>3a2b18	90 21 20 45 3c 90 1c 20 50 2b 20 e2 3b 20 fd 19
>3a2b28	a7 00 f0 0d c9 3a f0 09 c9 2c d0 07 20 dc 19 80
>3a2b38	cf 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a2b48	02 8f d3 08 00 dc d4 08 08 a5 02 85 42 a5 00 85
>3a2b58	40 a5 1c 85 46 a5 1a 85 44 c2 20 a5 3a d0 04 a5
>3a2b68	38 f0 44 a5 38 85 00 a5 3a 85 02 a5 3c 85 1a a5
>3a2b78	3e 85 1c e2 20 a7 00 f0 49 c9 3a f0 45 c9 2c d0
>3a2b88	03 20 dc 19 20 fd 19 a7 00 c9 22 f0 44 20 08 03
>3a2b98	b0 44 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a2ba8	8f d3 08 00 dc d4 08 c2 20 a9 00 00 85 1a a9 01
>3a2bb8	00 85 1c 18 a5 1a 69 04 00 85 00 a5 1c 69 00 00
>3a2bc8	85 02 e2 20 a9 80 85 35 a9 a8 85 37 20 33 1a 80
>3a2bd8	b3 20 89 15 80 03 20 dc 14 c2 20 a5 00 85 38 a5
>3a2be8	02 85 3a a5 1a 85 3c a5 1c 85 3e a5 44 85 1a a5
>3a2bf8	46 85 1c a5 40 85 00 a5 42 85 02 28 60 20 21 1a
>3a2c08	60 64 38 64 3a 64 3c 64 3e 60 20 24 00 60 20 61
>3a2c18	16 c2 20 a5 25 48 a5 23 48 e2 20 a7 00 c9 2c d0
>3a2c28	22 20 dc 19 20 61 16 c2 20 a5 26 d0 2b 68 85 08
>3a2c38	68 85 0a c2 20 a5 23 87 08 e2 20 a0 02 00 a5 25
>3a2c48	97 08 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a2c58	02 8f d3 08 00 dc d4 08 08 c2 20 48 a9 00 08 5b
>3a2c68	68 28 e2 20 a9 09 8f d3 08 00 dc d4 08 20 61 16
>3a2c78	c2 20 a5 25 48 a5 23 48 e2 20 a7 00 c9 2c d0 19
>3a2c88	20 dc 19 20 61 16 c2 20 a5 25 d0 22 68 85 08 68
>3a2c98	85 0a c2 20 a5 23 87 08 60 08 c2 20 48 a9 00 08
>3a2ca8	5b 68 28 e2 20 a9 02 8f d3 08 00 dc d4 08 08 c2
>3a2cb8	20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>3a2cc8	dc d4 08 20 61 16 c2 20 a5 25 48 a5 23 48 e2 20
>3a2cd8	a7 00 c9 2c d0 1f 20 dc 19 20 61 16 e2 20 a5 24
>3a2ce8	d0 28 c2 20 a5 25 d0 22 68 85 08 68 85 0a e2 20
>3a2cf8	a5 23 87 08 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2d08	20 a9 02 8f d3 08 00 dc d4 08 08 c2 20 48 a9 00
>3a2d18	08 5b 68 28 e2 20 a9 09 8f d3 08 00 dc d4 08 08
>3a2d28	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 01 8f d3 08
>3a2d38	00 dc d4 08 08 e2 20 a7 00 f0 05 20 dc 19 80 f7
>3a2d48	28 60 08 28 60 08 28 60 08 28 60 08 c2 20 a5 1c
>3a2d58	20 7a 17 a5 1a 20 7a 17 a5 02 48 a5 00 48 20 21
>3a2d68	1a a5 02 20 7a 17 a5 00 20 7a 17 68 85 00 68 85
>3a2d78	02 20 fd 19 20 45 3c b0 15 08 c2 20 48 a9 00 08
>3a2d88	5b 68 28 e2 20 a9 05 8f d3 08 00 dc d4 08 e2 20
>3a2d98	a5 ea 20 91 17 a5 e9 20 91 17 c2 20 a5 e7 20 7a
>3a2da8	17 20 fd 19 e2 20 a7 00 c9 87 d0 6a a5 ea c9 00
>3a2db8	f0 04 c9 01 f0 00 20 dc 19 20 61 16 20 e2 3b e2
>3a2dc8	20 a9 99 20 d5 1a 20 61 16 c2 20 a5 27 20 7a 17
>3a2dd8	a5 25 20 7a 17 a5 23 20 7a 17 e2 20 a9 9a 85 37
>3a2de8	20 00 1b 90 1b 20 dc 19 20 61 16 e2 20 a5 27 20
>3a2df8	7a 17 c2 20 a5 25 20 7a 17 a5 23 20 7a 17 80 14
>3a2e08	c2 20 a9 00 00 20 7a 17 a9 00 00 20 7a 17 a9 01
>3a2e18	00 20 7a 17 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a2e28	e2 20 a9 02 8f d3 08 00 dc d4 08 08 8b 08 e2 20
>3a2e38	48 a9 00 48 ab 68 28 08 c2 20 48 a9 00 08 5b 68
>3a2e48	28 c2 30 a4 33 c8 c8 c2 20 b9 0c 00 85 e7 b9 0e
>3a2e58	00 e2 20 85 e9 b9 10 00 85 ea c2 20 5a 20 b9 3a
>3a2e68	7a c2 20 b9 00 00 85 29 b9 02 00 85 2b e2 20 b9
>3a2e78	04 00 85 2d c2 20 5a 20 c4 1f 20 e2 3b 7a c2 20
>3a2e88	b9 06 00 85 29 b9 08 00 85 2b e2 20 b9 0a 00 85
>3a2e98	2d c2 20 b9 02 00 30 0a 20 fe 20 20 27 04 f0 28
>3a2ea8	80 08 20 e1 20 20 27 04 f0 1e c2 20 b9 12 00 85
>3a2eb8	00 b9 14 00 85 02 b9 16 00 85 1a b9 18 00 85 1c
>3a2ec8	e2 20 a9 03 85 dc 80 17 a2 23 08 20 c1 13 c2 20
>3a2ed8	18 a5 33 69 1a 00 85 33 a5 35 69 00 00 85 35 ab
>3a2ee8	28 60 08 a5 1a 48 a5 1c 48 20 fd 19 20 f6 04 a5
>3a2ef8	23 f0 26 20 9c 1c 90 38 e2 20 a9 02 85 dc 20 21
>3a2f08	1a c2 20 68 20 7a 17 68 20 7a 17 a5 02 20 7a 17
>3a2f18	a5 00 20 7a 17 e6 31 28 60 68 68 08 c2 20 48 a9
>3a2f28	00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 dc d4 08
>3a2f38	68 68 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 06
>3a2f48	8f d3 08 00 dc d4 08 08 c2 30 a5 31 f0 1e 20 9c
>3a2f58	17 85 00 20 9c 17 85 02 20 9c 17 85 1a 20 9c 17
>3a2f68	85 1c c6 31 e2 20 a9 03 85 dc 28 60 08 c2 20 48
>3a2f78	a9 00 08 5b 68 28 e2 20 a9 07 8f d3 08 00 dc d4
>3a2f88	08 08 20 61 16 20 27 04 f0 1c e2 20 a9 94 20 d5
>3a2f98	1a 20 f6 04 20 27 04 f0 12 20 9c 1c 90 22 e2 20
>3a2fa8	a9 02 85 dc 80 03 20 21 1a 28 60 08 c2 20 48 a9
>3a2fb8	00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 dc d4 08
>3a2fc8	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 06 8f d3
>3a2fd8	08 00 dc d4 08 08 e2 20 a9 01 85 dc 28 60 08 20
>3a2fe8	fd 19 20 f6 04 a5 23 f0 0d 20 9c 1c 90 1d e2 20
>3a2ff8	a9 02 85 dc 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a3008	e2 20 a9 02 8f d3 08 00 dc d4 08 08 c2 20 48 a9
>3a3018	00 08 5b 68 28 e2 20 a9 06 8f d3 08 00 dc d4 08
>3a3028	20 63 13 20 bd 0b 20 b8 39 60 08 a7 00 10 03 20
>3a3038	dc 19 20 45 3c b0 03 4c a9 30 e2 20 20 1f 1b c9
>3a3048	8c d0 0e a9 8c 20 d5 1a a9 00 8f 00 4d 00 20 df
>3a3058	14 20 fd 19 e2 20 a7 00 c9 87 f0 03 4c a9 30 20
>3a3068	dc 19 a5 ea 48 a5 e9 48 a5 e8 48 a5 e7 48 20 61
>3a3078	16 68 85 e7 68 85 e8 68 85 e9 68 85 ea 29 80 f0
>3a3088	1b 20 2b 3a 90 30 c2 20 a0 09 00 b7 08 85 c0 e2
>3a3098	20 c8 c8 b7 08 85 c2 20 b6 3e 80 03 20 e2 3b 28
>3a30a8	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a30b8	d3 08 00 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28
>3a30c8	e2 20 a9 05 8f d3 08 00 dc d4 08 08 e2 20 20 1f
>3a30d8	1b c9 00 f0 5c 20 61 16 e2 20 a5 27 c9 ff f0 14
>3a30e8	c9 02 d0 05 20 3e 31 80 0b c9 00 d0 05 20 5e 31
>3a30f8	80 02 80 40 20 fd 19 a7 00 f0 36 c9 3a f0 32 c9
>3a3108	2c f0 19 c9 3b f0 1a 08 c2 20 48 a9 00 08 5b 68
>3a3118	28 e2 20 a9 02 8f d3 08 00 dc d4 08 a9 09 20 18
>3a3128	00 20 dc 19 20 fd 19 a7 00 f0 09 c9 3a f0 05 80
>3a3138	a4 20 1b 02 28 60 08 8b 08 c2 20 48 a9 00 08 5b
>3a3148	68 28 e2 20 c2 10 a0 00 00 b7 23 f0 06 20 18 00
>3a3158	c8 80 f6 ab 28 60 08 c2 20 20 51 10 a5 16 85 23
>3a3168	a5 18 85 25 20 3e 31 28 60 08 e2 20 85 b5 4a 4a
>3a3178	4a 4a 29 0f 18 69 30 97 16 c8 a5 b5 29 0f 18 69
>3a3188	30 97 16 c8 28 60 e2 20 a9 8c 20 d5 1a 08 20 61
>3a3198	16 e2 20 c2 10 af 0e 08 af 09 08 8f 0e 08 af 20
>3a31a8	0a 10 a0 00 00 af 06 08 af 20 71 31 a9 2f 97 16
>3a31b8	c8 af 09 08 af 20 71 31 a9 2f 97 16 c8 af 0f 08
>3a31c8	af 20 71 31 af 0a 08 af 20 71 31 a9 00 97 16 af
>3a31d8	0e 08 af 29 f7 8f 0e 08 af c2 20 a5 16 85 23 a5
>3a31e8	18 85 25 e2 20 a9 02 85 27 20 93 11 28 e2 20 20
>3a31f8	dc 19 60 e2 20 a9 8c 20 d5 1a 08 20 61 16 e2 20
>3a3208	c2 10 af 0e 08 af 09 08 8f 0e 08 af 20 0a 10 a0
>3a3218	00 00 af 04 08 af 29 7f 20 71 31 a9 3a 97 16 c8
>3a3228	af 02 08 af 20 71 31 a9 3a 97 16 c8 af 00 08 af
>3a3238	20 71 31 a9 00 97 16 af 0e 08 af 29 f7 8f 0e 08
>3a3248	af c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85
>3a3258	27 20 93 11 28 e2 20 20 dc 19 60 08 c2 20 20 61
>3a3268	16 20 3a 04 c2 20 a5 23 49 ff ff 85 23 a5 25 49
>3a3278	ff ff 85 25 e6 23 d0 03 e6 25 00 28 60 e2 20 a9
>3a3288	8c 20 d5 1a 08 c2 30 20 61 16 20 5a 04 c2 20 a5
>3a3298	25 48 a5 23 48 20 fd 19 e2 20 a7 00 c9 2c f0 03
>3a32a8	4c fc 32 20 dc 19 20 61 16 20 7a 04 c2 20 a5 23
>3a32b8	48 20 fd 19 e2 20 a7 00 c9 2c f0 03 4c fc 32 20
>3a32c8	dc 19 20 61 16 20 7a 04 c2 20 a5 23 85 8f e2 20
>3a32d8	a5 25 85 91 c2 20 68 85 29 a9 00 00 85 2b 68 85
>3a32e8	23 68 85 25 e2 20 a9 02 85 27 20 eb 11 e2 20 20
>3a32f8	dc 19 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3308	a9 02 8f d3 08 00 dc d4 08 08 c2 20 48 a9 00 08
>3a3318	5b 68 28 e2 20 a9 09 8f d3 08 00 dc d4 08 e2 20
>3a3328	a9 8c 20 d5 1a 08 c2 30 20 61 16 e2 20 a5 27 c9
>3a3338	02 f0 03 4c aa 33 c2 20 a5 25 48 a5 23 48 20 fd
>3a3348	19 e2 20 a7 00 c9 2c f0 03 4c bf 33 20 dc 19 20
>3a3358	61 16 e2 20 a5 27 c9 00 d0 48 c2 20 a5 23 85 8f
>3a3368	c2 20 68 85 23 68 85 25 e2 20 a9 02 85 27 e2 20
>3a3378	a0 00 00 b7 23 f0 03 c8 80 f9 c2 20 98 38 e5 8f
>3a3388	30 09 85 29 a9 00 00 85 2b 80 07 a9 00 00 85 29
>3a3398	85 2b e2 20 a9 00 85 2d 20 eb 11 e2 20 20 dc 19
>3a33a8	28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a33b8	8f d3 08 00 dc d4 08 08 c2 20 48 a9 00 08 5b 68
>3a33c8	28 e2 20 a9 02 8f d3 08 00 dc d4 08 08 c2 20 48
>3a33d8	a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 dc d4
>3a33e8	08 e2 20 a9 8c 20 d5 1a 08 c2 30 20 61 16 e2 20
>3a33f8	a5 27 c9 02 f0 03 4c 55 34 c2 20 a5 25 48 a5 23
>3a3408	48 20 fd 19 e2 20 a7 00 c9 2c f0 03 4c 6a 34 20
>3a3418	dc 19 20 61 16 e2 20 a5 27 c9 00 d0 30 c2 20 a5
>3a3428	23 85 8f c2 20 a9 00 00 85 29 a9 00 00 85 2b e2
>3a3438	20 a9 00 85 2d c2 20 68 85 23 68 85 25 e2 20 a9
>3a3448	02 85 27 20 eb 11 e2 20 20 dc 19 28 60 08 c2 20
>3a3458	48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 dc
>3a3468	d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a3478	8f d3 08 00 dc d4 08 08 c2 20 48 a9 00 08 5b 68
>3a3488	28 e2 20 a9 09 8f d3 08 00 dc d4 08 e2 20 a9 8c
>3a3498	20 d5 1a 20 61 16 c2 10 e2 20 a5 27 c9 02 d0 23
>3a34a8	c2 20 a5 00 85 40 a5 02 85 42 a5 23 85 00 a5 25
>3a34b8	85 02 20 f6 04 a5 40 85 00 a5 42 85 02 e2 20 20
>3a34c8	dc 19 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a34d8	04 8f d3 08 00 dc d4 08 e2 20 a9 8c 20 d5 1a 08
>3a34e8	20 61 16 c2 10 e2 20 a5 27 c9 00 d0 1d 20 51 10
>3a34f8	c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85 27
>3a3508	20 93 11 28 e2 20 20 dc 19 60 08 c2 20 48 a9 00
>3a3518	08 5b 68 28 e2 20 a9 04 8f d3 08 00 dc d4 08 e2
>3a3528	20 a9 8c 20 d5 1a 08 20 61 16 20 5a 04 c2 20 64
>3a3538	0c 64 0e e2 30 a0 00 b7 23 c9 20 f0 04 c9 24 d0
>3a3548	03 c8 80 f3 b7 23 20 19 03 90 1e c2 20 06 0c 26
>3a3558	0e 06 0c 26 0e 06 0c 26 0e 06 0c 26 0e e2 20 20
>3a3568	3a 03 05 0c 85 0c c8 80 db c2 20 a5 0c 85 23 a5
>3a3578	0e 85 25 e2 20 a9 00 85 27 28 e2 20 20 dc 19 60
>3a3588	e2 20 a9 8c 20 d5 1a 08 20 61 16 20 3a 04 20 0a
>3a3598	10 e2 30 a0 ff a9 00 97 16 88 a5 23 29 0f aa bf
>3a35a8	00 d0 3a 97 16 88 a5 23 29 f0 4a 4a 4a 4a aa bf
>3a35b8	00 d0 3a 97 16 88 a5 24 85 23 a5 25 85 24 a5 26
>3a35c8	85 25 a9 00 85 26 a5 23 d0 d0 a5 24 d0 cc a5 25
>3a35d8	d0 c8 98 38 65 16 85 23 a5 17 85 24 a5 18 85 25
>3a35e8	a5 19 85 26 a9 02 85 27 20 93 11 28 e2 20 20 dc
>3a35f8	19 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a3608	8f d3 08 00 dc d4 08 e2 20 a9 8c 20 d5 1a 20 61
>3a3618	16 e2 20 a5 27 c9 02 d0 1f 8b a5 25 48 ab c2 10
>3a3628	a6 23 20 de 10 ab 84 23 c2 20 64 25 e2 20 a9 00
>3a3638	85 27 e2 20 20 dc 19 60 08 c2 20 48 a9 00 08 5b
>3a3648	68 28 e2 20 a9 04 8f d3 08 00 dc d4 08 e2 20 a9
>3a3658	8c 20 d5 1a 20 61 16 e2 20 a5 27 c9 00 d0 12 e2
>3a3668	20 a7 23 85 23 64 24 64 25 64 30 e2 20 20 dc 19
>3a3678	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a3688	d3 08 00 dc d4 08 e2 20 a9 8c 20 d5 1a 20 61 16
>3a3698	e2 20 a5 27 c9 00 d0 1d c2 20 a7 23 85 0c e2 20
>3a36a8	a0 02 00 b7 23 85 25 64 26 c2 20 a5 0c 85 23 e2
>3a36b8	20 20 dc 19 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a36c8	20 a9 04 8f d3 08 00 dc d4 08 e2 20 a9 8c 20 d5
>3a36d8	1a 20 61 16 e2 20 a5 27 c9 00 d0 0e c2 20 a7 23
>3a36e8	85 23 64 25 e2 20 20 dc 19 60 08 c2 20 48 a9 00
>3a36f8	08 5b 68 28 e2 20 a9 04 8f d3 08 00 dc d4 08 e2
>3a3708	20 a9 8c 20 d5 1a 20 61 16 e2 20 a5 27 c9 00 d0
>3a3718	24 20 0a 10 a5 23 87 16 a9 00 a0 01 00 97 16 c2
>3a3728	20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85 27 e2
>3a3738	20 20 dc 19 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3748	20 a9 04 8f d3 08 00 dc d4 08 e2 20 a9 8c 20 d5
>3a3758	1a 20 61 16 e2 20 a5 27 c9 02 d0 14 a7 23 85 23
>3a3768	64 24 64 25 64 26 a9 00 85 27 e2 20 20 dc 19 60
>3a3778	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>3a3788	08 00 dc d4 08 e2 20 a9 8c 20 d5 1a 20 61 16 e2
>3a3798	20 a5 27 c9 00 d0 39 e2 20 a5 26 d0 48 a5 25 d0
>3a37a8	44 a5 24 d0 40 c2 10 20 0a 10 a4 23 e2 20 a9 00
>3a37b8	97 16 88 30 07 a9 20 97 16 88 10 fb a9 02 85 27
>3a37c8	c2 20 a5 16 85 23 a5 18 85 25 e2 20 20 dc 19 60
>3a37d8	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>3a37e8	08 00 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a37f8	20 a9 09 8f d3 08 00 dc d4 08 e2 20 a9 8c 20 d5
>3a3808	1a 20 61 16 e2 20 a5 27 c9 00 d0 39 e2 20 a5 26
>3a3818	d0 48 a5 25 d0 44 a5 24 d0 40 c2 10 20 0a 10 a4
>3a3828	23 e2 20 a9 00 97 16 88 30 07 a9 09 97 16 88 10
>3a3838	fb a9 02 85 27 c2 20 a5 16 85 23 a5 18 85 25 e2
>3a3848	20 20 dc 19 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3858	20 a9 04 8f d3 08 00 dc d4 08 08 c2 20 48 a9 00
>3a3868	08 5b 68 28 e2 20 a9 09 8f d3 08 00 dc d4 08 e2
>3a3878	20 a9 8c 20 d5 1a 20 61 16 20 3a 04 c2 20 a5 25
>3a3888	10 17 49 ff ff 85 25 a5 23 49 ff ff 18 69 01 00
>3a3898	85 23 a5 25 69 00 00 85 25 e2 20 20 dc 19 60 e2
>3a38a8	20 a9 8c 20 d5 1a 20 61 16 e2 20 a5 27 c9 00 d0
>3a38b8	25 c2 20 a5 25 30 12 d0 04 a5 23 f0 13 a9 00 00
>3a38c8	85 25 a9 01 00 85 23 80 07 a9 ff ff 85 25 85 23
>3a38d8	e2 20 20 dc 19 60 08 c2 20 48 a9 00 08 5b 68 28
>3a38e8	e2 20 a9 04 8f d3 08 00 dc d4 08 00 ea 60 08 0b
>3a38f8	08 c2 20 48 a9 00 08 5b 68 28 c2 30 c2 20 a9 00
>3a3908	00 85 d9 e2 20 a9 01 85 db c2 30 a9 00 00 a0 00
>3a3918	00 97 d9 a0 02 00 97 d9 a0 04 00 97 d9 20 b2 19
>3a3928	2b 28 60 8b 08 c2 20 a9 00 00 85 1a a9 01 00 85
>3a3938	1c 20 b2 19 20 52 1c 28 ab 60 08 c2 20 64 55 a9
>3a3948	ff 7f 85 59 20 1b 02 20 1f 1b 29 ff 00 c9 00 00
>3a3958	f0 2c c9 81 00 f0 1a 20 fd 19 20 f6 04 a5 23 85
>3a3968	55 20 1f 1b 29 ff 00 c9 00 00 f0 12 c9 81 00 d0
>3a3978	2a 20 d5 1a 20 fd 19 20 f6 04 a5 23 85 59 a5 1c
>3a3988	48 a5 1a 48 a5 02 48 a5 00 48 20 6e 12 68 85 00
>3a3998	68 85 02 68 85 1a 68 85 1c 28 60 08 c2 20 48 a9
>3a39a8	00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 dc d4 08
>3a39b8	08 08 c2 20 48 a9 00 08 5b 68 28 c2 20 64 e4 64
>3a39c8	e7 e2 20 64 e6 64 e9 64 ea c2 20 38 a5 d9 69 04
>3a39d8	00 85 e1 e2 20 a5 db 69 00 85 e3 28 60 c9 5f f0
>3a39e8	1a c9 3a b0 04 c9 30 b0 12 c9 5b b0 04 c9 41 b0
>3a39f8	0a c9 7b b0 04 c9 61 b0 02 18 60 38 60 08 e2 20
>3a3a08	c2 10 a0 00 00 b7 0c f0 0a d7 e7 d0 13 c8 c0 08
>3a3a18	00 d0 f2 b7 e7 20 63 03 20 e5 39 b0 03 28 38 60
>3a3a28	28 18 60 08 e2 20 c2 10 a0 00 00 a2 00 00 b7 e7
>3a3a38	f0 0b 20 63 03 9f 00 4e 00 c8 e8 80 f1 a9 00 9f
>3a3a48	00 4e 00 c2 20 a9 00 4e 85 e7 e2 20 a9 00 85 e9
>3a3a58	c2 20 a5 e4 85 08 d0 06 e2 20 a5 e6 f0 4d e2 20
>3a3a68	a5 e6 85 0a a5 ea a0 00 00 d7 08 d0 17 c2 20 18
>3a3a78	a5 08 69 01 00 85 0c e2 20 a5 0a 69 00 85 0e 20
>3a3a88	05 3a b0 2a a0 0d 00 c2 20 b7 08 85 0c c8 c8 e2
>3a3a98	20 b7 08 85 0e d0 06 c2 20 a5 0c f0 0e c2 20 a5
>3a3aa8	0c 85 08 e2 20 a5 0e 85 0a 80 b9 28 18 60 28 38
>3a3ab8	60 08 20 2b 3a b0 15 08 c2 20 48 a9 00 08 5b 68
>3a3ac8	28 e2 20 a9 05 8f d3 08 00 dc d4 08 c2 30 a0 09
>3a3ad8	00 b7 08 85 23 c8 c8 b7 08 85 25 e2 20 a0 00 00
>3a3ae8	b7 08 85 27 28 60 08 c2 20 18 a5 e1 69 10 00 85
>3a3af8	08 e2 20 a5 e3 69 00 85 0a c5 bc 90 1d c2 20 a5
>3a3b08	08 c5 ba 90 15 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3b18	20 a9 09 8f d3 08 00 dc d4 08 c2 20 a5 e1 85 c0
>3a3b28	e2 20 a5 e3 85 c2 c2 20 a5 08 85 e1 e2 20 a5 0a
>3a3b38	85 e3 28 60 08 e2 20 a5 27 c5 ea f0 15 08 c2 20
>3a3b48	48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 dc
>3a3b58	d4 08 c2 10 20 ee 3a c2 30 18 a5 c0 69 01 00 85
>3a3b68	08 e2 20 a5 c2 69 00 85 0a a0 00 00 a9 00 97 08
>3a3b78	c8 c0 08 00 d0 f8 a0 00 00 b7 e7 f0 10 20 63 03
>3a3b88	20 e5 39 90 08 97 08 c8 c0 08 00 d0 ec c2 20 a0
>3a3b98	09 00 a5 23 97 c0 a5 25 c8 c8 97 c0 a5 e4 a0 0d
>3a3ba8	00 97 c0 c8 c8 e2 20 a5 e6 97 c0 c2 20 a5 c0 85
>3a3bb8	e4 e2 20 a5 c2 85 e6 e2 20 a0 00 00 a5 27 97 c0
>3a3bc8	c9 02 f0 02 28 60 c2 20 a5 23 85 c0 e2 20 a5 25
>3a3bd8	85 c2 20 21 0e 20 36 0e 80 ea 08 c2 30 a5 e4 d0
>3a3be8	06 e2 20 a5 e6 f0 05 20 2b 3a b0 05 20 3c 3b 80
>3a3bf8	17 e2 20 a5 27 c9 02 f0 11 c2 30 a0 09 00 a5 23
>3a3c08	97 08 c8 c8 a5 25 97 08 28 60 a0 09 00 b7 08 85
>3a3c18	c0 c8 c8 e2 20 b7 08 85 c2 20 21 0e 20 55 0e e2
>3a3c28	20 a5 27 c9 02 f0 02 80 d0 c2 20 a5 23 85 c0 e2
>3a3c38	20 a5 25 85 c2 20 21 0e 20 36 0e 80 bc 08 20 fd
>3a3c48	19 e2 20 a7 00 20 ef 02 90 42 c2 20 a5 00 85 e7
>3a3c58	e2 20 a5 02 85 e9 20 dc 19 a7 00 f0 0d c9 24 f0
>3a3c68	14 c9 25 f0 09 20 e5 39 b0 ec a9 00 80 0c 20 dc
>3a3c78	19 a9 00 80 05 20 dc 19 a9 02 85 ea 20 1f 1b c9
>3a3c88	8c d0 06 a5 ea 09 80 85 ea 28 38 60 28 18 60 08
>3a3c98	c2 20 48 a9 00 08 5b 68 28 c2 20 a5 23 85 0c a5
>3a3ca8	25 64 0e 64 23 64 25 e2 20 64 28 a9 01 85 27 c2
>3a3cb8	20 a5 0c f0 35 10 0e e2 20 a9 80 85 28 c2 20 49
>3a3cc8	ff ff 1a 85 0c e2 20 e6 26 c2 20 46 0e 66 0c e2
>3a3cd8	20 66 25 66 24 66 23 c2 20 a5 0c c9 01 00 d0 e5
>3a3ce8	e2 20 06 28 66 25 66 24 66 23 60 08 20 21 0e c2
>3a3cf8	20 a9 01 00 85 23 a9 00 00 85 25 e2 20 af 00 4d
>3a3d08	00 c2 20 29 ff 00 85 8f a8 a2 01 00 c2 20 bf 00
>3a3d18	4d 00 85 29 a9 00 00 85 2b 20 07 20 e8 e8 88 d0
>3a3d28	eb c2 20 a9 04 00 85 29 a9 00 00 85 2b 20 07 20
>3a3d38	e2 20 af 00 4d 00 85 0c a9 00 85 0d c2 20 06 0c
>3a3d48	38 a5 23 65 0c 85 23 a5 25 69 00 00 85 25 d0 29
>3a3d58	e2 20 a5 ea 09 80 a6 23 20 e5 0b e2 20 af 00 4d
>3a3d68	00 87 c0 a0 01 00 a2 00 00 e2 20 bf 01 4d 00 97
>3a3d78	c0 e4 8f f0 19 e8 c8 80 f0 08 c2 20 48 a9 00 08
>3a3d88	5b 68 28 e2 20 a9 09 8f d3 08 00 dc d4 08 e2 20
>3a3d98	38 a5 c0 67 c0 85 08 a5 c1 69 00 85 09 a5 c2 69
>3a3da8	00 85 0a 64 0b c2 20 a0 05 00 b7 c3 85 0c e2 20
>3a3db8	c8 c8 b7 c3 85 0e 64 0f e2 20 a9 00 87 08 c2 20
>3a3dc8	18 a5 08 69 01 00 85 08 a5 0a 69 00 00 85 0a c5
>3a3dd8	0e d0 e5 a5 08 c5 0c d0 df 28 60 08 c2 20 64 08
>3a3de8	64 0a e2 20 af 00 4d 00 85 8f 64 90 a2 01 00 e2
>3a3df8	20 a7 c0 c5 8f f0 15 08 c2 20 48 a9 00 08 5b 68
>3a3e08	28 e2 20 a9 0a 8f d3 08 00 dc d4 08 c9 01 f0 3a
>3a3e18	a0 01 00 e2 20 bf 00 4d 00 85 23 64 24 64 25 64
>3a3e28	26 b7 c0 85 29 64 2a 64 2b 64 2c a5 23 c5 29 b0
>3a3e38	68 20 07 20 c2 20 18 a5 08 65 23 85 08 a5 0a 65
>3a3e48	25 85 0a e8 e8 c8 c4 8f d0 c9 e2 20 18 bf 00 4d
>3a3e58	00 85 90 65 08 85 08 a5 09 69 00 85 09 c2 20 a5
>3a3e68	0a 69 00 00 85 0a c2 20 06 08 26 0a 06 08 26 0a
>3a3e78	e2 20 38 a5 08 65 8f 85 08 a5 09 69 00 85 09 c2
>3a3e88	20 a5 0a 69 00 00 85 0a 18 a5 08 65 c0 85 08 e2
>3a3e98	20 a5 0a 65 c2 85 0a 28 60 08 c2 20 48 a9 00 08
>3a3ea8	5b 68 28 e2 20 a9 09 8f d3 08 00 dc d4 08 08 20
>3a3eb8	21 0e e2 20 a0 00 00 b7 c3 29 7f c5 27 d0 28 a5
>3a3ec8	27 48 c2 20 a5 25 48 a5 23 48 20 e3 3d 68 85 23
>3a3ed8	68 85 25 e2 20 68 85 27 c2 20 a5 23 87 08 a0 02
>3a3ee8	00 a5 25 97 08 28 60 08 c2 20 48 a9 00 08 5b 68
>3a3ef8	28 e2 20 a9 04 8f d3 08 00 dc d4 08 08 20 21 0e
>3a3f08	f4 00 00 f4 00 00 e2 20 48 20 e3 3d e2 20 68 c2
>3a3f18	20 68 68 c2 20 a7 08 85 23 a0 02 00 b7 08 85 25
>3a3f28	e2 20 a0 00 00 b7 c3 29 7f 85 27 28 60 da 0b 08
>3a3f38	08 c2 20 48 a9 00 08 5b 68 28 c2 30 a5 25 89 f0
>3a3f48	ff d0 29 89 0f 00 d0 0c a5 23 89 00 fc d0 05 20
>3a3f58	5e 31 80 2e a2 0a 00 46 25 66 23 ca d0 f9 20 5e
>3a3f68	31 e2 20 a9 4b 20 18 00 c2 20 80 16 a2 14 00 46
>3a3f78	25 66 23 ca d0 f9 20 5e 31 e2 20 a9 4d 20 18 00
>3a3f88	c2 20 28 2b fa 60 0b 08 08 c2 20 48 a9 00 08 5b
>3a3f98	68 28 c2 20 20 51 10 20 b0 3f a5 16 85 23 a5 18
>3a3fa8	85 25 20 3e 31 28 2b 60 5a 0b 08 08 c2 20 48 a9
>3a3fb8	00 08 5b 68 28 e2 20 a7 16 c9 20 d0 1c a0 02 00
>3a3fc8	b7 16 d0 06 a9 30 87 16 80 0f a0 01 00 b7 16 87
>3a3fd8	16 c2 20 e6 16 d0 02 e6 18 28 2b 7a 60 0b 08 08
>3a3fe8	c2 20 48 a9 00 08 5b 68 28 c2 20 8f 44 02 00 a2
>3a3ff8	09 00 4a ca d0 fc 18 69 bc 07 85 23 64 25 e2 20
>3a4008	a9 00 85 27 c2 20 20 5e 31 a9 2d 00 20 18 00 c2
>3a4018	20 af 44 02 00 a2 05 00 4a ca d0 fc 29 0f 00 85
>3a4028	23 64 25 e2 20 a9 00 85 27 c2 20 20 8e 3f a9 2d
>3a4038	00 20 18 00 c2 20 af 44 02 00 29 1f 00 85 23 64
>3a4048	25 e2 20 a9 00 85 27 c2 20 20 8e 3f 28 2b 60 0b
>3a4058	08 08 c2 20 48 a9 00 08 5b 68 28 c2 20 8f 44 02
>3a4068	00 a2 0b 00 4a ca d0 fc 85 23 64 25 e2 20 a9 00
>3a4078	85 27 c2 20 20 5e 31 a9 3a 00 20 18 00 c2 20 af
>3a4088	44 02 00 a2 05 00 4a ca d0 fc 29 0f 00 85 23 64
>3a4098	25 e2 20 a9 00 85 27 c2 20 20 8e 3f a9 3a 00 20
>3a40a8	18 00 c2 20 af 44 02 00 29 1f 00 85 23 64 25 e2
>3a40b8	20 a9 00 85 27 c2 20 20 8e 3f 28 2b 60 0b 08 08
>3a40c8	c2 20 48 a9 20 03 5b 68 28 c2 30 a9 00 00 8f b6
>3a40d8	08 00 8f b8 08 00 e2 20 20 1b 02 22 08 11 00 b0
>3a40e8	15 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 10 8f
>3a40f8	d3 08 00 dc d4 08 e2 20 a0 00 00 b7 18 d0 03 82
>3a4108	d2 00 c9 e5 d0 03 82 bf 00 a0 0b 00 b7 18 89 08
>3a4118	f0 03 82 c8 00 89 02 f0 03 82 ac 00 29 0f c9 0f
>3a4128	d0 03 82 a3 00 a0 00 00 b7 18 c9 20 f0 09 20 18
>3a4138	00 c8 c0 08 00 d0 f1 a0 08 00 b7 18 c9 20 f0 17
>3a4148	a9 2e 20 18 00 a0 08 00 b7 18 c9 20 f0 09 20 18
>3a4158	00 c8 c0 0b 00 d0 f1 a9 09 20 18 00 a0 0b 00 b7
>3a4168	18 89 08 d0 60 89 01 f0 05 a9 52 20 18 00 89 04
>3a4178	f0 05 a9 53 20 18 00 89 10 f0 05 a9 44 20 18 00
>3a4188	a9 09 20 18 00 c2 20 a0 1c 00 b7 18 8f 23 08 00
>3a4198	c8 c8 b7 18 8f 25 08 00 e2 20 a9 00 8f 27 08 00
>3a41a8	20 35 3f e2 20 a9 09 20 18 00 c2 20 a0 10 00 b7
>3a41b8	18 20 e5 3f e2 20 a9 20 20 18 00 c2 20 a0 0e 00
>3a41c8	b7 18 20 57 40 20 1b 02 20 32 02 22 0c 11 00 90
>3a41d8	03 82 22 ff 20 18 00 20 1b 02 28 2b 60 e2 20 29
>3a41e8	0f c9 0f f0 e3 a9 5b 20 18 00 a0 00 00 b7 18 c9
>3a41f8	20 f0 09 20 18 00 c8 c0 08 00 d0 f1 a9 5d 20 18
>3a4208	00 80 c2 0b 08 08 c2 20 48 a9 20 03 5b 68 28 c2
>3a4218	30 a9 00 d2 85 20 a9 37 00 85 22 a0 00 00 e2 20
>3a4228	a9 00 97 20 c8 c0 1e 00 d0 f8 c2 20 a9 00 d0 8f
>3a4238	0e d2 37 a9 37 00 8f 10 d2 37 af 23 08 00 8f 02
>3a4248	d2 37 af 25 08 00 8f 04 d2 37 28 2b 60 08 c2 30
>3a4258	20 fd 19 20 61 16 20 5a 04 20 0b 42 e2 20 a9 2c
>3a4268	85 37 20 00 1b b0 0f c2 20 a9 ff ff 8f 54 03 00
>3a4278	8f 56 03 00 80 17 20 dc 19 20 61 16 20 3a 04 c2
>3a4288	20 a5 23 8f 54 03 00 a5 25 8f 56 03 00 22 18 11
>3a4298	00 b0 15 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a42a8	11 8f d3 08 00 dc d4 08 28 60 08 c2 30 20 fd 19
>3a42b8	20 61 16 20 5a 04 20 0b 42 a9 ff ff 8f 54 03 00
>3a42c8	8f 56 03 00 22 18 11 00 b0 15 08 c2 20 48 a9 00
>3a42d8	08 5b 68 28 e2 20 a9 11 8f d3 08 00 dc d4 08 c2
>3a42e8	20 af 5c 03 00 85 a3 e2 20 af 5e 03 00 85 a5 a9
>3a42f8	5c 85 a2 48 da 5a 8b 0b 08 22 a2 08 00 28 2b ab
>3a4308	7a fa 68 28 60 08 c2 30 20 fd 19 20 61 16 20 5a
>3a4318	04 20 0b 42 a9 00 00 8f 54 03 00 a9 02 00 8f 56
>3a4328	03 00 20 f6 38 22 18 11 00 b0 15 08 c2 20 48 a9
>3a4338	00 08 5b 68 28 e2 20 a9 11 8f d3 08 00 dc d4 08
>3a4348	c2 20 a2 12 00 18 bf 00 d2 37 69 00 00 85 92 bf
>3a4358	02 d2 37 69 02 00 85 94 e2 20 a9 00 87 92 c2 20
>3a4368	a9 00 00 85 7a a9 02 00 85 7c a2 00 00 e2 20 a7
>3a4378	7a f0 28 c9 0d f0 12 c9 0a f0 04 9d 00 4f e8 c2
>3a4388	20 e6 7a d0 e8 e6 7c 80 e4 e2 20 a9 00 9d 00 4f
>3a4398	20 50 1f e6 7a d0 d3 e6 7c 80 cf e0 00 00 f0 0a
>3a43a8	e2 20 a9 00 9d 00 4f 20 50 1f 28 60 08 c2 30 20
>3a43b8	fd 19 20 61 16 20 5a 04 20 0b 42 e2 20 a9 2c 20
>3a43c8	d5 1a c2 20 20 61 16 20 3a 04 a5 23 8f 50 03 00
>3a43d8	a5 25 8f 52 03 00 e2 20 a9 2c c2 20 20 d5 1a 20
>3a43e8	61 16 20 3a 04 a5 23 8f 58 03 00 a5 25 8f 5a 03
>3a43f8	00 22 1c 11 00 b0 15 08 c2 20 48 a9 00 08 5b 68
>3a4408	28 e2 20 a9 12 8f d3 08 00 dc d4 08 28 60 da 5a
>3a4418	08 a2 00 00 a0 00 00 e2 20 b7 23 9d 00 04 f0 04
>3a4428	e8 c8 80 f5 28 7a fa 60 08 c2 30 20 fd 19 20 61
>3a4438	16 20 5a 04 20 0b 42 a9 00 00 85 a6 e2 20 a9 02
>3a4448	85 a8 a9 20 85 b4 c2 20 a9 00 00 85 ab a9 ff ff
>3a4458	85 a9 c2 20 a9 00 00 85 55 85 57 a9 ff ff 85 59
>3a4468	a9 ff 7f 85 5b 20 6e 12 e2 20 a9 80 85 b4 c2 20
>3a4478	c6 ab 18 a9 00 00 8f 50 03 00 65 ab 8f 58 03 00
>3a4488	a9 02 00 8f 52 03 00 69 00 00 8f 5a 03 00 22 1c
>3a4498	11 00 b0 15 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a44a8	a9 12 8f d3 08 00 dc d4 08 28 60 08 c2 30 20 fd
>3a44b8	19 20 61 16 20 5a 04 20 16 44 22 04 11 00 b0 15
>3a44c8	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 13 8f d3
>3a44d8	08 00 dc d4 08 28 60 da 08 e2 20 c9 61 90 08 c9
>3a44e8	7b b0 04 29 df 80 13 c9 20 90 13 a2 00 00 df 0a
>3a44f8	45 3a f0 0a e8 e0 0f 00 d0 f4 28 38 fa 6b 28 18
>3a4508	fa 6b 2a 2b 2c 2f 3a 3b 3c 3d 3e 3f 5c 5b 5d 7c
>3a4518	22 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30 20 61
>3a4528	16 20 5a 04 20 16 44 22 10 11 00 b0 15 08 c2 20
>3a4538	48 a9 00 08 5b 68 28 e2 20 a9 14 8f d3 08 00 dc
>3a4548	d4 08 e2 20 a9 2c 20 d5 1a c2 20 20 61 16 20 5a
>3a4558	04 ad 38 03 85 08 ad 3a 03 85 0a e2 20 a2 00 00
>3a4568	a9 20 95 7e e8 e0 0b 00 d0 f8 a2 00 00 a0 00 00
>3a4578	b7 23 f0 56 c9 2e f0 26 22 df 44 3a b0 15 08 c2
>3a4588	20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00
>3a4598	dc d4 08 95 7e c8 e8 c0 08 00 d0 d4 80 01 c8 a2
>3a45a8	08 00 b7 23 f0 24 22 df 44 3a b0 15 08 c2 20 48
>3a45b8	a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00 dc d4
>3a45c8	08 95 7e c8 e8 c0 0b 00 d0 d8 a2 00 00 a0 00 00
>3a45d8	b5 7e 97 08 e8 c8 c0 0b 00 d0 f5 22 14 11 00 b0
>3a45e8	15 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 15 8f
>3a45f8	d3 08 00 dc d4 08 28 60 5c bd 5f 3a 5c 0e 5e 3a
>3a4608	5c be 5f 3a 5c 3a 4f 3a 5c 97 4f 3a 5c ca 4e 3a
>3a4618	5c 50 4e 3a 5c cd 53 3a 5c bb 4a 3a 5c e8 4d 3a
>3a4628	5c a3 4d 3a 5c 2d 4d 3a 5c cc 5e 3a 5c c9 4b 3a
>3a4638	5c 1f 4a 3a 5c 47 5f 3a 5c f7 4a 3a 5c c0 5f 3a
>3a4648	5c b9 5f 3a 5c e6 4c 3a 5c c1 5f 3a 18 fb c2 20
>3a4658	a9 ff fe 1b 58 5c 61 46 3a c2 30 22 1f 4a 3a 20
>3a4668	08 00 20 0c 00 8b e2 20 a9 00 48 ab a2 00 4f 20
>3a4678	72 03 ab 22 04 46 3a 22 0c 46 3a 80 e2 08 8b e2
>3a4688	20 a9 3a 48 ab c2 10 a2 98 46 20 9c 02 ab 28 6b
>3a4698	41 20 3c 73 74 61 72 74 3e 20 3c 61 73 73 65 6d
>3a46a8	62 6c 79 3e 0d 20 20 41 73 73 65 6d 62 6c 65 20
>3a46b8	61 20 70 72 6f 67 72 61 6d 0d 0d 43 20 3c 73 74
>3a46c8	61 72 74 31 3e 20 3c 73 74 61 72 74 32 3e 20 5b
>3a46d8	6c 65 6e 20 28 31 20 69 66 20 62 6c 61 6e 6b 29
>3a46e8	5d 0d 20 20 43 6f 6d 70 61 72 65 20 74 6f 20 73
>3a46f8	65 63 74 69 6f 6e 73 20 6f 66 20 6d 65 6d 6f 72
>3a4708	79 0d 0d 44 20 3c 73 74 61 72 74 3e 20 5b 65 6e
>3a4718	64 5d 0d 20 20 44 69 73 61 73 73 65 6d 62 6c 65
>3a4728	20 61 20 70 72 6f 67 72 61 6d 0d 0d 46 20 3c 73
>3a4738	74 61 72 74 3e 20 3c 65 6e 64 3e 20 3c 62 79 74
>3a4748	65 3e 0d 20 20 46 69 6c 6c 20 61 20 62 6c 6f 63
>3a4758	6b 20 6f 66 20 6d 65 6d 6f 72 79 20 77 69 74 68
>3a4768	20 61 20 62 79 74 65 0d 0d 47 20 5b 61 64 64 72
>3a4778	65 73 73 5d 0d 20 20 53 74 61 72 74 20 65 78 65
>3a4788	63 75 74 69 6f 6e 20 61 74 20 61 20 6c 6f 63 61
>3a4798	74 69 6f 6e 0d 0d 4a 20 5b 61 64 64 72 65 73 73
>3a47a8	5d 20 2d 20 4a 75 6d 70 20 74 6f 20 61 20 6c 6f
>3a47b8	63 61 74 69 6f 6e 20 69 6e 20 6d 65 6d 6f 72 79
>3a47c8	0d 20 20 4a 75 6d 70 20 74 6f 20 61 20 6c 6f 63
>3a47d8	61 74 69 6f 6e 20 69 6e 20 6d 65 6d 6f 72 79 0d
>3a47e8	0d 48 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e
>3a47f8	20 3c 62 79 74 65 3e 20 5b 62 79 74 65 5d 2e 2e
>3a4808	0d 20 20 48 75 6e 74 20 66 6f 72 20 76 61 6c 75
>3a4818	65 73 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d 4c 20
>3a4828	20 20 20 20 4c 4f 41 44 20 20 20 20 20 20 20 20
>3a4838	20 22 46 69 6c 65 22 20 5b 64 65 73 74 69 6e 61
>3a4848	74 69 6f 6e 5d 0d 4d 20 3c 73 74 61 72 74 3e 20
>3a4858	5b 65 6e 64 5d 0d 20 20 44 75 6d 70 20 74 68 65
>3a4868	20 76 61 6c 75 65 20 69 6e 20 6d 65 6d 6f 72 79
>3a4878	0d 0d 52 20 2d 20 44 69 73 70 6c 61 79 20 74 68
>3a4888	65 20 76 61 6c 75 65 73 20 6f 66 20 74 68 65 20
>3a4898	72 65 67 69 73 74 65 72 73 0d 0d 3b 20 3c 50 43
>3a48a8	3e 20 3c 41 3e 20 3c 58 3e 20 3c 59 3e 20 3c 53
>3a48b8	50 3e 20 3c 44 42 52 3e 20 3c 44 50 3e 20 3c 4e
>3a48c8	56 4d 58 44 49 5a 43 3e 0d 20 20 43 68 61 6e 67
>3a48d8	65 20 74 68 65 20 63 6f 6e 74 65 6e 74 73 20 6f
>3a48e8	66 20 74 68 65 20 72 65 67 69 73 74 65 72 73 0d
>3a48f8	0d 53 20 20 20 20 20 53 41 56 45 20 20 20 20 20
>3a4908	20 20 20 20 22 46 69 6c 65 22 20 3c 73 74 61 72
>3a4918	74 3e 20 3c 65 6e 64 3e 0d 54 20 3c 73 74 61 72
>3a4928	74 3e 20 3c 65 6e 64 3e 20 3c 64 65 73 74 69 6e
>3a4938	61 74 69 6f 6e 3e 0d 20 20 54 72 61 6e 73 66 65
>3a4948	72 20 28 63 6f 70 79 29 20 64 61 74 61 20 77 69
>3a4958	74 68 69 6e 20 6d 65 6d 6f 72 79 0d 0d 57 20 3c
>3a4968	62 79 74 65 3e 0d 20 20 53 65 74 20 74 68 65 20
>3a4978	72 65 67 69 73 74 65 72 20 77 69 64 74 68 20 66
>3a4988	6c 61 67 73 20 66 6f 72 20 74 68 65 20 64 69 73
>3a4998	61 73 73 65 6d 62 6c 65 72 0d 0d 58 20 2d 20 52
>3a49a8	65 74 75 72 6e 20 74 6f 20 42 41 53 49 43 0d 0d
>3a49b8	3e 20 3c 73 74 61 72 74 3e 20 3c 62 79 74 65 3e
>3a49c8	20 5b 62 79 74 65 5d 2e 2e 2e 0d 20 20 45 64 69
>3a49d8	74 20 64 61 74 61 20 69 6e 20 6d 65 6d 6f 72 79
>3a49e8	0d 0d 3f 20 2d 20 44 69 73 70 6c 61 79 20 61 20
>3a49f8	73 68 6f 72 74 20 68 65 6c 70 20 73 63 72 65 65
>3a4a08	6e 0d 0d 00 08 08 c2 20 48 a9 48 08 5b 68 28 e2
>3a4a18	20 a5 0d 85 4e 28 6b 08 e2 20 48 a9 3a 48 ab 68
>3a4a28	28 a2 fe 5f 20 9c 02 e2 20 a9 3b 20 18 00 a9 20
>3a4a38	20 18 00 c2 30 08 e2 20 48 a9 00 48 ab 68 28 a0
>3a4a48	03 00 a2 42 02 20 2b 02 c2 20 a9 20 00 20 18 00
>3a4a58	af 44 02 00 20 ac 02 a9 20 00 20 18 00 af 46 02
>3a4a68	00 20 ac 02 a9 20 00 20 18 00 af 48 02 00 20 ac
>3a4a78	02 a9 20 00 20 18 00 af 4a 02 00 20 ac 02 a9 20
>3a4a88	00 20 18 00 af 4e 02 00 20 c6 02 a9 20 00 20 18
>3a4a98	00 20 18 00 af 4c 02 00 20 ac 02 a9 20 00 20 18
>3a4aa8	00 08 e2 20 ad 4f 02 22 17 5d 3a 28 20 1b 02 20
>3a4ab8	1b 02 6b 08 0b 08 c2 20 48 a9 48 08 5b 68 28 e2
>3a4ac8	20 a5 15 87 0d e2 20 a5 0f c5 13 d0 0e c2 20 a5
>3a4ad8	0d c5 11 d0 06 20 1b 02 2b 28 6b c2 20 18 a5 0d
>3a4ae8	69 01 00 85 0d e2 20 a5 0e 69 00 85 0e 80 d0 08
>3a4af8	0b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 0f c5
>3a4b08	17 90 45 c2 20 a5 0d c5 15 90 3d e2 20 a7 0d 87
>3a4b18	15 a5 0f c5 13 d0 0b c2 20 a5 0d c5 11 d0 03 4c
>3a4b28	ae 4b c2 20 18 a5 0d 69 01 00 85 0d e2 20 a5 0e
>3a4b38	69 00 85 0e c2 20 18 a5 15 69 01 00 85 15 e2 20
>3a4b48	a5 16 69 00 85 16 80 c3 c2 20 38 a5 11 e5 0d 85
>3a4b58	19 e2 20 a5 13 e5 0f 85 1b c2 20 18 a5 19 65 15
>3a4b68	85 15 e2 20 a5 1b 65 17 85 17 e2 20 a7 11 87 15
>3a4b78	a5 13 c5 0f d0 0a c2 20 a5 11 c5 0d d0 02 80 26
>3a4b88	c2 20 38 a5 11 e9 01 00 85 11 e2 20 a5 12 e9 00
>3a4b98	85 12 c2 20 38 a5 15 e9 01 00 85 15 e2 20 a5 16
>3a4ba8	e9 00 85 16 80 c4 20 1b 02 2b 28 6b 08 e2 20 c9
>3a4bb8	21 90 0b c9 7f 90 04 c9 a0 90 03 28 38 6b 28 18
>3a4bc8	6b 08 8b 0b 08 c2 20 48 a9 48 08 5b 68 28 e2 20
>3a4bd8	a9 00 8f b6 08 00 a5 31 c9 02 b0 16 c9 01 90 20
>3a4be8	c2 20 18 a5 0d 69 00 01 85 11 e2 20 a5 0f 69 00
>3a4bf8	85 13 c2 20 a5 0d 85 32 e2 20 a5 0f 85 34 80 12
>3a4c08	c2 20 18 a5 32 69 00 01 85 11 e2 20 a5 34 69 00
>3a4c18	85 13 e2 20 a0 00 00 c2 20 a5 32 85 19 e2 20 a5
>3a4c28	34 85 1b e2 20 a7 19 22 b4 4b 3a b0 02 a9 3f 99
>3a4c38	7e 08 c2 20 18 a5 19 69 01 00 85 19 e2 20 a5 1b
>3a4c48	69 00 85 1b c8 c0 08 00 90 db a9 00 99 7e 08 a9
>3a4c58	3e 20 18 00 a9 20 20 18 00 e2 20 a5 34 20 c6 02
>3a4c68	a9 3a 20 18 00 c2 20 a5 32 20 ac 02 c2 20 a9 08
>3a4c78	00 85 47 e2 20 a9 20 20 18 00 a7 32 20 c6 02 22
>3a4c88	f6 5c 3a e2 20 c6 47 d0 ea a9 20 20 18 00 a9 20
>3a4c98	20 18 00 08 e2 20 48 a9 00 48 ab 68 28 a2 7e 08
>3a4ca8	20 9c 02 20 1b 02 20 32 02 a5 34 c5 13 90 0f c2
>3a4cb8	20 a5 32 c5 11 90 07 20 1b 02 2b ab 28 6b 4c 1a
>3a4cc8	4c 08 8d 92 08 e2 20 bd 00 00 99 00 00 ad 92 08
>3a4cd8	f0 0a c8 e8 e8 e8 e8 ce 92 08 80 eb 28 6b 08 0b
>3a4ce8	8b 08 c2 20 48 a9 48 08 5b 68 28 08 e2 20 48 a9
>3a4cf8	00 48 ab 68 28 c2 30 a5 0d 85 32 a5 0f 85 34 e2
>3a4d08	20 a5 31 3a 85 47 a2 59 08 a0 7e 08 22 c9 4c 3a
>3a4d18	a0 00 00 b9 7e 08 87 32 22 f6 5c 3a c8 c4 47 d0
>3a4d28	f2 ab 2b 28 6b 08 0b 8b 08 c2 20 48 a9 48 08 5b
>3a4d38	68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10
>3a4d48	a5 31 3a 3a 85 47 a2 5d 08 a0 7e 08 22 c9 4c 3a
>3a4d58	c2 20 a5 0d 85 32 a5 0f 85 34 c2 20 a5 34 c5 13
>3a4d68	d0 06 a5 32 c5 11 f0 2c e2 20 a0 00 00 b7 32 d9
>3a4d78	7e 08 d0 1a c8 c4 47 d0 f4 c2 20 a5 32 85 4a a5
>3a4d88	34 85 4c 22 a0 57 3a e2 20 a9 20 20 18 00 22 f6
>3a4d98	5c 3a 80 c6 20 1b 02 ab 2b 28 6b 08 c2 20 48 a9
>3a4da8	48 08 5b 68 28 e2 20 a5 31 f0 0e c2 30 a5 0d 8f
>3a4db8	40 02 00 a5 0f 8f 42 02 00 af 46 02 00 aa af 48
>3a4dc8	02 00 a8 af 4a 02 00 1b af 4c 02 00 5b e2 20 a9
>3a4dd8	3a 48 a9 4d 48 a9 e3 48 4c 1a 4e ea 5c 04 00 3a
>3a4de8	08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 31 f0 c9
>3a4df8	c2 30 a5 0d 8f 40 02 00 a5 0f 8f 42 02 00 af 46
>3a4e08	02 00 aa af 48 02 00 a8 af 4a 02 00 1b af 4c 02
>3a4e18	00 5b e2 20 af 4e 02 00 48 ab a9 5c 8f a2 08 00
>3a4e28	af 42 02 00 8f a5 08 00 af 41 02 00 8f a4 08 00
>3a4e38	af 40 02 00 8f a3 08 00 af 4f 02 00 48 c2 20 af
>3a4e48	44 02 00 28 5c a2 08 00 08 0b 8b 08 e2 20 48 a9
>3a4e58	3a 48 ab 68 28 08 c2 20 48 a9 48 08 5b 68 28 c2
>3a4e68	10 e2 20 a5 31 c9 02 f0 0c c9 03 d0 11 c2 20 a5
>3a4e78	15 85 47 80 11 c2 20 a9 01 00 85 47 80 08 a2 c2
>3a4e88	5f 20 9c 02 80 35 a5 0d 85 4a a5 0f 85 4c a0 00
>3a4e98	00 e2 20 a7 4a d7 11 f0 09 22 a0 57 3a a9 20 20
>3a4ea8	18 00 c2 20 18 a5 4a 69 01 00 85 4a a5 4c 69 00
>3a4eb8	00 85 4c c8 c4 47 d0 d9 20 1b 02 20 1b 02 ab 2b
>3a4ec8	28 6b 08 0b 8b 08 e2 20 48 a9 00 48 ab 68 28 08
>3a4ed8	c2 20 48 a9 48 08 5b 68 28 e2 20 a5 31 f0 4f a6
>3a4ee8	0d 8e 40 02 a6 0f 8e 42 02 c9 01 f0 41 a6 11 8e
>3a4ef8	44 02 c9 02 f0 38 a6 15 8e 46 02 c9 03 f0 2f a6
>3a4f08	19 8e 48 02 c9 04 f0 26 a6 1d 8e 4a 02 c9 05 f0
>3a4f18	1d e2 10 a6 21 8e 4e 02 c9 06 f0 12 c2 10 a6 25
>3a4f28	8e 4c 02 c9 07 f0 07 e2 10 a6 29 8e 4f 02 ab 2b
>3a4f38	28 6b 08 0b 8b 08 c2 20 48 a9 48 08 5b 68 28 e2
>3a4f48	20 c2 10 a2 00 00 bf 2f 60 3a f0 18 c7 08 f0 03
>3a4f58	e8 80 f3 c2 20 8a 0a aa bf 70 4f 3a 8f 2f 08 00
>3a4f68	22 94 4f 3a ab 2b 28 6b 10 46 18 46 1c 46 20 46
>3a4f78	24 46 28 46 2c 46 30 46 34 46 38 46 14 46 3c 46
>3a4f88	40 46 44 46 0c 4a 48 46 4c 46 85 46 6c 2f 08 08
>3a4f98	8b 0b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 31
>3a4fa8	c9 02 b0 03 4c 3d 51 c2 20 a5 0d 85 32 a5 0f 85
>3a4fb8	34 c2 20 22 3f 53 3a c9 ff ff f0 10 85 54 e2 20
>3a4fc8	a5 31 c9 03 f0 36 a9 13 85 4f 80 4c 20 1b 02 08
>3a4fd8	e2 20 48 a9 3a 48 ab 68 28 c2 10 a2 74 51 20 9c
>3a4fe8	02 4c 3d 51 20 1b 02 08 e2 20 48 a9 3a 48 ab 68
>3a4ff8	28 c2 10 a2 83 51 20 9c 02 4c 3d 51 e2 20 22 75
>3a5008	53 3a c9 ff f0 de 85 4f c9 03 f0 62 c9 0b f0 5e
>3a5018	c9 13 f0 04 c9 08 f0 00 22 6d 52 3a b0 03 4c 06
>3a5028	51 87 32 22 f6 5c 3a 08 e2 20 48 a9 00 48 ab 68
>3a5038	28 c2 20 a5 32 85 56 a5 34 85 58 e2 20 a5 4f c9
>3a5048	12 f0 6c c9 16 f0 68 c9 14 f0 7c 29 3f c9 02 d0
>3a5058	03 4c 34 51 c2 20 29 ff 00 aa e2 20 bf 3c 5c 3a
>3a5068	c9 03 f0 57 c9 02 f0 5f c9 01 f0 67 80 71 c2 20
>3a5078	a5 54 c9 b4 58 f0 26 c9 18 59 f0 2a c9 98 58 f0
>3a5088	1c c9 9c 58 f0 17 c9 a4 58 f0 12 c9 8c 58 f0 0d
>3a5098	c9 a0 58 f0 08 c9 88 58 f0 03 4c 20 50 e2 20 a9
>3a50a8	12 85 4f 4c 20 50 e2 20 a9 16 85 4f 4c 20 50 22
>3a50b8	b0 51 3a 90 60 c9 02 f0 0e 80 18 a0 02 00 b9 98
>3a50c8	08 97 56 22 f6 5c 3a a0 01 00 b9 98 08 97 56 22
>3a50d8	f6 5c 3a a0 00 00 b9 98 08 97 56 22 f6 5c 3a e2
>3a50e8	20 a9 41 20 18 00 a9 20 20 18 00 a6 32 86 4a a6
>3a50f8	34 86 4c 22 a0 57 3a a9 20 20 18 00 80 37 20 1b
>3a5108	02 08 e2 20 48 a9 3a 48 ab 68 28 c2 10 a2 41 51
>3a5118	20 9c 02 80 20 20 1b 02 08 e2 20 48 a9 3a 48 ab
>3a5128	68 28 c2 10 a2 91 51 20 9c 02 80 09 a5 4f 29 c0
>3a5138	d0 95 4c db 50 2b ab 28 6b 41 64 64 72 65 73 73
>3a5148	69 6e 67 20 6d 6f 64 65 20 6e 6f 74 20 64 65 66
>3a5158	69 6e 65 64 20 66 6f 72 20 74 68 61 74 20 69 6e
>3a5168	73 74 72 75 63 74 69 6f 6e 2e 0d 00 42 61 64 20
>3a5178	6d 6e 65 6d 6f 6e 69 63 2e 0d 00 42 61 64 20 6f
>3a5188	70 65 72 61 6e 64 2e 0d 00 52 65 6c 61 74 69 76
>3a5198	65 20 6f 66 66 73 65 74 20 69 73 20 74 6f 6f 20
>3a51a8	6c 61 72 67 65 2e 0d 00 08 0b 08 c2 20 48 a9 48
>3a51b8	08 5b 68 28 e2 20 a5 4f c9 12 f0 0a c2 20 18 a5
>3a51c8	32 69 02 00 80 08 c2 20 18 a5 32 69 01 00 85 4a
>3a51d8	a5 34 69 00 00 85 4c 38 a5 50 e5 4a 85 50 a5 52
>3a51e8	e5 4c 85 52 e2 20 a5 4f c9 16 f0 1e a5 50 30 0c
>3a51f8	a5 51 d0 2a a5 52 d0 26 a9 01 80 26 a5 51 c9 ff
>3a5208	d0 1c a5 52 c9 ff d0 16 80 18 a5 51 30 06 a5 52
>3a5218	d0 0c 80 0e a5 52 c9 ff d0 04 a9 02 80 04 2b 28
>3a5228	18 6b 2b 28 38 6b 08 0b c2 10 da 08 c2 20 48 a9
>3a5238	48 08 5b 68 28 e2 20 a2 00 00 df 00 d0 3a f0 08
>3a5248	e8 e0 10 00 f0 1b 80 f2 c2 20 06 50 26 52 06 50
>3a5258	26 52 06 50 26 52 06 50 26 52 e2 20 8a 05 50 85
>3a5268	50 fa 2b 28 6b 0b 8b 08 c2 20 48 a9 48 08 5b 68
>3a5278	28 08 e2 20 48 a9 3a 48 ab 68 28 e2 20 a5 4f 29
>3a5288	3f 85 4a c2 30 a2 00 00 a0 00 00 bd 3a 59 f0 1b
>3a5298	c5 54 d0 0d e2 20 b9 3c 5b 29 3f c5 4a f0 07 c2
>3a52a8	20 e8 e8 c8 80 e5 98 38 ab 2b 6b 18 ab 2b 6b 08
>3a52b8	0b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 c2 10 a0
>3a52c8	00 00 64 50 64 52 b7 03 f0 11 c9 64 f0 19 48 b7
>3a52d8	36 85 4a 68 c5 4a d0 0b c8 80 eb b7 36 d0 04 2b
>3a52e8	28 38 6b 2b 28 18 6b e2 20 b7 36 c9 3a b0 04 c9
>3a52f8	30 b0 14 c9 47 b0 04 c9 41 b0 0c c9 67 b0 e4 c9
>3a5308	61 b0 02 80 de 29 df 22 2e 52 3a 80 cb 0b 08 c2
>3a5318	20 48 a9 48 08 5b 68 28 a0 00 00 e2 20 b7 03 f0
>3a5328	03 c8 80 f9 c2 20 c8 5a 68 18 65 03 85 03 a5 05
>3a5338	69 00 00 85 05 2b 6b 0b 08 c2 20 48 a9 48 08 5b
>3a5348	68 28 c2 20 a5 11 85 36 a5 13 85 38 a9 c8 57 85
>3a5358	03 a9 3a 00 85 05 22 b7 52 3a b0 0d 22 15 53 3a
>3a5368	a7 03 d0 f2 a9 ff ff 80 02 a5 03 2b 6b 08 0b 08
>3a5378	c2 20 48 a9 48 08 5b 68 28 c2 30 a5 15 85 36 a5
>3a5388	17 85 38 a9 54 5c 85 03 a9 3a 00 85 05 22 b7 52
>3a5398	3a b0 22 22 15 53 3a c2 20 18 a5 03 69 01 00 85
>3a53a8	03 a5 05 69 00 00 85 05 e2 20 a7 03 d0 df c2 20
>3a53b8	a9 ff ff 80 0d 22 15 53 3a e2 20 a7 03 c2 20 29
>3a53c8	ff 00 2b 28 6b 08 8b 0b 08 c2 20 48 a9 48 08 5b
>3a53d8	68 28 e2 20 a9 00 8f b6 08 00 a5 31 c9 02 b0 16
>3a53e8	c9 01 90 20 c2 20 18 a5 0d 69 00 01 85 11 e2 20
>3a53f8	a5 0f 69 00 85 13 c2 20 a5 0d 85 32 e2 20 a5 0f
>3a5408	85 34 80 12 c2 20 18 a5 32 69 00 01 85 11 e2 20
>3a5418	a5 34 69 00 85 13 22 39 54 3a e2 20 a5 34 c5 13
>3a5428	90 f4 c2 20 a5 32 c5 11 90 ec 20 1b 02 2b ab 28
>3a5438	6b 08 0b e2 20 a9 41 20 18 00 a9 20 20 18 00 08
>3a5448	c2 20 48 a9 7a 08 5b 68 28 c2 20 a5 00 85 18 e2
>3a5458	20 a5 02 85 1a 22 a0 57 3a a9 20 20 18 00 c2 20
>3a5468	18 a5 00 69 01 00 85 18 e2 20 a5 02 69 00 85 1a
>3a5478	e2 20 c2 10 a7 00 c9 c2 d0 0b 48 a7 18 49 ff 2f
>3a5488	96 08 00 80 0b c9 e2 d0 0c 48 a7 18 0f 96 08 00
>3a5498	8f 96 08 00 68 c2 20 29 ff 00 0a aa bf 3a 59 3a
>3a54a8	aa 22 1a 57 3a e2 20 a7 00 aa bf 3c 5b 3a 22 f6
>3a54b8	5c 3a 22 c7 54 3a 20 1b 02 20 32 02 2b 28 6b 08
>3a54c8	e2 20 48 29 3f 0a c2 10 aa 68 7c d5 54 05 55 20
>3a54d8	55 27 55 4c 55 53 55 6e 55 90 55 a1 55 de 55 e6
>3a54e8	55 f7 55 08 56 0f 56 34 56 61 56 cd 55 b2 55 7f
>3a54f8	55 54 56 5e 56 72 56 a1 56 4f 56 b2 56 a9 28 20
>3a5508	18 00 22 c9 56 3a a9 2c 20 18 00 a9 58 20 18 00
>3a5518	a9 29 20 18 00 4c c3 56 22 c9 56 3a 4c c3 56 e2
>3a5528	20 48 a9 23 20 18 00 68 29 c0 c9 00 f0 0f 4a 4a
>3a5538	2f 96 08 00 d0 07 22 d3 56 3a 4c c3 56 22 c9 56
>3a5548	3a 4c c3 56 22 d3 56 3a 4c c3 56 a9 28 20 18 00
>3a5558	22 c9 56 3a a9 29 20 18 00 a9 2c 20 18 00 a9 59
>3a5568	20 18 00 4c c3 56 22 c9 56 3a a9 2c 20 18 00 a9
>3a5578	58 20 18 00 4c c3 56 22 c9 56 3a a9 2c 20 18 00
>3a5588	a9 59 20 18 00 4c c3 56 22 d3 56 3a a9 2c 20 18
>3a5598	00 a9 59 20 18 00 4c c3 56 22 d3 56 3a a9 2c 20
>3a55a8	18 00 a9 58 20 18 00 4c c3 56 a9 28 20 18 00 22
>3a55b8	d3 56 3a a9 2c 20 18 00 a9 58 20 18 00 a9 29 20
>3a55c8	18 00 4c c3 56 a9 28 20 18 00 22 c9 56 3a a9 29
>3a55d8	20 18 00 4c c3 56 a9 41 20 18 00 4c c7 56 22 c9
>3a55e8	56 3a a9 2c 20 18 00 a9 53 20 18 00 4c c3 56 a9
>3a55f8	5b 20 18 00 22 c9 56 3a a9 5d 20 18 00 4c c3 56
>3a5608	22 e1 56 3a 4c c7 56 a9 28 20 18 00 22 c9 56 3a
>3a5618	a9 2c 20 18 00 a9 53 20 18 00 a9 29 20 18 00 a9
>3a5628	2c 20 18 00 a9 59 20 18 00 4c c3 56 a9 5b 20 18
>3a5638	00 22 c9 56 3a a9 5d 20 18 00 a9 2c 20 18 00 a9
>3a5648	59 20 18 00 4c c3 56 a0 02 00 80 03 a0 01 00 22
>3a5658	47 57 3a 4c c7 56 4c c7 56 22 e1 56 3a a9 2c 20
>3a5668	18 00 a9 58 20 18 00 4c c7 56 a9 23 20 18 00 8b
>3a5678	a5 02 48 ab a6 00 e8 a0 01 00 22 2b 02 3a a9 2c
>3a5688	20 18 00 a9 23 20 18 00 a6 00 a0 01 00 22 2b 02
>3a5698	3a ab 22 f6 5c 3a 4c c3 56 a9 28 20 18 00 22 d3
>3a56a8	56 3a a9 29 20 18 00 4c c3 56 a9 5b 20 18 00 22
>3a56b8	d3 56 3a a9 5d 20 18 00 4c c3 56 22 f6 5c 3a 28
>3a56c8	6b 08 e2 20 a7 00 20 c6 02 28 6b 08 c2 30 a7 00
>3a56d8	20 ac 02 22 f6 5c 3a 28 6b 08 8b 0b c2 30 5a 08
>3a56e8	c2 20 48 a9 7a 08 5b 68 28 08 e2 20 48 a9 00 48
>3a56f8	ab 68 28 e2 20 a0 00 00 a7 00 99 92 08 22 f6 5c
>3a5708	3a c8 c0 03 00 d0 f1 22 a0 57 3a c2 30 7a 2b ab
>3a5718	28 6b 08 8b e2 20 c2 10 08 e2 20 48 a9 3a 48 ab
>3a5728	68 28 bd 00 00 20 18 00 e8 bd 00 00 20 18 00 e8
>3a5738	bd 00 00 20 18 00 e8 a9 20 20 18 00 ab 28 6b 08
>3a5748	0b 08 c2 20 48 a9 7a 08 5b 68 28 e2 20 c0 02 00
>3a5758	f0 14 a7 00 85 18 30 06 64 19 64 1a 80 1e a9 ff
>3a5768	85 19 85 1a 80 16 a7 00 85 18 22 f6 5c 3a a7 00
>3a5778	85 19 30 04 64 1a 80 04 a9 ff 85 1a c2 20 38 a5
>3a5788	00 65 18 85 18 e2 20 a5 02 65 1a 85 1a 22 a0 57
>3a5798	3a 22 f6 5c 3a 2b 28 6b 08 0b c2 20 48 08 c2 20
>3a57a8	48 a9 48 08 5b 68 28 e2 20 a5 4c 20 c6 02 e2 20
>3a57b8	a9 3a 20 18 00 c2 20 a5 4a 20 ac 02 68 2b 28 6b
>3a57c8	4f 52 41 00 41 4e 44 00 45 4f 52 00 41 44 43 00
>3a57d8	53 54 41 00 4c 44 41 00 43 4d 50 00 53 42 43 00
>3a57e8	41 53 4c 00 52 4f 4c 00 4c 53 52 00 52 4f 52 00
>3a57f8	53 54 58 00 4c 44 58 00 44 45 43 00 49 4e 43 00
>3a5808	42 49 54 00 4a 4d 50 00 53 54 59 00 4c 44 59 00
>3a5818	43 50 59 00 43 50 58 00 42 52 4b 00 4a 53 52 00
>3a5828	52 54 49 00 52 54 53 00 50 48 50 00 50 4c 50 00
>3a5838	50 48 41 00 50 4c 41 00 44 45 59 00 54 41 59 00
>3a5848	49 4e 59 00 49 4e 58 00 43 4c 43 00 53 45 43 00
>3a5858	43 4c 49 00 53 45 49 00 54 59 41 00 43 4c 56 00
>3a5868	43 4c 44 00 53 45 44 00 54 58 41 00 54 58 53 00
>3a5878	54 41 58 00 54 53 58 00 44 45 58 00 4e 4f 50 00
>3a5888	42 50 4c 00 42 4d 49 00 42 56 43 00 42 56 53 00
>3a5898	42 43 43 00 42 43 53 00 42 4e 45 00 42 45 51 00
>3a58a8	54 53 42 00 54 52 42 00 53 54 5a 00 42 52 41 00
>3a58b8	50 48 59 00 50 4c 59 00 50 48 58 00 50 4c 58 00
>3a58c8	50 48 44 00 50 4c 44 00 50 48 4b 00 52 54 4c 00
>3a58d8	50 48 42 00 50 4c 42 00 57 41 49 00 58 42 41 00
>3a58e8	54 43 53 00 54 53 43 00 54 43 44 00 54 44 43 00
>3a58f8	54 58 59 00 54 59 58 00 53 54 50 00 58 43 45 00
>3a5908	43 4f 50 00 4a 53 4c 00 57 44 4d 00 50 45 52 00
>3a5918	42 52 4c 00 52 45 50 00 53 45 50 00 4d 56 50 00
>3a5928	4d 56 4e 00 50 45 49 00 50 45 41 00 4a 4d 4c 00
>3a5938	00 00 20 58 c8 57 08 59 c8 57 a8 58 c8 57 e8 57
>3a5948	c8 57 30 58 c8 57 e8 57 c8 58 a8 58 c8 57 e8 57
>3a5958	c8 57 88 58 c8 57 c8 57 c8 57 ac 58 c8 57 e8 57
>3a5968	c8 57 50 58 c8 57 04 58 e8 58 ac 58 c8 57 e8 57
>3a5978	c8 57 24 58 cc 57 0c 59 cc 57 08 58 cc 57 ec 57
>3a5988	cc 57 34 58 cc 57 ec 57 cc 58 08 58 cc 57 ec 57
>3a5998	cc 57 8c 58 cc 57 cc 57 cc 57 08 58 cc 57 ec 57
>3a59a8	cc 57 54 58 cc 57 00 58 ec 58 08 58 cc 57 ec 57
>3a59b8	cc 57 28 58 d0 57 10 59 d0 57 24 59 d0 57 f0 57
>3a59c8	d0 57 38 58 d0 57 f0 57 d0 58 0c 58 d0 57 f0 57
>3a59d8	d0 57 90 58 d0 57 d0 57 d0 57 28 59 d0 57 f0 57
>3a59e8	d0 57 58 58 d0 57 b8 58 f0 58 34 59 d0 57 f0 57
>3a59f8	d0 57 2c 58 d4 57 14 59 d4 57 b0 58 d4 57 f4 57
>3a5a08	d4 57 3c 58 d4 57 f4 57 d4 58 0c 58 d4 57 f4 57
>3a5a18	d4 57 94 58 d4 57 d4 57 d4 57 b0 58 d4 57 f4 57
>3a5a28	d4 57 5c 58 d4 57 bc 58 f4 58 0c 58 d4 57 f4 57
>3a5a38	d4 57 b4 58 d8 57 18 59 d8 57 10 58 d8 57 f8 57
>3a5a48	d8 57 40 58 08 58 70 58 d8 58 10 58 d8 57 f8 57
>3a5a58	d8 57 98 58 d8 57 d8 57 d8 57 10 58 d8 57 f8 57
>3a5a68	d8 57 60 58 d8 57 74 58 f8 58 b0 58 d8 57 b0 58
>3a5a78	d8 57 14 58 dc 57 fc 57 dc 57 14 58 dc 57 fc 57
>3a5a88	dc 57 44 58 dc 57 78 58 dc 58 14 58 dc 57 fc 57
>3a5a98	dc 57 9c 58 dc 57 dc 57 dc 57 14 58 dc 57 fc 57
>3a5aa8	dc 57 64 58 dc 57 7c 58 fc 58 14 58 dc 57 fc 57
>3a5ab8	dc 57 18 58 e0 57 1c 59 e0 57 18 58 e0 57 00 58
>3a5ac8	e0 57 48 58 e0 57 80 58 e0 58 18 58 e0 57 00 58
>3a5ad8	e0 57 a0 58 e0 57 e0 57 e0 57 2c 59 e0 57 00 58
>3a5ae8	e0 57 68 58 e0 57 c0 58 00 59 34 59 e0 57 00 58
>3a5af8	e0 57 1c 58 e4 57 20 59 e4 57 1c 58 e4 57 04 58
>3a5b08	e4 57 4c 58 e4 57 84 58 e4 58 1c 58 e4 57 04 58
>3a5b18	e4 57 a4 58 e4 57 e4 57 e4 57 30 59 e4 57 04 58
>3a5b28	e4 57 6c 58 e4 57 c4 58 04 59 24 58 e4 57 04 58
>3a5b38	e4 57 00 00 13 00 02 09 01 01 01 0a 13 82 08 13
>3a5b48	03 03 03 0b 12 04 0f 0c 01 05 05 0d 13 06 08 13
>3a5b58	03 07 07 0e 03 00 0b 09 01 01 01 0a 13 82 08 13
>3a5b68	03 03 03 0b 12 04 0f 0c 05 05 05 0d 13 06 08 13
>3a5b78	07 07 07 0e 13 00 13 09 14 01 01 0a 13 82 08 13
>3a5b88	03 03 03 0b 12 04 0f 0c 14 05 05 0d 13 06 13 13
>3a5b98	0b 07 07 0b 13 00 16 09 01 01 01 0a 13 82 08 13
>3a5ba8	15 03 03 0b 12 04 0f 0c 05 05 05 0d 13 06 13 13
>3a5bb8	10 07 07 0e 12 00 16 09 01 01 01 0a 13 82 13 13
>3a5bc8	03 03 03 0b 12 04 0f 0c 05 05 11 0d 13 06 13 13
>3a5bd8	03 07 07 0e 82 00 42 09 01 01 01 0a 13 82 13 13
>3a5be8	03 03 03 0b 12 04 0f 0c 05 05 11 0d 13 06 13 13
>3a5bf8	07 07 06 0e 42 00 02 09 01 01 01 0a 13 82 13 13
>3a5c08	03 03 03 0b 12 04 0f 0c 01 05 05 0d 13 06 13 13
>3a5c18	17 07 07 0e 42 00 02 09 01 01 01 0f 13 82 13 13
>3a5c28	03 03 03 0b 12 04 0f 0c 03 05 05 0d 13 06 13 13
>3a5c38	10 07 07 0e 01 01 01 02 01 01 02 02 00 01 01 03
>3a5c48	01 01 03 01 02 01 01 00 02 02 02 02 41 00 08 64
>3a5c58	64 3a 64 64 64 64 2c 58 00 0e 64 64 3a 64 64 64
>3a5c68	64 00 0b 64 64 64 64 2c 58 00 07 64 64 64 64 2c
>3a5c78	59 00 06 64 64 64 64 00 03 64 64 2c 58 00 05 64
>3a5c88	64 2c 59 00 11 64 64 2c 53 00 09 64 64 00 01 23
>3a5c98	64 64 64 64 00 c2 23 64 64 2c 23 64 64 00 14 23
>3a5ca8	64 64 00 02 28 64 64 2c 53 29 2c 59 00 0c 28 64
>3a5cb8	64 64 64 2c 58 29 00 10 28 64 64 64 64 29 00 10
>3a5cc8	28 64 64 2c 58 29 00 00 28 64 64 29 2c 59 00 04
>3a5cd8	28 64 64 29 00 0f 5b 64 64 64 64 5d 00 17 5b 64
>3a5ce8	64 5d 2c 59 00 0d 5b 64 64 5d 00 0a 00 00 08 c2
>3a5cf8	20 48 18 af 7a 08 00 69 01 00 8f 7a 08 00 e2 20
>3a5d08	af 7c 08 00 69 00 8f 7c 08 00 c2 20 68 28 6b 08
>3a5d18	c2 10 e2 20 da a2 08 00 0a b0 08 48 a9 30 20 18
>3a5d28	00 80 06 48 a9 31 20 18 00 68 ca d0 eb fa 28 6b
>3a5d38	08 c2 20 48 a9 48 08 5b 68 28 e2 20 a7 32 f0 0a
>3a5d48	c9 20 d0 06 22 f6 5c 3a 80 f2 6b 08 08 c2 20 48
>3a5d58	a9 48 08 5b 68 28 22 f6 5c 3a 22 38 5d 3a c2 30
>3a5d68	a5 31 c2 20 29 ff 00 0a 0a aa a5 32 95 0d a5 34
>3a5d78	95 0f e2 20 a7 32 f0 14 c9 22 f0 06 22 f6 5c 3a
>3a5d88	80 f2 a9 00 87 32 22 f6 5c 3a e6 31 28 6b 08 c2
>3a5d98	20 48 a9 48 08 5b 68 28 e2 20 64 4a c2 20 64 50
>3a5da8	64 52 e2 20 a7 32 c9 3a f0 0d 20 19 03 90 0e 22
>3a5db8	2e 52 3a a9 01 85 4a 22 f6 5c 3a 80 e5 a5 4a f0
>3a5dc8	16 a5 31 c2 20 29 ff 00 0a 0a aa a5 50 95 0d a5
>3a5dd8	52 95 0f e2 20 e6 31 6b e2 20 64 31 22 38 5d 3a
>3a5de8	a7 32 f0 21 c9 22 d0 06 22 53 5d 3a 80 0a 22 96
>3a5df8	5d 3a a5 31 c9 09 b0 0d a7 32 f0 09 c9 20 f0 dc
>3a5e08	20 19 03 b0 d7 6b 08 0b 08 c2 20 48 a9 48 08 5b
>3a5e18	68 28 c2 10 e2 20 a2 31 00 74 00 ca d0 fb a9 00
>3a5e28	85 02 85 34 c2 20 a9 00 4f 85 00 85 32 e2 20 22
>3a5e38	38 5d 3a c9 00 f0 38 c2 20 a5 32 85 08 e2 20 a5
>3a5e48	34 85 0a a2 01 00 22 f6 5c 3a a7 32 d0 06 86 0b
>3a5e58	64 31 80 1b c9 20 f0 03 e8 80 eb 86 0b a9 00 87
>3a5e68	32 22 f6 5c 3a a7 08 c9 41 f0 07 22 e0 5d 3a 2b
>3a5e78	28 6b 22 38 5d 3a a7 32 f0 f5 22 96 5d 3a 22 38
>3a5e88	5d 3a a7 32 f0 e9 c2 20 a5 32 85 11 e2 20 a5 34
>3a5e98	85 13 22 f6 5c 3a a7 32 f0 26 c9 20 d0 f4 a9 00
>3a5ea8	87 32 e6 31 22 f6 5c 3a 22 38 5d 3a a7 32 f0 bf
>3a5eb8	c2 20 a5 32 85 15 e2 20 a5 34 85 17 e6 31 80 af
>3a5ec8	e6 31 80 ab 08 c2 10 e2 20 a5 31 d0 0f a2 c2 5f
>3a5ed8	a9 3a 48 ab 20 9c 02 20 1b 02 80 61 c2 20 a5 0d
>3a5ee8	8f 23 08 00 a5 0f 8f 25 08 00 20 0b 42 e2 20 a5
>3a5ef8	31 c9 01 d0 0f c2 20 a9 ff ff 8f 54 03 00 8f 56
>3a5f08	03 00 80 0e c2 20 a5 11 8f 54 03 00 a5 13 8f 56
>3a5f18	03 00 22 18 11 00 b0 25 e2 20 a2 e8 5f a9 3a 48
>3a5f28	ab 20 9c 02 af 2e 03 00 20 c6 02 a9 20 20 18 00
>3a5f38	af 20 03 00 20 c6 02 20 1b 02 20 1b 02 28 6b 8b
>3a5f48	08 c2 10 e2 20 a5 31 c9 03 f0 0f a2 c2 5f a9 3a
>3a5f58	48 ab 20 9c 02 20 1b 02 80 54 c2 20 a5 0d 8f 23
>3a5f68	08 00 a5 0f 8f 25 08 00 20 0b 42 a5 11 8f 50 03
>3a5f78	00 a5 13 8f 52 03 00 a5 15 8f 58 03 00 a5 17 8f
>3a5f88	5a 03 00 22 1c 11 00 b0 25 e2 20 a2 d2 5f a9 3a
>3a5f98	48 ab 20 9c 02 af 2e 03 00 20 c6 02 a9 20 20 18
>3a5fa8	00 af 20 03 00 20 c6 02 20 1b 02 20 1b 02 28 ab
>3a5fb8	6b 5c 83 1f 3a 6b 00 00 00 00 42 61 64 20 61 72
>3a5fc8	67 75 6d 65 6e 74 73 0d 0d 00 55 6e 61 62 6c 65
>3a5fd8	20 74 6f 20 73 61 76 65 20 66 69 6c 65 3a 20 00
>3a5fe8	55 6e 61 62 6c 65 20 74 6f 20 6c 6f 61 64 20 66
>3a5ff8	69 6c 65 3a 20 00 0d 20 20 50 43 20 20 20 20 20
>3a6008	41 20 20 20 20 58 20 20 20 20 59 20 20 20 20 53
>3a6018	50 20 20 20 44 42 52 20 44 50 20 20 20 4e 56 4d
>3a6028	58 44 49 5a 43 0d 00 41 43 44 46 47 4a 48 4c 4d
>3a6038	52 3b 53 54 56 57 58 3e 3f 00 18 fb 08 c2 20 48
>3a6048	a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28
>3a6058	c2 30 20 81 60 a9 ff fe 1b 08 e2 20 48 a9 3a 48
>3a6068	ab 68 28 a2 03 d2 20 9c 02 08 e2 20 48 a9 00 48
>3a6078	ab 68 28 4c 83 1f 4c 7e 60 08 20 af 01 20 f6 38
>3a6088	28 60 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3a6098	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 1781 times (28496 bytes)...
>3acff8	00 00 00 00 00 00 00 00 30 31 32 33 34 35 36 37
>3ad008	38 39 41 42 43 44 45 46 2b 00 2d 00 2a 00 2f 00
>3ad018	4d 4f 44 00 5e 00 3c 00 3d 00 3e 00 4e 4f 54 00
>3ad028	41 4e 44 00 4f 52 00 28 00 29 00 52 45 4d 00 50
>3ad038	52 49 4e 54 00 4c 45 54 00 47 4f 54 4f 00 45 4e
>3ad048	44 00 49 46 00 54 48 45 4e 00 45 4c 53 45 00 47
>3ad058	4f 53 55 42 00 52 45 54 55 52 4e 00 46 4f 52 00
>3ad068	54 4f 00 53 54 45 50 00 4e 45 58 54 00 44 4f 00
>3ad078	4c 4f 4f 50 00 57 48 49 4c 45 00 55 4e 54 49 4c
>3ad088	00 45 58 49 54 00 43 4c 52 00 53 54 4f 50 00 50
>3ad098	4f 4b 45 00 50 4f 4b 45 57 00 50 4f 4b 45 4c 00
>3ad0a8	43 4c 53 00 52 45 41 44 00 44 41 54 41 00 52 45
>3ad0b8	53 54 4f 52 45 00 44 49 4d 00 43 41 4c 4c 00 3c
>3ad0c8	3d 00 3e 3d 00 3c 3e 00 2d 00 4c 45 4e 00 50 45
>3ad0d8	45 4b 00 50 45 45 4b 57 00 50 45 45 4b 4c 00 43
>3ad0e8	48 52 24 00 41 53 43 00 53 50 43 00 54 41 42 00
>3ad0f8	41 42 53 00 53 47 4e 00 48 45 58 24 00 44 45 43
>3ad108	00 53 54 52 24 00 56 41 4c 00 4c 45 46 54 24 00
>3ad118	52 49 47 48 54 24 00 4d 49 44 24 00 52 55 4e 00
>3ad128	4e 45 57 00 4c 4f 41 44 00 4c 49 53 54 00 44 49
>3ad138	52 00 42 4c 4f 41 44 00 42 52 55 4e 00 42 53 41
>3ad148	56 45 00 44 45 4c 00 53 41 56 45 00 52 45 4e 41
>3ad158	4d 45 00 4d 4f 4e 49 54 4f 52 00 47 45 54 00 49
>3ad168	4e 50 55 54 00 53 45 54 42 4f 52 44 45 52 00 54
>3ad178	45 58 54 43 4f 4c 4f 52 00 53 45 54 42 47 43 4f
>3ad188	4c 4f 52 00 53 45 54 44 41 54 45 00 47 45 54 44
>3ad198	41 54 45 24 00 53 45 54 54 49 4d 45 00 47 45 54
>3ad1a8	54 49 4d 45 24 00 47 52 41 50 48 49 43 53 00 53
>3ad1b8	45 54 43 4f 4c 4f 52 00 50 49 58 4d 41 50 00 43
>3ad1c8	4c 52 50 49 58 4d 41 50 00 50 4c 4f 54 00 4c 49
>3ad1d8	4e 45 00 46 49 4c 4c 00 53 50 52 49 54 45 00 53
>3ad1e8	50 52 49 54 45 41 54 00 53 50 52 49 54 45 53 48
>3ad1f8	4f 57 00 0d 52 45 41 44 59 0d 00 43 32 35 36 20
>3ad208	46 6f 65 6e 69 78 20 42 41 53 49 43 38 31 36 20
>3ad218	0d 00
>3b0000					.align 256
.3b0000					CREDITS_TEXT
>3b0000	54 68 69 73 20 69 73 20		                .text "This is the credits screen!"
>3b0008	74 68 65 20 63 72 65 64 69 74 73 20 73 63 72 65
>3b0018	65 6e 21
>3b001b	20 20 20 20 20 20 20 20		                .fill 128 - len("This is the credits screen!"), $20
>3b0023	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b0073	20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0080	49 20 77 6f 75 6c 64 20		                .text "I would like to thank the academy."
>3b0088	6c 69 6b 65 20 74 6f 20 74 68 61 6e 6b 20 74 68
>3b0098	65 20 61 63 61 64 65 6d 79 2e
>3b00a2	20 20 20 20 20 20 20 20		                .fill 128 - len("I would like to thank the academy."), $20
>3b00aa	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b00fa	20 20 20 20 20 20
>3b0100					                .text ""
>3b0100	20 20 20 20 20 20 20 20		                .fill 128 - len(""), $20
>3b0108	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 6 times (96 bytes)...
>3b0178	20 20 20 20 20 20 20 20
>3b0180	50 72 65 73 73 20 61 6e		                .text "Press any key to go back..."
>3b0188	79 20 6b 65 79 20 74 6f 20 67 6f 20 62 61 63 6b
>3b0198	2e 2e 2e
>3b019b	20 20 20 20 20 20 20 20		                .fill 128 - len("Press any key to go back..."), $20
>3b01a3	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b01f3	20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0200	20 20 20 20 20 20 20 20		                .fill 128 * 60,$20
>3b0208	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 478 times (7648 bytes)...
>3b1ff8	20 20 20 20 20 20 20 20
>3b2000					.align 256
>3b2000	f3 f3 f3 f3 f3 f3 f3 f3		CREDITS_COLOR   .fill 128 * 64, $F3
>3b2008	f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3
;	...repeated 510 times (8160 bytes)...
>3b3ff8	f3 f3 f3 f3 f3 f3 f3 f3

;******  End of listing
